# coding: utf-8

"""
ArchitectApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ArchitectApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_architect_prompt(self, prompt_id, **kwargs):
        """
        Delete specified user prompt
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_architect_prompt(prompt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param bool all_resources: Whether or not to delete all the prompt resources
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'all_resources']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_architect_prompt" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `delete_architect_prompt`")


        resource_path = '/api/v2/architect/prompts/{promptId}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']

        query_params = {}
        if 'all_resources' in params:
            query_params['allResources'] = params['all_resources']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_architect_prompt_resource(self, prompt_id, language_code, **kwargs):
        """
        Delete specified user prompt resource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_architect_prompt_resource(prompt_id, language_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param str language_code: Language (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'language_code']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_architect_prompt_resource" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `delete_architect_prompt_resource`")
        # verify the required parameter 'language_code' is set
        if ('language_code' not in params) or (params['language_code'] is None):
            raise ValueError("Missing the required parameter `language_code` when calling `delete_architect_prompt_resource`")


        resource_path = '/api/v2/architect/prompts/{promptId}/resources/{languageCode}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']
        if 'language_code' in params:
            path_params['languageCode'] = params['language_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_architect_prompts(self, id, **kwargs):
        """
        Batch-delete a list of prompts
        Multiple IDs can be specified, in which case all specified prompts will be deleted.  Asynchronous.  Notification topic: v2.architect.prompts.{promptId}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_architect_prompts(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] id: List of Prompt IDs (required)
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_architect_prompts" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_architect_prompts`")


        resource_path = '/api/v2/architect/prompts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Operation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_architect_systemprompt_resource(self, prompt_id, language_code, **kwargs):
        """
        Delete a system prompt resource override.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_architect_systemprompt_resource(prompt_id, language_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param str language_code: Language (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'language_code']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_architect_systemprompt_resource" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `delete_architect_systemprompt_resource`")
        # verify the required parameter 'language_code' is set
        if ('language_code' not in params) or (params['language_code'] is None):
            raise ValueError("Missing the required parameter `language_code` when calling `delete_architect_systemprompt_resource`")


        resource_path = '/api/v2/architect/systemprompts/{promptId}/resources/{languageCode}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']
        if 'language_code' in params:
            path_params['languageCode'] = params['language_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_flow(self, flow_id, **kwargs):
        """
        Delete flow
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_flow(flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow_id: Flow ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_flow" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `delete_flow`")


        resource_path = '/api/v2/flows/{flowId}'.replace('{format}', 'json')
        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_flows(self, id, **kwargs):
        """
        Batch-delete a list of flows
        Multiple IDs can be specified, in which case all specified flows will be deleted.  Asynchronous.  Notification topic: v2.flows.{flowId}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_flows(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] id: List of Flow IDs (required)
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_flows" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_flows`")


        resource_path = '/api/v2/flows'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Operation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking(self, name, **kwargs):
        """
        Get Dependency Tracking objects that have a given display name
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Object name to search for (required)
        :param int page_number: Page number
        :param int page_size: Page size
        :param list[str] object_type: Object type(s) to search for
        :param bool consumed_resources: Include resources each result item consumes
        :param bool consuming_resources: Include resources that consume each result item
        :param list[str] consumed_resource_type: Types of consumed resources to return, if consumed resources are requested
        :param list[str] consuming_resource_type: Types of consuming resources to return, if consuming resources are requested
        :return: DependencyObjectEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'page_number', 'page_size', 'object_type', 'consumed_resources', 'consuming_resources', 'consumed_resource_type', 'consuming_resource_type']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_architect_dependencytracking`")


        resource_path = '/api/v2/architect/dependencytracking'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'object_type' in params:
            query_params['objectType'] = params['object_type']
        if 'consumed_resources' in params:
            query_params['consumedResources'] = params['consumed_resources']
        if 'consuming_resources' in params:
            query_params['consumingResources'] = params['consuming_resources']
        if 'consumed_resource_type' in params:
            query_params['consumedResourceType'] = params['consumed_resource_type']
        if 'consuming_resource_type' in params:
            query_params['consumingResourceType'] = params['consuming_resource_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DependencyObjectEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking_build(self, **kwargs):
        """
        Get Dependency Tracking build status for an organization
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking_build(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: DependencyStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking_build" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/architect/dependencytracking/build'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DependencyStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking_consumedresources(self, id, version, object_type, **kwargs):
        """
        Get resources that are consumed by a given Dependency Tracking object
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking_consumedresources(id, version, object_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Consuming object ID (required)
        :param str version: Consuming object version (required)
        :param str object_type: Consuming object type (required)
        :param list[str] resource_type: Types of consumed resources to show
        :return: ConsumedResourcesEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'version', 'object_type', 'resource_type']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking_consumedresources" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_architect_dependencytracking_consumedresources`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_architect_dependencytracking_consumedresources`")
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params) or (params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `get_architect_dependencytracking_consumedresources`")


        resource_path = '/api/v2/architect/dependencytracking/consumedresources'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'version' in params:
            query_params['version'] = params['version']
        if 'object_type' in params:
            query_params['objectType'] = params['object_type']
        if 'resource_type' in params:
            query_params['resourceType'] = params['resource_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConsumedResourcesEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking_consumingresources(self, id, object_type, **kwargs):
        """
        Get resources that consume a given Dependency Tracking object
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking_consumingresources(id, object_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Consumed object ID (required)
        :param str object_type: Consumed object type (only versioned object types are valid) (required)
        :param list[str] resource_type: Types of consuming resources to show
        :return: ConsumingResourcesEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'object_type', 'resource_type']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking_consumingresources" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_architect_dependencytracking_consumingresources`")
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params) or (params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `get_architect_dependencytracking_consumingresources`")


        resource_path = '/api/v2/architect/dependencytracking/consumingresources'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'object_type' in params:
            query_params['objectType'] = params['object_type']
        if 'resource_type' in params:
            query_params['resourceType'] = params['resource_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConsumingResourcesEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking_deletedresourceconsumers(self, **kwargs):
        """
        Get Dependency Tracking objects that consume deleted resources
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking_deletedresourceconsumers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name to search for
        :param list[str] object_type: Object type(s) to search for
        :param str flow_filter: Show only checkedIn or published flows
        :param bool consumed_resources: Return consumed resources?
        :param list[str] consumed_resource_type: Resource type(s) to return
        :param int page_number: Page number
        :param int page_size: Page size
        :return: DependencyObjectEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'object_type', 'flow_filter', 'consumed_resources', 'consumed_resource_type', 'page_number', 'page_size']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking_deletedresourceconsumers" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/architect/dependencytracking/deletedresourceconsumers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'name' in params:
            query_params['name'] = params['name']
        if 'object_type' in params:
            query_params['objectType'] = params['object_type']
        if 'flow_filter' in params:
            query_params['flowFilter'] = params['flow_filter']
        if 'consumed_resources' in params:
            query_params['consumedResources'] = params['consumed_resources']
        if 'consumed_resource_type' in params:
            query_params['consumedResourceType'] = params['consumed_resource_type']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DependencyObjectEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking_object(self, id, **kwargs):
        """
        Get a Dependency Tracking object
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking_object(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Object ID (required)
        :param str version: Object version
        :param str object_type: Object type
        :param bool consumed_resources: Include resources this item consumes
        :param bool consuming_resources: Include resources that consume this item
        :param list[str] consumed_resource_type: Types of consumed resources to return, if consumed resources are requested
        :param list[str] consuming_resource_type: Types of consuming resources to return, if consuming resources are requested
        :return: DependencyObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'version', 'object_type', 'consumed_resources', 'consuming_resources', 'consumed_resource_type', 'consuming_resource_type']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking_object" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_architect_dependencytracking_object`")


        resource_path = '/api/v2/architect/dependencytracking/object'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'version' in params:
            query_params['version'] = params['version']
        if 'object_type' in params:
            query_params['objectType'] = params['object_type']
        if 'consumed_resources' in params:
            query_params['consumedResources'] = params['consumed_resources']
        if 'consuming_resources' in params:
            query_params['consumingResources'] = params['consuming_resources']
        if 'consumed_resource_type' in params:
            query_params['consumedResourceType'] = params['consumed_resource_type']
        if 'consuming_resource_type' in params:
            query_params['consumingResourceType'] = params['consuming_resource_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DependencyObject',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking_type(self, type_id, **kwargs):
        """
        Get a Dependency Tracking type.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking_type(type_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type_id: Type ID (required)
        :return: DependencyType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking_type" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'type_id' is set
        if ('type_id' not in params) or (params['type_id'] is None):
            raise ValueError("Missing the required parameter `type_id` when calling `get_architect_dependencytracking_type`")


        resource_path = '/api/v2/architect/dependencytracking/types/{typeId}'.replace('{format}', 'json')
        path_params = {}
        if 'type_id' in params:
            path_params['typeId'] = params['type_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DependencyType',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking_types(self, **kwargs):
        """
        Get Dependency Tracking types.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking_types(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_number: Page number
        :param int page_size: Page size
        :return: DependencyTypeEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'page_size']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking_types" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/architect/dependencytracking/types'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DependencyTypeEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_dependencytracking_updatedresourceconsumers(self, **kwargs):
        """
        Get Dependency Tracking objects that depend on updated resources
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_dependencytracking_updatedresourceconsumers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name to search for
        :param list[str] object_type: Object type(s) to search for
        :param bool consumed_resources: Return consumed resources?
        :param list[str] consumed_resource_type: Resource type(s) to return
        :param int page_number: Page number
        :param int page_size: Page size
        :return: DependencyObjectEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'object_type', 'consumed_resources', 'consumed_resource_type', 'page_number', 'page_size']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_dependencytracking_updatedresourceconsumers" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/architect/dependencytracking/updatedresourceconsumers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'name' in params:
            query_params['name'] = params['name']
        if 'object_type' in params:
            query_params['objectType'] = params['object_type']
        if 'consumed_resources' in params:
            query_params['consumedResources'] = params['consumed_resources']
        if 'consumed_resource_type' in params:
            query_params['consumedResourceType'] = params['consumed_resource_type']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DependencyObjectEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_prompt(self, prompt_id, **kwargs):
        """
        Get specified user prompt
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_prompt(prompt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :return: Prompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_prompt" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `get_architect_prompt`")


        resource_path = '/api/v2/architect/prompts/{promptId}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Prompt',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_prompt_resource(self, prompt_id, language_code, **kwargs):
        """
        Get specified user prompt resource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_prompt_resource(prompt_id, language_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param str language_code: Language (required)
        :return: PromptAsset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'language_code']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_prompt_resource" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `get_architect_prompt_resource`")
        # verify the required parameter 'language_code' is set
        if ('language_code' not in params) or (params['language_code'] is None):
            raise ValueError("Missing the required parameter `language_code` when calling `get_architect_prompt_resource`")


        resource_path = '/api/v2/architect/prompts/{promptId}/resources/{languageCode}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']
        if 'language_code' in params:
            path_params['languageCode'] = params['language_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PromptAsset',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_prompt_resources(self, prompt_id, **kwargs):
        """
        Get a pageable list of user prompt resources
        The returned list is pageable, and query parameters can be used for filtering.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_prompt_resources(prompt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param int page_number: Page number
        :param int page_size: Page size
        :return: PromptAssetEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'page_number', 'page_size']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_prompt_resources" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `get_architect_prompt_resources`")


        resource_path = '/api/v2/architect/prompts/{promptId}/resources'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']

        query_params = {}
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PromptAssetEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_prompts(self, **kwargs):
        """
        Get a pageable list of user prompts
        The returned list is pageable, and query parameters can be used for filtering.  Multiple names can be specified, in which case all matching prompts will be returned, and no other filters will be evaluated.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_prompts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_number: Page number
        :param int page_size: Page size
        :param str name: Name
        :param str description: Description
        :param str name_or_description: Name or description
        :return: PromptEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'page_size', 'name', 'description', 'name_or_description']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_prompts" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/architect/prompts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'name_or_description' in params:
            query_params['nameOrDescription'] = params['name_or_description']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PromptEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_systemprompt(self, prompt_id, **kwargs):
        """
        Get a system prompt
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_systemprompt(prompt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: promptId (required)
        :return: SystemPrompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_systemprompt" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `get_architect_systemprompt`")


        resource_path = '/api/v2/architect/systemprompts/{promptId}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SystemPrompt',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_systemprompt_resource(self, prompt_id, language_code, **kwargs):
        """
        Get a system prompt resource.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_systemprompt_resource(prompt_id, language_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param str language_code: Language (required)
        :return: SystemPromptAsset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'language_code']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_systemprompt_resource" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `get_architect_systemprompt_resource`")
        # verify the required parameter 'language_code' is set
        if ('language_code' not in params) or (params['language_code'] is None):
            raise ValueError("Missing the required parameter `language_code` when calling `get_architect_systemprompt_resource`")


        resource_path = '/api/v2/architect/systemprompts/{promptId}/resources/{languageCode}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']
        if 'language_code' in params:
            path_params['languageCode'] = params['language_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SystemPromptAsset',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_systemprompt_resources(self, prompt_id, **kwargs):
        """
        Get system prompt resources.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_systemprompt_resources(prompt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param int page_number: Page number
        :param int page_size: Page size
        :param str sort_by: Sort by
        :param str sort_order: Sort order
        :return: SystemPromptAssetEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'page_number', 'page_size', 'sort_by', 'sort_order']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_systemprompt_resources" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `get_architect_systemprompt_resources`")


        resource_path = '/api/v2/architect/systemprompts/{promptId}/resources'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']

        query_params = {}
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SystemPromptAssetEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_architect_systemprompts(self, **kwargs):
        """
        Get System Prompts
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_architect_systemprompts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_number: Page number
        :param int page_size: Page size
        :param str sort_by: Sort by
        :param str sort_order: Sort order
        :param str name: Name
        :param str description: Description
        :param str name_or_description: Name or description
        :return: SystemPromptEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'page_size', 'sort_by', 'sort_order', 'name', 'description', 'name_or_description']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architect_systemprompts" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/architect/systemprompts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'name_or_description' in params:
            query_params['nameOrDescription'] = params['name_or_description']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SystemPromptEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_flow(self, flow_id, **kwargs):
        """
        Get flow
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_flow(flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow_id: Flow ID (required)
        :param bool deleted: Include deleted flows
        :return: Flow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_id', 'deleted']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_flow`")


        resource_path = '/api/v2/flows/{flowId}'.replace('{format}', 'json')
        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = {}
        if 'deleted' in params:
            query_params['deleted'] = params['deleted']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Flow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_flow_latestconfiguration(self, flow_id, **kwargs):
        """
        Get the latest configuration for flow
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_flow_latestconfiguration(flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow_id: Flow ID (required)
        :param bool deleted: Include deleted flows
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_id', 'deleted']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_latestconfiguration" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_flow_latestconfiguration`")


        resource_path = '/api/v2/flows/{flowId}/latestconfiguration'.replace('{format}', 'json')
        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = {}
        if 'deleted' in params:
            query_params['deleted'] = params['deleted']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_flow_version(self, flow_id, version_id, **kwargs):
        """
        Get flow version
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_flow_version(flow_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow_id: Flow ID (required)
        :param str version_id: Version ID (required)
        :param str deleted: Include deleted flows
        :return: FlowVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_id', 'version_id', 'deleted']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_version" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_flow_version`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_flow_version`")


        resource_path = '/api/v2/flows/{flowId}/versions/{versionId}'.replace('{format}', 'json')
        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}
        if 'deleted' in params:
            query_params['deleted'] = params['deleted']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FlowVersion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_flow_version_configuration(self, flow_id, version_id, **kwargs):
        """
        Create flow version configuration
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_flow_version_configuration(flow_id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow_id: Flow ID (required)
        :param str version_id: Version ID (required)
        :param str deleted: Include deleted flows
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_id', 'version_id', 'deleted']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_version_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_flow_version_configuration`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_flow_version_configuration`")


        resource_path = '/api/v2/flows/{flowId}/versions/{versionId}/configuration'.replace('{format}', 'json')
        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = {}
        if 'deleted' in params:
            query_params['deleted'] = params['deleted']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_flow_versions(self, flow_id, **kwargs):
        """
        Get flow version list
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_flow_versions(flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow_id: Flow ID (required)
        :param int page_number: Page number
        :param int page_size: Page size
        :param bool deleted: Include deleted flows
        :return: FlowVersionEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_id', 'page_number', 'page_size', 'deleted']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_versions" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_flow_versions`")


        resource_path = '/api/v2/flows/{flowId}/versions'.replace('{format}', 'json')
        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = {}
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'deleted' in params:
            query_params['deleted'] = params['deleted']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FlowVersionEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_flows(self, type, **kwargs):
        """
        Get a pageable list of flows, filtered by query parameters
        Multiple IDs can be specified, in which case all matching flows will be returned, and no other parameters will be evaluated.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_flows(type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type: Type (required)
        :param int page_number: Page number
        :param int page_size: Page size
        :param str sort_by: Sort by
        :param str sort_order: Sort order
        :param list[str] id: ID
        :param str name: Name
        :param str description: Description
        :param str name_or_description: Name or description
        :param str publish_version_id: Publish version ID
        :param str editable_by: Editable by
        :param str locked_by: Locked by
        :param str secure: Secure
        :param bool deleted: Include deleted
        :param bool include_schemas: Include variable schemas
        :return: FlowEntityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'page_number', 'page_size', 'sort_by', 'sort_order', 'id', 'name', 'description', 'name_or_description', 'publish_version_id', 'editable_by', 'locked_by', 'secure', 'deleted', 'include_schemas']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flows" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_flows`")


        resource_path = '/api/v2/flows'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'name_or_description' in params:
            query_params['nameOrDescription'] = params['name_or_description']
        if 'publish_version_id' in params:
            query_params['publishVersionId'] = params['publish_version_id']
        if 'editable_by' in params:
            query_params['editableBy'] = params['editable_by']
        if 'locked_by' in params:
            query_params['lockedBy'] = params['locked_by']
        if 'secure' in params:
            query_params['secure'] = params['secure']
        if 'deleted' in params:
            query_params['deleted'] = params['deleted']
        if 'include_schemas' in params:
            query_params['includeSchemas'] = params['include_schemas']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FlowEntityListing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_architect_dependencytracking_build(self, **kwargs):
        """
        Rebuild Dependency Tracking data for an organization
        Asynchronous.  Notification topic: v2.architect.dependencytracking.build

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_architect_dependencytracking_build(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_architect_dependencytracking_build" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/architect/dependencytracking/build'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_architect_prompt_resources(self, prompt_id, **kwargs):
        """
        Create a new user prompt resource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_architect_prompt_resources(prompt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param PromptAssetCreate body: 
        :return: PromptAsset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_architect_prompt_resources" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `post_architect_prompt_resources`")


        resource_path = '/api/v2/architect/prompts/{promptId}/resources'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PromptAsset',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_architect_prompts(self, **kwargs):
        """
        Create a new user prompt
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_architect_prompts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Prompt body: 
        :return: Prompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_architect_prompts" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/architect/prompts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Prompt',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_architect_systemprompt_resources(self, prompt_id, **kwargs):
        """
        Create system prompt resource override.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_architect_systemprompt_resources(prompt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param SystemPromptAsset body: 
        :return: SystemPromptAsset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_architect_systemprompt_resources" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `post_architect_systemprompt_resources`")


        resource_path = '/api/v2/architect/systemprompts/{promptId}/resources'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SystemPromptAsset',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_flow_versions(self, flow_id, **kwargs):
        """
        Create flow version
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_flow_versions(flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow_id: Flow ID (required)
        :param object body: 
        :return: FlowVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flow_versions" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `post_flow_versions`")


        resource_path = '/api/v2/flows/{flowId}/versions'.replace('{format}', 'json')
        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FlowVersion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_flows(self, **kwargs):
        """
        Create flow
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_flows(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Flow body: 
        :return: Flow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flows" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/api/v2/flows'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Flow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_flows_actions_checkin(self, flow, **kwargs):
        """
        Check-in flow
        Asynchronous.  Notification topic: v2.flows.{flowId}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_flows_actions_checkin(flow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow: Flow ID (required)
        :return: Flow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flows_actions_checkin" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow' is set
        if ('flow' not in params) or (params['flow'] is None):
            raise ValueError("Missing the required parameter `flow` when calling `post_flows_actions_checkin`")


        resource_path = '/api/v2/flows/actions/checkin'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'flow' in params:
            query_params['flow'] = params['flow']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Flow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_flows_actions_checkout(self, flow, **kwargs):
        """
        Check-out flow
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_flows_actions_checkout(flow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow: Flow ID (required)
        :return: Flow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flows_actions_checkout" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow' is set
        if ('flow' not in params) or (params['flow'] is None):
            raise ValueError("Missing the required parameter `flow` when calling `post_flows_actions_checkout`")


        resource_path = '/api/v2/flows/actions/checkout'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'flow' in params:
            query_params['flow'] = params['flow']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Flow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_flows_actions_deactivate(self, flow, **kwargs):
        """
        Deactivate flow
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_flows_actions_deactivate(flow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow: Flow ID (required)
        :return: Flow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flows_actions_deactivate" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow' is set
        if ('flow' not in params) or (params['flow'] is None):
            raise ValueError("Missing the required parameter `flow` when calling `post_flows_actions_deactivate`")


        resource_path = '/api/v2/flows/actions/deactivate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'flow' in params:
            query_params['flow'] = params['flow']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Flow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_flows_actions_publish(self, flow, **kwargs):
        """
        Publish flow
        Asynchronous.  Notification topic: v2.flows.{flowId}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_flows_actions_publish(flow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow: Flow ID (required)
        :param str version: version
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow', 'version']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flows_actions_publish" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow' is set
        if ('flow' not in params) or (params['flow'] is None):
            raise ValueError("Missing the required parameter `flow` when calling `post_flows_actions_publish`")


        resource_path = '/api/v2/flows/actions/publish'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'flow' in params:
            query_params['flow'] = params['flow']
        if 'version' in params:
            query_params['version'] = params['version']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Operation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_flows_actions_revert(self, flow, **kwargs):
        """
        Revert flow
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_flows_actions_revert(flow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow: Flow ID (required)
        :return: Flow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flows_actions_revert" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow' is set
        if ('flow' not in params) or (params['flow'] is None):
            raise ValueError("Missing the required parameter `flow` when calling `post_flows_actions_revert`")


        resource_path = '/api/v2/flows/actions/revert'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'flow' in params:
            query_params['flow'] = params['flow']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Flow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_flows_actions_unlock(self, flow, **kwargs):
        """
        Unlock flow
        Allows for unlocking a flow in the case where there is no flow configuration available, and thus a check-in will not unlock the flow. The user must have Architect Admin permissions to perform this action.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_flows_actions_unlock(flow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow: Flow ID (required)
        :return: Flow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flows_actions_unlock" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow' is set
        if ('flow' not in params) or (params['flow'] is None):
            raise ValueError("Missing the required parameter `flow` when calling `post_flows_actions_unlock`")


        resource_path = '/api/v2/flows/actions/unlock'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'flow' in params:
            query_params['flow'] = params['flow']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Flow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def put_architect_prompt(self, prompt_id, **kwargs):
        """
        Update specified user prompt
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_architect_prompt(prompt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param Prompt body: 
        :return: Prompt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_architect_prompt" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `put_architect_prompt`")


        resource_path = '/api/v2/architect/prompts/{promptId}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Prompt',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def put_architect_prompt_resource(self, prompt_id, language_code, **kwargs):
        """
        Update specified user prompt resource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_architect_prompt_resource(prompt_id, language_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param str language_code: Language (required)
        :param PromptAsset body: 
        :return: PromptAsset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'language_code', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_architect_prompt_resource" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `put_architect_prompt_resource`")
        # verify the required parameter 'language_code' is set
        if ('language_code' not in params) or (params['language_code'] is None):
            raise ValueError("Missing the required parameter `language_code` when calling `put_architect_prompt_resource`")


        resource_path = '/api/v2/architect/prompts/{promptId}/resources/{languageCode}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']
        if 'language_code' in params:
            path_params['languageCode'] = params['language_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PromptAsset',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def put_architect_systemprompt_resource(self, prompt_id, language_code, **kwargs):
        """
        Updates a system prompt resource override.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_architect_systemprompt_resource(prompt_id, language_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str prompt_id: Prompt ID (required)
        :param str language_code: Language (required)
        :param SystemPromptAsset body: 
        :return: SystemPromptAsset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prompt_id', 'language_code', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_architect_systemprompt_resource" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'prompt_id' is set
        if ('prompt_id' not in params) or (params['prompt_id'] is None):
            raise ValueError("Missing the required parameter `prompt_id` when calling `put_architect_systemprompt_resource`")
        # verify the required parameter 'language_code' is set
        if ('language_code' not in params) or (params['language_code'] is None):
            raise ValueError("Missing the required parameter `language_code` when calling `put_architect_systemprompt_resource`")


        resource_path = '/api/v2/architect/systemprompts/{promptId}/resources/{languageCode}'.replace('{format}', 'json')
        path_params = {}
        if 'prompt_id' in params:
            path_params['promptId'] = params['prompt_id']
        if 'language_code' in params:
            path_params['languageCode'] = params['language_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SystemPromptAsset',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def put_flow(self, flow_id, **kwargs):
        """
        Update flow
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_flow(flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str flow_id: Flow ID (required)
        :param Flow body: 
        :return: Flow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flow_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_flow" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `put_flow`")


        resource_path = '/api/v2/flows/{flowId}'.replace('{format}', 'json')
        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['PureCloud Auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Flow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
