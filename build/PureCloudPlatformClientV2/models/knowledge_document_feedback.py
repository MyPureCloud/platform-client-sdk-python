# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import EntityReference
    from . import KnowledgeConversationContext
    from . import KnowledgeDocumentVersionReference
    from . import KnowledgeSearchClientApplication

class KnowledgeDocumentFeedback(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        KnowledgeDocumentFeedback - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'document_variation': 'EntityReference',
            'rating': 'str',
            'reason': 'str',
            'comment': 'str',
            'search': 'EntityReference',
            'session_id': 'str',
            'date_created': 'datetime',
            'query_type': 'str',
            'state': 'str',
            'document': 'KnowledgeDocumentVersionReference',
            'application': 'KnowledgeSearchClientApplication',
            'conversation_context': 'KnowledgeConversationContext',
            'user_id': 'str',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'document_variation': 'documentVariation',
            'rating': 'rating',
            'reason': 'reason',
            'comment': 'comment',
            'search': 'search',
            'session_id': 'sessionId',
            'date_created': 'dateCreated',
            'query_type': 'queryType',
            'state': 'state',
            'document': 'document',
            'application': 'application',
            'conversation_context': 'conversationContext',
            'user_id': 'userId',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._document_variation = None
        self._rating = None
        self._reason = None
        self._comment = None
        self._search = None
        self._session_id = None
        self._date_created = None
        self._query_type = None
        self._state = None
        self._document = None
        self._application = None
        self._conversation_context = None
        self._user_id = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this KnowledgeDocumentFeedback.
        The globally unique identifier for the object.

        :return: The id of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this KnowledgeDocumentFeedback.
        The globally unique identifier for the object.

        :param id: The id of this KnowledgeDocumentFeedback.
        :type: str
        """
        

        self._id = id

    @property
    def document_variation(self) -> 'EntityReference':
        """
        Gets the document_variation of this KnowledgeDocumentFeedback.
        The variation of the document on which feedback was given.

        :return: The document_variation of this KnowledgeDocumentFeedback.
        :rtype: EntityReference
        """
        return self._document_variation

    @document_variation.setter
    def document_variation(self, document_variation: 'EntityReference') -> None:
        """
        Sets the document_variation of this KnowledgeDocumentFeedback.
        The variation of the document on which feedback was given.

        :param document_variation: The document_variation of this KnowledgeDocumentFeedback.
        :type: EntityReference
        """
        

        self._document_variation = document_variation

    @property
    def rating(self) -> str:
        """
        Gets the rating of this KnowledgeDocumentFeedback.
        Feedback rating.

        :return: The rating of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating: str) -> None:
        """
        Sets the rating of this KnowledgeDocumentFeedback.
        Feedback rating.

        :param rating: The rating of this KnowledgeDocumentFeedback.
        :type: str
        """
        if isinstance(rating, int):
            rating = str(rating)
        allowed_values = ["Negative", "Positive"]
        if rating.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for rating -> " + rating)
            self._rating = "outdated_sdk_version"
        else:
            self._rating = rating

    @property
    def reason(self) -> str:
        """
        Gets the reason of this KnowledgeDocumentFeedback.
        Feedback reason.

        :return: The reason of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str) -> None:
        """
        Sets the reason of this KnowledgeDocumentFeedback.
        Feedback reason.

        :param reason: The reason of this KnowledgeDocumentFeedback.
        :type: str
        """
        if isinstance(reason, int):
            reason = str(reason)
        allowed_values = ["DocumentContent", "SearchResults"]
        if reason.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for reason -> " + reason)
            self._reason = "outdated_sdk_version"
        else:
            self._reason = reason

    @property
    def comment(self) -> str:
        """
        Gets the comment of this KnowledgeDocumentFeedback.
        Free-text comment of the feedback. Maximum length: 2000 characters.

        :return: The comment of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str) -> None:
        """
        Sets the comment of this KnowledgeDocumentFeedback.
        Free-text comment of the feedback. Maximum length: 2000 characters.

        :param comment: The comment of this KnowledgeDocumentFeedback.
        :type: str
        """
        
        if len(comment) > 2000:
            raise ValueError("Invalid value for `comment`, length must be less than `2000`")

        if len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")


        self._comment = comment

    @property
    def search(self) -> 'EntityReference':
        """
        Gets the search of this KnowledgeDocumentFeedback.
        The search that surfaced the document on which feedback was given.

        :return: The search of this KnowledgeDocumentFeedback.
        :rtype: EntityReference
        """
        return self._search

    @search.setter
    def search(self, search: 'EntityReference') -> None:
        """
        Sets the search of this KnowledgeDocumentFeedback.
        The search that surfaced the document on which feedback was given.

        :param search: The search of this KnowledgeDocumentFeedback.
        :type: EntityReference
        """
        

        self._search = search

    @property
    def session_id(self) -> str:
        """
        Gets the session_id of this KnowledgeDocumentFeedback.
        Knowledge guest session ID.

        :return: The session_id of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str) -> None:
        """
        Sets the session_id of this KnowledgeDocumentFeedback.
        Knowledge guest session ID.

        :param session_id: The session_id of this KnowledgeDocumentFeedback.
        :type: str
        """
        

        self._session_id = session_id

    @property
    def date_created(self) -> datetime:
        """
        Gets the date_created of this KnowledgeDocumentFeedback.
        The date and time of the feedback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_created of this KnowledgeDocumentFeedback.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime) -> None:
        """
        Sets the date_created of this KnowledgeDocumentFeedback.
        The date and time of the feedback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_created: The date_created of this KnowledgeDocumentFeedback.
        :type: datetime
        """
        

        self._date_created = date_created

    @property
    def query_type(self) -> str:
        """
        Gets the query_type of this KnowledgeDocumentFeedback.
        The type of the query that surfaced the document on which the feedback was given.

        :return: The query_type of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type: str) -> None:
        """
        Sets the query_type of this KnowledgeDocumentFeedback.
        The type of the query that surfaced the document on which the feedback was given.

        :param query_type: The query_type of this KnowledgeDocumentFeedback.
        :type: str
        """
        if isinstance(query_type, int):
            query_type = str(query_type)
        allowed_values = ["Unknown", "Article", "AutoSearch", "Category", "ManualSearch", "Recommendation", "Suggestion"]
        if query_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for query_type -> " + query_type)
            self._query_type = "outdated_sdk_version"
        else:
            self._query_type = query_type

    @property
    def state(self) -> str:
        """
        Gets the state of this KnowledgeDocumentFeedback.
        The state of the feedback.

        :return: The state of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str) -> None:
        """
        Sets the state of this KnowledgeDocumentFeedback.
        The state of the feedback.

        :param state: The state of this KnowledgeDocumentFeedback.
        :type: str
        """
        if isinstance(state, int):
            state = str(state)
        allowed_values = ["Draft", "Final"]
        if state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for state -> " + state)
            self._state = "outdated_sdk_version"
        else:
            self._state = state

    @property
    def document(self) -> 'KnowledgeDocumentVersionReference':
        """
        Gets the document of this KnowledgeDocumentFeedback.
        The document on which feedback was given.

        :return: The document of this KnowledgeDocumentFeedback.
        :rtype: KnowledgeDocumentVersionReference
        """
        return self._document

    @document.setter
    def document(self, document: 'KnowledgeDocumentVersionReference') -> None:
        """
        Sets the document of this KnowledgeDocumentFeedback.
        The document on which feedback was given.

        :param document: The document of this KnowledgeDocumentFeedback.
        :type: KnowledgeDocumentVersionReference
        """
        

        self._document = document

    @property
    def application(self) -> 'KnowledgeSearchClientApplication':
        """
        Gets the application of this KnowledgeDocumentFeedback.
        The client application from which feedback was given.

        :return: The application of this KnowledgeDocumentFeedback.
        :rtype: KnowledgeSearchClientApplication
        """
        return self._application

    @application.setter
    def application(self, application: 'KnowledgeSearchClientApplication') -> None:
        """
        Sets the application of this KnowledgeDocumentFeedback.
        The client application from which feedback was given.

        :param application: The application of this KnowledgeDocumentFeedback.
        :type: KnowledgeSearchClientApplication
        """
        

        self._application = application

    @property
    def conversation_context(self) -> 'KnowledgeConversationContext':
        """
        Gets the conversation_context of this KnowledgeDocumentFeedback.
        Conversation context information if the feedback is given in the context of a conversation.

        :return: The conversation_context of this KnowledgeDocumentFeedback.
        :rtype: KnowledgeConversationContext
        """
        return self._conversation_context

    @conversation_context.setter
    def conversation_context(self, conversation_context: 'KnowledgeConversationContext') -> None:
        """
        Sets the conversation_context of this KnowledgeDocumentFeedback.
        Conversation context information if the feedback is given in the context of a conversation.

        :param conversation_context: The conversation_context of this KnowledgeDocumentFeedback.
        :type: KnowledgeConversationContext
        """
        

        self._conversation_context = conversation_context

    @property
    def user_id(self) -> str:
        """
        Gets the user_id of this KnowledgeDocumentFeedback.
        The ID of the user who created the feedback.

        :return: The user_id of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str) -> None:
        """
        Sets the user_id of this KnowledgeDocumentFeedback.
        The ID of the user who created the feedback.

        :param user_id: The user_id of this KnowledgeDocumentFeedback.
        :type: str
        """
        

        self._user_id = user_id

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this KnowledgeDocumentFeedback.
        The URI for this object

        :return: The self_uri of this KnowledgeDocumentFeedback.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this KnowledgeDocumentFeedback.
        The URI for this object

        :param self_uri: The self_uri of this KnowledgeDocumentFeedback.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

