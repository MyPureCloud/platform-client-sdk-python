# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import JourneySegmentAssignmentEventsNotificationSegment

class JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'segment': 'JourneySegmentAssignmentEventsNotificationSegment',
            'assignment_state': 'str',
            'date_assigned': 'datetime',
            'date_for_unassignment': 'datetime'
        }

        self.attribute_map = {
            'segment': 'segment',
            'assignment_state': 'assignmentState',
            'date_assigned': 'dateAssigned',
            'date_for_unassignment': 'dateForUnassignment'
        }

        self._segment = None
        self._assignment_state = None
        self._date_assigned = None
        self._date_for_unassignment = None

    @property
    def segment(self) -> 'JourneySegmentAssignmentEventsNotificationSegment':
        """
        Gets the segment of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.


        :return: The segment of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.
        :rtype: JourneySegmentAssignmentEventsNotificationSegment
        """
        return self._segment

    @segment.setter
    def segment(self, segment: 'JourneySegmentAssignmentEventsNotificationSegment') -> None:
        """
        Sets the segment of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.


        :param segment: The segment of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.
        :type: JourneySegmentAssignmentEventsNotificationSegment
        """
        

        self._segment = segment

    @property
    def assignment_state(self) -> str:
        """
        Gets the assignment_state of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.


        :return: The assignment_state of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.
        :rtype: str
        """
        return self._assignment_state

    @assignment_state.setter
    def assignment_state(self, assignment_state: str) -> None:
        """
        Sets the assignment_state of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.


        :param assignment_state: The assignment_state of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.
        :type: str
        """
        if isinstance(assignment_state, int):
            assignment_state = str(assignment_state)
        allowed_values = ["Unknown", "Assigned", "Unassigned"]
        if assignment_state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for assignment_state -> " + assignment_state)
            self._assignment_state = "outdated_sdk_version"
        else:
            self._assignment_state = assignment_state

    @property
    def date_assigned(self) -> datetime:
        """
        Gets the date_assigned of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.


        :return: The date_assigned of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.
        :rtype: datetime
        """
        return self._date_assigned

    @date_assigned.setter
    def date_assigned(self, date_assigned: datetime) -> None:
        """
        Sets the date_assigned of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.


        :param date_assigned: The date_assigned of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.
        :type: datetime
        """
        

        self._date_assigned = date_assigned

    @property
    def date_for_unassignment(self) -> datetime:
        """
        Gets the date_for_unassignment of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.


        :return: The date_for_unassignment of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.
        :rtype: datetime
        """
        return self._date_for_unassignment

    @date_for_unassignment.setter
    def date_for_unassignment(self, date_for_unassignment: datetime) -> None:
        """
        Sets the date_for_unassignment of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.


        :param date_for_unassignment: The date_for_unassignment of this JourneySegmentAssignmentEventsNotificationSegmentAssignmentMessage.
        :type: datetime
        """
        

        self._date_for_unassignment = date_for_unassignment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

