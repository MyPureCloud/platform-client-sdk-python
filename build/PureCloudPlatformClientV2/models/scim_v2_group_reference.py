# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ScimV2GroupReference(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ScimV2GroupReference - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'display_name': 'str',
            'meta': 'ScimMetadata',
            'type': 'str',
            'value': 'str',
            'ref': 'str'
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'meta': 'meta',
            'type': 'type',
            'value': 'value',
            'ref': '$ref'
        }

        self._display_name = None
        self._meta = None
        self._type = None
        self._value = None
        self._ref = None

    @property
    def display_name(self):
        """
        Gets the display_name of this ScimV2GroupReference.
        Display Name

        :return: The display_name of this ScimV2GroupReference.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this ScimV2GroupReference.
        Display Name

        :param display_name: The display_name of this ScimV2GroupReference.
        :type: str
        """
        
        self._display_name = display_name

    @property
    def meta(self):
        """
        Gets the meta of this ScimV2GroupReference.


        :return: The meta of this ScimV2GroupReference.
        :rtype: ScimMetadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """
        Sets the meta of this ScimV2GroupReference.


        :param meta: The meta of this ScimV2GroupReference.
        :type: ScimMetadata
        """
        
        self._meta = meta

    @property
    def type(self):
        """
        Gets the type of this ScimV2GroupReference.
        SCIM Resource Type of member

        :return: The type of this ScimV2GroupReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ScimV2GroupReference.
        SCIM Resource Type of member

        :param type: The type of this ScimV2GroupReference.
        :type: str
        """
        allowed_values = ["User", "Group", "ServiceProviderConfig"]
        if type.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for type -> " + type
            self._type = "outdated_sdk_version"
        else:
            self._type = type

    @property
    def value(self):
        """
        Gets the value of this ScimV2GroupReference.
        Value of ID of group member. May be User or Group id

        :return: The value of this ScimV2GroupReference.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ScimV2GroupReference.
        Value of ID of group member. May be User or Group id

        :param value: The value of this ScimV2GroupReference.
        :type: str
        """
        
        self._value = value

    @property
    def ref(self):
        """
        Gets the ref of this ScimV2GroupReference.
        Ref to entity

        :return: The ref of this ScimV2GroupReference.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """
        Sets the ref of this ScimV2GroupReference.
        Ref to entity

        :param ref: The ref of this ScimV2GroupReference.
        :type: str
        """
        
        self._ref = ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

