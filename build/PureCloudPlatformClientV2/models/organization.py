# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class Organization(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        Organization - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'default_language': 'str',
            'default_country_code': 'str',
            'third_party_org_name': 'str',
            'third_party_uri': 'str',
            'domain': 'str',
            'version': 'int',
            'state': 'str',
            'default_site_id': 'str',
            'support_uri': 'str',
            'voicemail_enabled': 'bool',
            'product_platform': 'str',
            'self_uri': 'str',
            'features': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'default_language': 'defaultLanguage',
            'default_country_code': 'defaultCountryCode',
            'third_party_org_name': 'thirdPartyOrgName',
            'third_party_uri': 'thirdPartyURI',
            'domain': 'domain',
            'version': 'version',
            'state': 'state',
            'default_site_id': 'defaultSiteId',
            'support_uri': 'supportURI',
            'voicemail_enabled': 'voicemailEnabled',
            'product_platform': 'productPlatform',
            'self_uri': 'selfUri',
            'features': 'features'
        }

        self._id = None
        self._name = None
        self._default_language = None
        self._default_country_code = None
        self._third_party_org_name = None
        self._third_party_uri = None
        self._domain = None
        self._version = None
        self._state = None
        self._default_site_id = None
        self._support_uri = None
        self._voicemail_enabled = None
        self._product_platform = None
        self._self_uri = None
        self._features = None

    @property
    def id(self) -> str:
        """
        Gets the id of this Organization.
        The globally unique identifier for the object.

        :return: The id of this Organization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this Organization.
        The globally unique identifier for the object.

        :param id: The id of this Organization.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Organization.


        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this Organization.


        :param name: The name of this Organization.
        :type: str
        """
        

        self._name = name

    @property
    def default_language(self) -> str:
        """
        Gets the default_language of this Organization.
        The default language for this organization. Example: 'en'

        :return: The default_language of this Organization.
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language: str) -> None:
        """
        Sets the default_language of this Organization.
        The default language for this organization. Example: 'en'

        :param default_language: The default_language of this Organization.
        :type: str
        """
        

        self._default_language = default_language

    @property
    def default_country_code(self) -> str:
        """
        Gets the default_country_code of this Organization.
        The default country code for this organization. Example: 'US'

        :return: The default_country_code of this Organization.
        :rtype: str
        """
        return self._default_country_code

    @default_country_code.setter
    def default_country_code(self, default_country_code: str) -> None:
        """
        Sets the default_country_code of this Organization.
        The default country code for this organization. Example: 'US'

        :param default_country_code: The default_country_code of this Organization.
        :type: str
        """
        

        self._default_country_code = default_country_code

    @property
    def third_party_org_name(self) -> str:
        """
        Gets the third_party_org_name of this Organization.
        The short name for the organization. This field is globally unique and cannot be changed.

        :return: The third_party_org_name of this Organization.
        :rtype: str
        """
        return self._third_party_org_name

    @third_party_org_name.setter
    def third_party_org_name(self, third_party_org_name: str) -> None:
        """
        Sets the third_party_org_name of this Organization.
        The short name for the organization. This field is globally unique and cannot be changed.

        :param third_party_org_name: The third_party_org_name of this Organization.
        :type: str
        """
        

        self._third_party_org_name = third_party_org_name

    @property
    def third_party_uri(self) -> str:
        """
        Gets the third_party_uri of this Organization.


        :return: The third_party_uri of this Organization.
        :rtype: str
        """
        return self._third_party_uri

    @third_party_uri.setter
    def third_party_uri(self, third_party_uri: str) -> None:
        """
        Sets the third_party_uri of this Organization.


        :param third_party_uri: The third_party_uri of this Organization.
        :type: str
        """
        

        self._third_party_uri = third_party_uri

    @property
    def domain(self) -> str:
        """
        Gets the domain of this Organization.


        :return: The domain of this Organization.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str) -> None:
        """
        Sets the domain of this Organization.


        :param domain: The domain of this Organization.
        :type: str
        """
        

        self._domain = domain

    @property
    def version(self) -> int:
        """
        Gets the version of this Organization.
        The current version of the organization.

        :return: The version of this Organization.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int) -> None:
        """
        Sets the version of this Organization.
        The current version of the organization.

        :param version: The version of this Organization.
        :type: int
        """
        

        self._version = version

    @property
    def state(self) -> str:
        """
        Gets the state of this Organization.
        The current state. Examples are active, inactive, deleted.

        :return: The state of this Organization.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str) -> None:
        """
        Sets the state of this Organization.
        The current state. Examples are active, inactive, deleted.

        :param state: The state of this Organization.
        :type: str
        """
        if isinstance(state, int):
            state = str(state)
        allowed_values = ["active", "inactive", "deleted"]
        if state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for state -> " + state)
            self._state = "outdated_sdk_version"
        else:
            self._state = state

    @property
    def default_site_id(self) -> str:
        """
        Gets the default_site_id of this Organization.


        :return: The default_site_id of this Organization.
        :rtype: str
        """
        return self._default_site_id

    @default_site_id.setter
    def default_site_id(self, default_site_id: str) -> None:
        """
        Sets the default_site_id of this Organization.


        :param default_site_id: The default_site_id of this Organization.
        :type: str
        """
        

        self._default_site_id = default_site_id

    @property
    def support_uri(self) -> str:
        """
        Gets the support_uri of this Organization.
        Email address where support tickets are sent to.

        :return: The support_uri of this Organization.
        :rtype: str
        """
        return self._support_uri

    @support_uri.setter
    def support_uri(self, support_uri: str) -> None:
        """
        Sets the support_uri of this Organization.
        Email address where support tickets are sent to.

        :param support_uri: The support_uri of this Organization.
        :type: str
        """
        

        self._support_uri = support_uri

    @property
    def voicemail_enabled(self) -> bool:
        """
        Gets the voicemail_enabled of this Organization.


        :return: The voicemail_enabled of this Organization.
        :rtype: bool
        """
        return self._voicemail_enabled

    @voicemail_enabled.setter
    def voicemail_enabled(self, voicemail_enabled: bool) -> None:
        """
        Sets the voicemail_enabled of this Organization.


        :param voicemail_enabled: The voicemail_enabled of this Organization.
        :type: bool
        """
        

        self._voicemail_enabled = voicemail_enabled

    @property
    def product_platform(self) -> str:
        """
        Gets the product_platform of this Organization.
        Organizations Originating Platform.

        :return: The product_platform of this Organization.
        :rtype: str
        """
        return self._product_platform

    @product_platform.setter
    def product_platform(self, product_platform: str) -> None:
        """
        Sets the product_platform of this Organization.
        Organizations Originating Platform.

        :param product_platform: The product_platform of this Organization.
        :type: str
        """
        if isinstance(product_platform, int):
            product_platform = str(product_platform)
        allowed_values = ["GenesysCloud", "PureCloud", "PureEngage", "PureEngageCloud", "PureConnect", "PureConnectCloud", "Unknown"]
        if product_platform.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for product_platform -> " + product_platform)
            self._product_platform = "outdated_sdk_version"
        else:
            self._product_platform = product_platform

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this Organization.
        The URI for this object

        :return: The self_uri of this Organization.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this Organization.
        The URI for this object

        :param self_uri: The self_uri of this Organization.
        :type: str
        """
        

        self._self_uri = self_uri

    @property
    def features(self) -> Dict[str, bool]:
        """
        Gets the features of this Organization.
        The state of features available for the organization.

        :return: The features of this Organization.
        :rtype: dict(str, bool)
        """
        return self._features

    @features.setter
    def features(self, features: Dict[str, bool]) -> None:
        """
        Sets the features of this Organization.
        The state of features available for the organization.

        :param features: The features of this Organization.
        :type: dict(str, bool)
        """
        

        self._features = features

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

