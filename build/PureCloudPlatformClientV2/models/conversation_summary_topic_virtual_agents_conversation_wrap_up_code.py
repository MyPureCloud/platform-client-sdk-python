# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class ConversationSummaryTopicVirtualAgentsConversationWrapUpCode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ConversationSummaryTopicVirtualAgentsConversationWrapUpCode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'wrap_up_code_id': 'str',
            'name': 'str',
            'description': 'str',
            'score': 'float'
        }

        self.attribute_map = {
            'wrap_up_code_id': 'wrapUpCodeId',
            'name': 'name',
            'description': 'description',
            'score': 'score'
        }

        self._wrap_up_code_id = None
        self._name = None
        self._description = None
        self._score = None

    @property
    def wrap_up_code_id(self) -> str:
        """
        Gets the wrap_up_code_id of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.


        :return: The wrap_up_code_id of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.
        :rtype: str
        """
        return self._wrap_up_code_id

    @wrap_up_code_id.setter
    def wrap_up_code_id(self, wrap_up_code_id: str) -> None:
        """
        Sets the wrap_up_code_id of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.


        :param wrap_up_code_id: The wrap_up_code_id of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.
        :type: str
        """
        

        self._wrap_up_code_id = wrap_up_code_id

    @property
    def name(self) -> str:
        """
        Gets the name of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.


        :return: The name of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.


        :param name: The name of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.
        :type: str
        """
        

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.


        :return: The description of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str) -> None:
        """
        Sets the description of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.


        :param description: The description of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.
        :type: str
        """
        

        self._description = description

    @property
    def score(self) -> float:
        """
        Gets the score of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.


        :return: The score of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float) -> None:
        """
        Sets the score of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.


        :param score: The score of this ConversationSummaryTopicVirtualAgentsConversationWrapUpCode.
        :type: float
        """
        

        self._score = score

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

