# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class ApplePay(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ApplePay - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'store_name': 'str',
            'merchant_id': 'str',
            'domain_name': 'str',
            'payment_capabilities': 'list[str]',
            'supported_payment_networks': 'list[str]',
            'payment_certificate_credential_id': 'str',
            'payment_gateway_url': 'str',
            'fallback_url': 'str',
            'shipping_method_update_url': 'str',
            'shipping_contact_update_url': 'str',
            'payment_method_update_url': 'str',
            'order_tracking_url': 'str'
        }

        self.attribute_map = {
            'store_name': 'storeName',
            'merchant_id': 'merchantId',
            'domain_name': 'domainName',
            'payment_capabilities': 'paymentCapabilities',
            'supported_payment_networks': 'supportedPaymentNetworks',
            'payment_certificate_credential_id': 'paymentCertificateCredentialId',
            'payment_gateway_url': 'paymentGatewayUrl',
            'fallback_url': 'fallbackUrl',
            'shipping_method_update_url': 'shippingMethodUpdateUrl',
            'shipping_contact_update_url': 'shippingContactUpdateUrl',
            'payment_method_update_url': 'paymentMethodUpdateUrl',
            'order_tracking_url': 'orderTrackingUrl'
        }

        self._store_name = None
        self._merchant_id = None
        self._domain_name = None
        self._payment_capabilities = None
        self._supported_payment_networks = None
        self._payment_certificate_credential_id = None
        self._payment_gateway_url = None
        self._fallback_url = None
        self._shipping_method_update_url = None
        self._shipping_contact_update_url = None
        self._payment_method_update_url = None
        self._order_tracking_url = None

    @property
    def store_name(self) -> str:
        """
        Gets the store_name of this ApplePay.
        The name of the store.

        :return: The store_name of this ApplePay.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name: str) -> None:
        """
        Sets the store_name of this ApplePay.
        The name of the store.

        :param store_name: The store_name of this ApplePay.
        :type: str
        """
        

        self._store_name = store_name

    @property
    def merchant_id(self) -> str:
        """
        Gets the merchant_id of this ApplePay.
        The stores merchant identifier.

        :return: The merchant_id of this ApplePay.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id: str) -> None:
        """
        Sets the merchant_id of this ApplePay.
        The stores merchant identifier.

        :param merchant_id: The merchant_id of this ApplePay.
        :type: str
        """
        

        self._merchant_id = merchant_id

    @property
    def domain_name(self) -> str:
        """
        Gets the domain_name of this ApplePay.
        The domain name associated with the merchant account.

        :return: The domain_name of this ApplePay.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name: str) -> None:
        """
        Sets the domain_name of this ApplePay.
        The domain name associated with the merchant account.

        :param domain_name: The domain_name of this ApplePay.
        :type: str
        """
        

        self._domain_name = domain_name

    @property
    def payment_capabilities(self) -> List[str]:
        """
        Gets the payment_capabilities of this ApplePay.
        The payment capabilities supported by the merchant.

        :return: The payment_capabilities of this ApplePay.
        :rtype: list[str]
        """
        return self._payment_capabilities

    @payment_capabilities.setter
    def payment_capabilities(self, payment_capabilities: List[str]) -> None:
        """
        Sets the payment_capabilities of this ApplePay.
        The payment capabilities supported by the merchant.

        :param payment_capabilities: The payment_capabilities of this ApplePay.
        :type: list[str]
        """
        

        self._payment_capabilities = payment_capabilities

    @property
    def supported_payment_networks(self) -> List[str]:
        """
        Gets the supported_payment_networks of this ApplePay.
        The payment networks supported by the merchant.

        :return: The supported_payment_networks of this ApplePay.
        :rtype: list[str]
        """
        return self._supported_payment_networks

    @supported_payment_networks.setter
    def supported_payment_networks(self, supported_payment_networks: List[str]) -> None:
        """
        Sets the supported_payment_networks of this ApplePay.
        The payment networks supported by the merchant.

        :param supported_payment_networks: The supported_payment_networks of this ApplePay.
        :type: list[str]
        """
        

        self._supported_payment_networks = supported_payment_networks

    @property
    def payment_certificate_credential_id(self) -> str:
        """
        Gets the payment_certificate_credential_id of this ApplePay.
        The Genesys credentialId the payment certificates are stored under.

        :return: The payment_certificate_credential_id of this ApplePay.
        :rtype: str
        """
        return self._payment_certificate_credential_id

    @payment_certificate_credential_id.setter
    def payment_certificate_credential_id(self, payment_certificate_credential_id: str) -> None:
        """
        Sets the payment_certificate_credential_id of this ApplePay.
        The Genesys credentialId the payment certificates are stored under.

        :param payment_certificate_credential_id: The payment_certificate_credential_id of this ApplePay.
        :type: str
        """
        

        self._payment_certificate_credential_id = payment_certificate_credential_id

    @property
    def payment_gateway_url(self) -> str:
        """
        Gets the payment_gateway_url of this ApplePay.
        The url used to process payments.

        :return: The payment_gateway_url of this ApplePay.
        :rtype: str
        """
        return self._payment_gateway_url

    @payment_gateway_url.setter
    def payment_gateway_url(self, payment_gateway_url: str) -> None:
        """
        Sets the payment_gateway_url of this ApplePay.
        The url used to process payments.

        :param payment_gateway_url: The payment_gateway_url of this ApplePay.
        :type: str
        """
        

        self._payment_gateway_url = payment_gateway_url

    @property
    def fallback_url(self) -> str:
        """
        Gets the fallback_url of this ApplePay.
        The url opened in a web browser if the customers device is unable to make payments using Apple Pay.

        :return: The fallback_url of this ApplePay.
        :rtype: str
        """
        return self._fallback_url

    @fallback_url.setter
    def fallback_url(self, fallback_url: str) -> None:
        """
        Sets the fallback_url of this ApplePay.
        The url opened in a web browser if the customers device is unable to make payments using Apple Pay.

        :param fallback_url: The fallback_url of this ApplePay.
        :type: str
        """
        

        self._fallback_url = fallback_url

    @property
    def shipping_method_update_url(self) -> str:
        """
        Gets the shipping_method_update_url of this ApplePay.
        The url called when the customer changes the shipping method.

        :return: The shipping_method_update_url of this ApplePay.
        :rtype: str
        """
        return self._shipping_method_update_url

    @shipping_method_update_url.setter
    def shipping_method_update_url(self, shipping_method_update_url: str) -> None:
        """
        Sets the shipping_method_update_url of this ApplePay.
        The url called when the customer changes the shipping method.

        :param shipping_method_update_url: The shipping_method_update_url of this ApplePay.
        :type: str
        """
        

        self._shipping_method_update_url = shipping_method_update_url

    @property
    def shipping_contact_update_url(self) -> str:
        """
        Gets the shipping_contact_update_url of this ApplePay.
        The url called when the customer changes their shipping address information.

        :return: The shipping_contact_update_url of this ApplePay.
        :rtype: str
        """
        return self._shipping_contact_update_url

    @shipping_contact_update_url.setter
    def shipping_contact_update_url(self, shipping_contact_update_url: str) -> None:
        """
        Sets the shipping_contact_update_url of this ApplePay.
        The url called when the customer changes their shipping address information.

        :param shipping_contact_update_url: The shipping_contact_update_url of this ApplePay.
        :type: str
        """
        

        self._shipping_contact_update_url = shipping_contact_update_url

    @property
    def payment_method_update_url(self) -> str:
        """
        Gets the payment_method_update_url of this ApplePay.
        The url called when the customer changes their payment method.

        :return: The payment_method_update_url of this ApplePay.
        :rtype: str
        """
        return self._payment_method_update_url

    @payment_method_update_url.setter
    def payment_method_update_url(self, payment_method_update_url: str) -> None:
        """
        Sets the payment_method_update_url of this ApplePay.
        The url called when the customer changes their payment method.

        :param payment_method_update_url: The payment_method_update_url of this ApplePay.
        :type: str
        """
        

        self._payment_method_update_url = payment_method_update_url

    @property
    def order_tracking_url(self) -> str:
        """
        Gets the order_tracking_url of this ApplePay.
        The url called after completing the order to update the order information in your system

        :return: The order_tracking_url of this ApplePay.
        :rtype: str
        """
        return self._order_tracking_url

    @order_tracking_url.setter
    def order_tracking_url(self, order_tracking_url: str) -> None:
        """
        Sets the order_tracking_url of this ApplePay.
        The url called after completing the order to update the order information in your system

        :param order_tracking_url: The order_tracking_url of this ApplePay.
        :type: str
        """
        

        self._order_tracking_url = order_tracking_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

