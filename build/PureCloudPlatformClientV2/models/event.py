# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Event - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'correlation_id': 'str',
            'customer_id': 'str',
            'customer_id_type': 'str',
            'session': 'Session',
            'event_type': 'str',
            'generic_action_event': 'GenericActionEvent',
            'outcome_achieved_event': 'OutcomeAchievedEvent',
            'segment_assigned_event': 'SegmentAssignedEvent',
            'web_action_event': 'WebActionEvent',
            'web_event': 'WebEvent',
            'created_date': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'correlation_id': 'correlationId',
            'customer_id': 'customerId',
            'customer_id_type': 'customerIdType',
            'session': 'session',
            'event_type': 'eventType',
            'generic_action_event': 'genericActionEvent',
            'outcome_achieved_event': 'outcomeAchievedEvent',
            'segment_assigned_event': 'segmentAssignedEvent',
            'web_action_event': 'webActionEvent',
            'web_event': 'webEvent',
            'created_date': 'createdDate'
        }

        self._id = None
        self._correlation_id = None
        self._customer_id = None
        self._customer_id_type = None
        self._session = None
        self._event_type = None
        self._generic_action_event = None
        self._outcome_achieved_event = None
        self._segment_assigned_event = None
        self._web_action_event = None
        self._web_event = None
        self._created_date = None

    @property
    def id(self):
        """
        Gets the id of this Event.
        System-generated UUID for the event.

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Event.
        System-generated UUID for the event.

        :param id: The id of this Event.
        :type: str
        """
        
        self._id = id

    @property
    def correlation_id(self):
        """
        Gets the correlation_id of this Event.
        UUID corresponding to triggering action that caused this event (e.g. HTTP POST, SIP invite, another event).

        :return: The correlation_id of this Event.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """
        Sets the correlation_id of this Event.
        UUID corresponding to triggering action that caused this event (e.g. HTTP POST, SIP invite, another event).

        :param correlation_id: The correlation_id of this Event.
        :type: str
        """
        
        self._correlation_id = correlation_id

    @property
    def customer_id(self):
        """
        Gets the customer_id of this Event.
        Primary identifier of the customer in the source of the events.

        :return: The customer_id of this Event.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this Event.
        Primary identifier of the customer in the source of the events.

        :param customer_id: The customer_id of this Event.
        :type: str
        """
        
        self._customer_id = customer_id

    @property
    def customer_id_type(self):
        """
        Gets the customer_id_type of this Event.
        Type of primary identifier (e.g. cookie, email, phone, salesforce).

        :return: The customer_id_type of this Event.
        :rtype: str
        """
        return self._customer_id_type

    @customer_id_type.setter
    def customer_id_type(self, customer_id_type):
        """
        Sets the customer_id_type of this Event.
        Type of primary identifier (e.g. cookie, email, phone, salesforce).

        :param customer_id_type: The customer_id_type of this Event.
        :type: str
        """
        
        self._customer_id_type = customer_id_type

    @property
    def session(self):
        """
        Gets the session of this Event.
        The session that the event belongs to.

        :return: The session of this Event.
        :rtype: Session
        """
        return self._session

    @session.setter
    def session(self, session):
        """
        Sets the session of this Event.
        The session that the event belongs to.

        :param session: The session of this Event.
        :type: Session
        """
        
        self._session = session

    @property
    def event_type(self):
        """
        Gets the event_type of this Event.
        The name representing the type of event.

        :return: The event_type of this Event.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this Event.
        The name representing the type of event.

        :param event_type: The event_type of this Event.
        :type: str
        """
        
        self._event_type = event_type

    @property
    def generic_action_event(self):
        """
        Gets the generic_action_event of this Event.
        Event triggered by generic actions.

        :return: The generic_action_event of this Event.
        :rtype: GenericActionEvent
        """
        return self._generic_action_event

    @generic_action_event.setter
    def generic_action_event(self, generic_action_event):
        """
        Sets the generic_action_event of this Event.
        Event triggered by generic actions.

        :param generic_action_event: The generic_action_event of this Event.
        :type: GenericActionEvent
        """
        
        self._generic_action_event = generic_action_event

    @property
    def outcome_achieved_event(self):
        """
        Gets the outcome_achieved_event of this Event.
        Event where a customer has achieved a specific outcome or goal.

        :return: The outcome_achieved_event of this Event.
        :rtype: OutcomeAchievedEvent
        """
        return self._outcome_achieved_event

    @outcome_achieved_event.setter
    def outcome_achieved_event(self, outcome_achieved_event):
        """
        Sets the outcome_achieved_event of this Event.
        Event where a customer has achieved a specific outcome or goal.

        :param outcome_achieved_event: The outcome_achieved_event of this Event.
        :type: OutcomeAchievedEvent
        """
        
        self._outcome_achieved_event = outcome_achieved_event

    @property
    def segment_assigned_event(self):
        """
        Gets the segment_assigned_event of this Event.
        Event where a customer has been assigned or tagged with a specific segment.

        :return: The segment_assigned_event of this Event.
        :rtype: SegmentAssignedEvent
        """
        return self._segment_assigned_event

    @segment_assigned_event.setter
    def segment_assigned_event(self, segment_assigned_event):
        """
        Sets the segment_assigned_event of this Event.
        Event where a customer has been assigned or tagged with a specific segment.

        :param segment_assigned_event: The segment_assigned_event of this Event.
        :type: SegmentAssignedEvent
        """
        
        self._segment_assigned_event = segment_assigned_event

    @property
    def web_action_event(self):
        """
        Gets the web_action_event of this Event.
        Event triggered by web actions.

        :return: The web_action_event of this Event.
        :rtype: WebActionEvent
        """
        return self._web_action_event

    @web_action_event.setter
    def web_action_event(self, web_action_event):
        """
        Sets the web_action_event of this Event.
        Event triggered by web actions.

        :param web_action_event: The web_action_event of this Event.
        :type: WebActionEvent
        """
        
        self._web_action_event = web_action_event

    @property
    def web_event(self):
        """
        Gets the web_event of this Event.
        Event that tracks user interactions with content in a browser such as pageviews, downloads, mobile ad clicks, etc.

        :return: The web_event of this Event.
        :rtype: WebEvent
        """
        return self._web_event

    @web_event.setter
    def web_event(self, web_event):
        """
        Sets the web_event of this Event.
        Event that tracks user interactions with content in a browser such as pageviews, downloads, mobile ad clicks, etc.

        :param web_event: The web_event of this Event.
        :type: WebEvent
        """
        
        self._web_event = web_event

    @property
    def created_date(self):
        """
        Gets the created_date of this Event.
        Timestamp indicating when the event actually took place. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The created_date of this Event.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this Event.
        Timestamp indicating when the event actually took place. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param created_date: The created_date of this Event.
        :type: datetime
        """
        
        self._created_date = created_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

