# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import EmailAddress

class AgentlessEmailSendResponseDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        AgentlessEmailSendResponseDto - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'conversation_id': 'str',
            'sender_type': 'str',
            'from_address': 'EmailAddress',
            'to_addresses': 'list[EmailAddress]',
            'reply_to_address': 'EmailAddress',
            'subject': 'str',
            'date_created': 'datetime',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'conversation_id': 'conversationId',
            'sender_type': 'senderType',
            'from_address': 'fromAddress',
            'to_addresses': 'toAddresses',
            'reply_to_address': 'replyToAddress',
            'subject': 'subject',
            'date_created': 'dateCreated',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._conversation_id = None
        self._sender_type = None
        self._from_address = None
        self._to_addresses = None
        self._reply_to_address = None
        self._subject = None
        self._date_created = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this AgentlessEmailSendResponseDto.
        The globally unique identifier for the object.

        :return: The id of this AgentlessEmailSendResponseDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this AgentlessEmailSendResponseDto.
        The globally unique identifier for the object.

        :param id: The id of this AgentlessEmailSendResponseDto.
        :type: str
        """
        

        self._id = id

    @property
    def conversation_id(self) -> str:
        """
        Gets the conversation_id of this AgentlessEmailSendResponseDto.
        The identifier of the conversation.

        :return: The conversation_id of this AgentlessEmailSendResponseDto.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id: str) -> None:
        """
        Sets the conversation_id of this AgentlessEmailSendResponseDto.
        The identifier of the conversation.

        :param conversation_id: The conversation_id of this AgentlessEmailSendResponseDto.
        :type: str
        """
        

        self._conversation_id = conversation_id

    @property
    def sender_type(self) -> str:
        """
        Gets the sender_type of this AgentlessEmailSendResponseDto.
        The identifier of the external participant of the given conversation.

        :return: The sender_type of this AgentlessEmailSendResponseDto.
        :rtype: str
        """
        return self._sender_type

    @sender_type.setter
    def sender_type(self, sender_type: str) -> None:
        """
        Sets the sender_type of this AgentlessEmailSendResponseDto.
        The identifier of the external participant of the given conversation.

        :param sender_type: The sender_type of this AgentlessEmailSendResponseDto.
        :type: str
        """
        if isinstance(sender_type, int):
            sender_type = str(sender_type)
        allowed_values = ["Outbound", "Inbound", "Integration"]
        if sender_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for sender_type -> " + sender_type)
            self._sender_type = "outdated_sdk_version"
        else:
            self._sender_type = sender_type

    @property
    def from_address(self) -> 'EmailAddress':
        """
        Gets the from_address of this AgentlessEmailSendResponseDto.
        The sender of the message.

        :return: The from_address of this AgentlessEmailSendResponseDto.
        :rtype: EmailAddress
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address: 'EmailAddress') -> None:
        """
        Sets the from_address of this AgentlessEmailSendResponseDto.
        The sender of the message.

        :param from_address: The from_address of this AgentlessEmailSendResponseDto.
        :type: EmailAddress
        """
        

        self._from_address = from_address

    @property
    def to_addresses(self) -> List['EmailAddress']:
        """
        Gets the to_addresses of this AgentlessEmailSendResponseDto.
        The recipient of the message. We currently support one recipient only.

        :return: The to_addresses of this AgentlessEmailSendResponseDto.
        :rtype: list[EmailAddress]
        """
        return self._to_addresses

    @to_addresses.setter
    def to_addresses(self, to_addresses: List['EmailAddress']) -> None:
        """
        Sets the to_addresses of this AgentlessEmailSendResponseDto.
        The recipient of the message. We currently support one recipient only.

        :param to_addresses: The to_addresses of this AgentlessEmailSendResponseDto.
        :type: list[EmailAddress]
        """
        

        self._to_addresses = to_addresses

    @property
    def reply_to_address(self) -> 'EmailAddress':
        """
        Gets the reply_to_address of this AgentlessEmailSendResponseDto.
        The address to use for reply.

        :return: The reply_to_address of this AgentlessEmailSendResponseDto.
        :rtype: EmailAddress
        """
        return self._reply_to_address

    @reply_to_address.setter
    def reply_to_address(self, reply_to_address: 'EmailAddress') -> None:
        """
        Sets the reply_to_address of this AgentlessEmailSendResponseDto.
        The address to use for reply.

        :param reply_to_address: The reply_to_address of this AgentlessEmailSendResponseDto.
        :type: EmailAddress
        """
        

        self._reply_to_address = reply_to_address

    @property
    def subject(self) -> str:
        """
        Gets the subject of this AgentlessEmailSendResponseDto.
        The subject of the message.

        :return: The subject of this AgentlessEmailSendResponseDto.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str) -> None:
        """
        Sets the subject of this AgentlessEmailSendResponseDto.
        The subject of the message.

        :param subject: The subject of this AgentlessEmailSendResponseDto.
        :type: str
        """
        

        self._subject = subject

    @property
    def date_created(self) -> datetime:
        """
        Gets the date_created of this AgentlessEmailSendResponseDto.
        The message creation timestamp. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_created of this AgentlessEmailSendResponseDto.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime) -> None:
        """
        Sets the date_created of this AgentlessEmailSendResponseDto.
        The message creation timestamp. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_created: The date_created of this AgentlessEmailSendResponseDto.
        :type: datetime
        """
        

        self._date_created = date_created

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this AgentlessEmailSendResponseDto.
        The URI for this object

        :return: The self_uri of this AgentlessEmailSendResponseDto.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this AgentlessEmailSendResponseDto.
        The URI for this object

        :param self_uri: The self_uri of this AgentlessEmailSendResponseDto.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

