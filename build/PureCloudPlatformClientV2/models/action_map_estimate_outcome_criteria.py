# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class ActionMapEstimateOutcomeCriteria(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ActionMapEstimateOutcomeCriteria - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'outcome_id': 'str',
            'max_probability': 'float',
            'probability': 'float',
            'quantile': 'float',
            'max_quantile': 'float'
        }

        self.attribute_map = {
            'outcome_id': 'outcomeId',
            'max_probability': 'maxProbability',
            'probability': 'probability',
            'quantile': 'quantile',
            'max_quantile': 'maxQuantile'
        }

        self._outcome_id = None
        self._max_probability = None
        self._probability = None
        self._quantile = None
        self._max_quantile = None

    @property
    def outcome_id(self) -> str:
        """
        Gets the outcome_id of this ActionMapEstimateOutcomeCriteria.
        ID of outcome.

        :return: The outcome_id of this ActionMapEstimateOutcomeCriteria.
        :rtype: str
        """
        return self._outcome_id

    @outcome_id.setter
    def outcome_id(self, outcome_id: str) -> None:
        """
        Sets the outcome_id of this ActionMapEstimateOutcomeCriteria.
        ID of outcome.

        :param outcome_id: The outcome_id of this ActionMapEstimateOutcomeCriteria.
        :type: str
        """
        

        self._outcome_id = outcome_id

    @property
    def max_probability(self) -> float:
        """
        Gets the max_probability of this ActionMapEstimateOutcomeCriteria.
        Probability value for the selected outcome at or above which the action map will trigger.

        :return: The max_probability of this ActionMapEstimateOutcomeCriteria.
        :rtype: float
        """
        return self._max_probability

    @max_probability.setter
    def max_probability(self, max_probability: float) -> None:
        """
        Sets the max_probability of this ActionMapEstimateOutcomeCriteria.
        Probability value for the selected outcome at or above which the action map will trigger.

        :param max_probability: The max_probability of this ActionMapEstimateOutcomeCriteria.
        :type: float
        """
        

        self._max_probability = max_probability

    @property
    def probability(self) -> float:
        """
        Gets the probability of this ActionMapEstimateOutcomeCriteria.
        Additional probability condition, where if set, the action map will trigger if the current outcome probability is lower or equal to the value.

        :return: The probability of this ActionMapEstimateOutcomeCriteria.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability: float) -> None:
        """
        Sets the probability of this ActionMapEstimateOutcomeCriteria.
        Additional probability condition, where if set, the action map will trigger if the current outcome probability is lower or equal to the value.

        :param probability: The probability of this ActionMapEstimateOutcomeCriteria.
        :type: float
        """
        

        self._probability = probability

    @property
    def quantile(self) -> float:
        """
        Gets the quantile of this ActionMapEstimateOutcomeCriteria.
        Represents the quantity of sessions that have a maximum probability less than the predicted probability.

        :return: The quantile of this ActionMapEstimateOutcomeCriteria.
        :rtype: float
        """
        return self._quantile

    @quantile.setter
    def quantile(self, quantile: float) -> None:
        """
        Sets the quantile of this ActionMapEstimateOutcomeCriteria.
        Represents the quantity of sessions that have a maximum probability less than the predicted probability.

        :param quantile: The quantile of this ActionMapEstimateOutcomeCriteria.
        :type: float
        """
        

        self._quantile = quantile

    @property
    def max_quantile(self) -> float:
        """
        Gets the max_quantile of this ActionMapEstimateOutcomeCriteria.
        Represents the quantity of sessions that have a maximum probability less than the predicted session max probability.

        :return: The max_quantile of this ActionMapEstimateOutcomeCriteria.
        :rtype: float
        """
        return self._max_quantile

    @max_quantile.setter
    def max_quantile(self, max_quantile: float) -> None:
        """
        Sets the max_quantile of this ActionMapEstimateOutcomeCriteria.
        Represents the quantity of sessions that have a maximum probability less than the predicted session max probability.

        :param max_quantile: The max_quantile of this ActionMapEstimateOutcomeCriteria.
        :type: float
        """
        

        self._max_quantile = max_quantile

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

