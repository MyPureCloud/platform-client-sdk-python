# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'external_user_id': 'str',
            'genesys_user_id': 'str',
            'trigger': 'str',
            'event_type': 'str',
            'event_time': 'datetime',
            'response_status': 'str',
            'meeting_id': 'str'
        }

        self.attribute_map = {
            'external_user_id': 'externalUserId',
            'genesys_user_id': 'genesysUserId',
            'trigger': 'trigger',
            'event_type': 'eventType',
            'event_time': 'eventTime',
            'response_status': 'responseStatus',
            'meeting_id': 'meetingId'
        }

        self._external_user_id = None
        self._genesys_user_id = None
        self._trigger = None
        self._event_type = None
        self._event_time = None
        self._response_status = None
        self._meeting_id = None

    @property
    def external_user_id(self) -> str:
        """
        Gets the external_user_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :return: The external_user_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id: str) -> None:
        """
        Sets the external_user_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :param external_user_id: The external_user_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :type: str
        """
        

        self._external_user_id = external_user_id

    @property
    def genesys_user_id(self) -> str:
        """
        Gets the genesys_user_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :return: The genesys_user_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :rtype: str
        """
        return self._genesys_user_id

    @genesys_user_id.setter
    def genesys_user_id(self, genesys_user_id: str) -> None:
        """
        Sets the genesys_user_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :param genesys_user_id: The genesys_user_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :type: str
        """
        

        self._genesys_user_id = genesys_user_id

    @property
    def trigger(self) -> str:
        """
        Gets the trigger of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :return: The trigger of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger: str) -> None:
        """
        Sets the trigger of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :param trigger: The trigger of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :type: str
        """
        if isinstance(trigger, int):
            trigger = str(trigger)
        allowed_values = ["Unknown", "EventStart", "EventEnd"]
        if trigger.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for trigger -> " + trigger)
            self._trigger = "outdated_sdk_version"
        else:
            self._trigger = trigger

    @property
    def event_type(self) -> str:
        """
        Gets the event_type of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :return: The event_type of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str) -> None:
        """
        Sets the event_type of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :param event_type: The event_type of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :type: str
        """
        if isinstance(event_type, int):
            event_type = str(event_type)
        allowed_values = ["Unknown", "Calendar", "InstantMeeting"]
        if event_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for event_type -> " + event_type)
            self._event_type = "outdated_sdk_version"
        else:
            self._event_type = event_type

    @property
    def event_time(self) -> datetime:
        """
        Gets the event_time of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :return: The event_time of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time: datetime) -> None:
        """
        Sets the event_time of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :param event_time: The event_time of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :type: datetime
        """
        

        self._event_time = event_time

    @property
    def response_status(self) -> str:
        """
        Gets the response_status of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :return: The response_status of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :rtype: str
        """
        return self._response_status

    @response_status.setter
    def response_status(self, response_status: str) -> None:
        """
        Sets the response_status of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :param response_status: The response_status of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :type: str
        """
        if isinstance(response_status, int):
            response_status = str(response_status)
        allowed_values = ["unknown", "none", "organizer", "tentativelyAccepted", "accepted", "declined", "notResponded"]
        if response_status.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for response_status -> " + response_status)
            self._response_status = "outdated_sdk_version"
        else:
            self._response_status = response_status

    @property
    def meeting_id(self) -> str:
        """
        Gets the meeting_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :return: The meeting_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id: str) -> None:
        """
        Sets the meeting_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.


        :param meeting_id: The meeting_id of this GcuccTeamsCalendarEventsGCUCCTeamsCalendarEventV2.
        :type: str
        """
        

        self._meeting_id = meeting_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

