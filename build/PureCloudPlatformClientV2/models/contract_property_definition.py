# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import ContractItems

class ContractPropertyDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ContractPropertyDefinition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'description': 'str',
            'type': 'list[str]',
            'pattern': 'str',
            'format': 'str',
            'items': 'ContractItems',
            'properties': 'dict(str, ContractPropertyDefinition)'
        }

        self.attribute_map = {
            'title': 'title',
            'description': 'description',
            'type': 'type',
            'pattern': 'pattern',
            'format': 'format',
            'items': 'items',
            'properties': 'properties'
        }

        self._title = None
        self._description = None
        self._type = None
        self._pattern = None
        self._format = None
        self._items = None
        self._properties = None

    @property
    def title(self) -> str:
        """
        Gets the title of this ContractPropertyDefinition.


        :return: The title of this ContractPropertyDefinition.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str) -> None:
        """
        Sets the title of this ContractPropertyDefinition.


        :param title: The title of this ContractPropertyDefinition.
        :type: str
        """
        

        self._title = title

    @property
    def description(self) -> str:
        """
        Gets the description of this ContractPropertyDefinition.


        :return: The description of this ContractPropertyDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str) -> None:
        """
        Sets the description of this ContractPropertyDefinition.


        :param description: The description of this ContractPropertyDefinition.
        :type: str
        """
        

        self._description = description

    @property
    def type(self) -> List[str]:
        """
        Gets the type of this ContractPropertyDefinition.


        :return: The type of this ContractPropertyDefinition.
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type: List[str]) -> None:
        """
        Sets the type of this ContractPropertyDefinition.


        :param type: The type of this ContractPropertyDefinition.
        :type: list[str]
        """
        

        self._type = type

    @property
    def pattern(self) -> str:
        """
        Gets the pattern of this ContractPropertyDefinition.


        :return: The pattern of this ContractPropertyDefinition.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern: str) -> None:
        """
        Sets the pattern of this ContractPropertyDefinition.


        :param pattern: The pattern of this ContractPropertyDefinition.
        :type: str
        """
        

        self._pattern = pattern

    @property
    def format(self) -> str:
        """
        Gets the format of this ContractPropertyDefinition.


        :return: The format of this ContractPropertyDefinition.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str) -> None:
        """
        Sets the format of this ContractPropertyDefinition.


        :param format: The format of this ContractPropertyDefinition.
        :type: str
        """
        

        self._format = format

    @property
    def items(self) -> 'ContractItems':
        """
        Gets the items of this ContractPropertyDefinition.


        :return: The items of this ContractPropertyDefinition.
        :rtype: ContractItems
        """
        return self._items

    @items.setter
    def items(self, items: 'ContractItems') -> None:
        """
        Sets the items of this ContractPropertyDefinition.


        :param items: The items of this ContractPropertyDefinition.
        :type: ContractItems
        """
        

        self._items = items

    @property
    def properties(self) -> Dict[str, 'ContractPropertyDefinition']:
        """
        Gets the properties of this ContractPropertyDefinition.


        :return: The properties of this ContractPropertyDefinition.
        :rtype: dict(str, ContractPropertyDefinition)
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, 'ContractPropertyDefinition']) -> None:
        """
        Sets the properties of this ContractPropertyDefinition.


        :param properties: The properties of this ContractPropertyDefinition.
        :type: dict(str, ContractPropertyDefinition)
        """
        

        self._properties = properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

