# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class DialerContactlistConfigChangeImportStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        DialerContactlistConfigChangeImportStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'import_state': 'str',
            'total_records': 'int',
            'completed_records': 'int',
            'percentage_complete': 'int',
            'failure_reason': 'str',
            'target_contact_list_ids': 'list[str]',
            'list_name_prefix': 'str',
            'additional_properties': 'dict(str, object)'
        }

        self.attribute_map = {
            'import_state': 'importState',
            'total_records': 'totalRecords',
            'completed_records': 'completedRecords',
            'percentage_complete': 'percentageComplete',
            'failure_reason': 'failureReason',
            'target_contact_list_ids': 'targetContactListIds',
            'list_name_prefix': 'listNamePrefix',
            'additional_properties': 'additionalProperties'
        }

        self._import_state = None
        self._total_records = None
        self._completed_records = None
        self._percentage_complete = None
        self._failure_reason = None
        self._target_contact_list_ids = None
        self._list_name_prefix = None
        self._additional_properties = None

    @property
    def import_state(self) -> str:
        """
        Gets the import_state of this DialerContactlistConfigChangeImportStatus.
        current status of the import

        :return: The import_state of this DialerContactlistConfigChangeImportStatus.
        :rtype: str
        """
        return self._import_state

    @import_state.setter
    def import_state(self, import_state: str) -> None:
        """
        Sets the import_state of this DialerContactlistConfigChangeImportStatus.
        current status of the import

        :param import_state: The import_state of this DialerContactlistConfigChangeImportStatus.
        :type: str
        """
        if isinstance(import_state, int):
            import_state = str(import_state)
        allowed_values = ["IN_PROGRESS", "FAILED"]
        if import_state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for import_state -> " + import_state)
            self._import_state = "outdated_sdk_version"
        else:
            self._import_state = import_state

    @property
    def total_records(self) -> int:
        """
        Gets the total_records of this DialerContactlistConfigChangeImportStatus.
        total number of records to be imported

        :return: The total_records of this DialerContactlistConfigChangeImportStatus.
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records: int) -> None:
        """
        Sets the total_records of this DialerContactlistConfigChangeImportStatus.
        total number of records to be imported

        :param total_records: The total_records of this DialerContactlistConfigChangeImportStatus.
        :type: int
        """
        

        self._total_records = total_records

    @property
    def completed_records(self) -> int:
        """
        Gets the completed_records of this DialerContactlistConfigChangeImportStatus.
        number of records finished importing

        :return: The completed_records of this DialerContactlistConfigChangeImportStatus.
        :rtype: int
        """
        return self._completed_records

    @completed_records.setter
    def completed_records(self, completed_records: int) -> None:
        """
        Sets the completed_records of this DialerContactlistConfigChangeImportStatus.
        number of records finished importing

        :param completed_records: The completed_records of this DialerContactlistConfigChangeImportStatus.
        :type: int
        """
        

        self._completed_records = completed_records

    @property
    def percentage_complete(self) -> int:
        """
        Gets the percentage_complete of this DialerContactlistConfigChangeImportStatus.
        percentage of records finished importing

        :return: The percentage_complete of this DialerContactlistConfigChangeImportStatus.
        :rtype: int
        """
        return self._percentage_complete

    @percentage_complete.setter
    def percentage_complete(self, percentage_complete: int) -> None:
        """
        Sets the percentage_complete of this DialerContactlistConfigChangeImportStatus.
        percentage of records finished importing

        :param percentage_complete: The percentage_complete of this DialerContactlistConfigChangeImportStatus.
        :type: int
        """
        

        self._percentage_complete = percentage_complete

    @property
    def failure_reason(self) -> str:
        """
        Gets the failure_reason of this DialerContactlistConfigChangeImportStatus.
        if the import has failed, the reason for the failure

        :return: The failure_reason of this DialerContactlistConfigChangeImportStatus.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason: str) -> None:
        """
        Sets the failure_reason of this DialerContactlistConfigChangeImportStatus.
        if the import has failed, the reason for the failure

        :param failure_reason: The failure_reason of this DialerContactlistConfigChangeImportStatus.
        :type: str
        """
        

        self._failure_reason = failure_reason

    @property
    def target_contact_list_ids(self) -> List[str]:
        """
        Gets the target_contact_list_ids of this DialerContactlistConfigChangeImportStatus.
        The ids for target contact lists

        :return: The target_contact_list_ids of this DialerContactlistConfigChangeImportStatus.
        :rtype: list[str]
        """
        return self._target_contact_list_ids

    @target_contact_list_ids.setter
    def target_contact_list_ids(self, target_contact_list_ids: List[str]) -> None:
        """
        Sets the target_contact_list_ids of this DialerContactlistConfigChangeImportStatus.
        The ids for target contact lists

        :param target_contact_list_ids: The target_contact_list_ids of this DialerContactlistConfigChangeImportStatus.
        :type: list[str]
        """
        

        self._target_contact_list_ids = target_contact_list_ids

    @property
    def list_name_prefix(self) -> str:
        """
        Gets the list_name_prefix of this DialerContactlistConfigChangeImportStatus.
        The prefix used for target contact list names

        :return: The list_name_prefix of this DialerContactlistConfigChangeImportStatus.
        :rtype: str
        """
        return self._list_name_prefix

    @list_name_prefix.setter
    def list_name_prefix(self, list_name_prefix: str) -> None:
        """
        Sets the list_name_prefix of this DialerContactlistConfigChangeImportStatus.
        The prefix used for target contact list names

        :param list_name_prefix: The list_name_prefix of this DialerContactlistConfigChangeImportStatus.
        :type: str
        """
        

        self._list_name_prefix = list_name_prefix

    @property
    def additional_properties(self) -> Dict[str, object]:
        """
        Gets the additional_properties of this DialerContactlistConfigChangeImportStatus.


        :return: The additional_properties of this DialerContactlistConfigChangeImportStatus.
        :rtype: dict(str, object)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties: Dict[str, object]) -> None:
        """
        Sets the additional_properties of this DialerContactlistConfigChangeImportStatus.


        :param additional_properties: The additional_properties of this DialerContactlistConfigChangeImportStatus.
        :type: dict(str, object)
        """
        

        self._additional_properties = additional_properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

