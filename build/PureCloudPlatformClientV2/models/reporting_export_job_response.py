# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ReportingExportJobResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ReportingExportJobResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'status': 'str',
            'time_zone': 'TimeZone',
            'export_format': 'str',
            'interval': 'str',
            'download_url': 'str',
            'view_type': 'str',
            'export_error_messages_type': 'str',
            'period': 'str',
            'filter': 'ViewFilter',
            'read': 'bool',
            'created_date_time': 'datetime',
            'modified_date_time': 'datetime',
            'locale': 'str',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'time_zone': 'timeZone',
            'export_format': 'exportFormat',
            'interval': 'interval',
            'download_url': 'downloadUrl',
            'view_type': 'viewType',
            'export_error_messages_type': 'exportErrorMessagesType',
            'period': 'period',
            'filter': 'filter',
            'read': 'read',
            'created_date_time': 'createdDateTime',
            'modified_date_time': 'modifiedDateTime',
            'locale': 'locale',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._status = None
        self._time_zone = None
        self._export_format = None
        self._interval = None
        self._download_url = None
        self._view_type = None
        self._export_error_messages_type = None
        self._period = None
        self._filter = None
        self._read = None
        self._created_date_time = None
        self._modified_date_time = None
        self._locale = None
        self._self_uri = None

    @property
    def id(self):
        """
        Gets the id of this ReportingExportJobResponse.
        The globally unique identifier for the object.

        :return: The id of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ReportingExportJobResponse.
        The globally unique identifier for the object.

        :param id: The id of this ReportingExportJobResponse.
        :type: str
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ReportingExportJobResponse.


        :return: The name of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ReportingExportJobResponse.


        :param name: The name of this ReportingExportJobResponse.
        :type: str
        """
        
        self._name = name

    @property
    def status(self):
        """
        Gets the status of this ReportingExportJobResponse.
        The current status of the export request

        :return: The status of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ReportingExportJobResponse.
        The current status of the export request

        :param status: The status of this ReportingExportJobResponse.
        :type: str
        """
        allowed_values = ["SUBMITTED", "RUNNING", "COMPLETED", "FAILED"]
        if status.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for status -> " + status
            self._status = "outdated_sdk_version"
        else:
            self._status = status

    @property
    def time_zone(self):
        """
        Gets the time_zone of this ReportingExportJobResponse.
        The requested timezone of the exported data

        :return: The time_zone of this ReportingExportJobResponse.
        :rtype: TimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this ReportingExportJobResponse.
        The requested timezone of the exported data

        :param time_zone: The time_zone of this ReportingExportJobResponse.
        :type: TimeZone
        """
        
        self._time_zone = time_zone

    @property
    def export_format(self):
        """
        Gets the export_format of this ReportingExportJobResponse.
        The requested format of the exported data

        :return: The export_format of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._export_format

    @export_format.setter
    def export_format(self, export_format):
        """
        Sets the export_format of this ReportingExportJobResponse.
        The requested format of the exported data

        :param export_format: The export_format of this ReportingExportJobResponse.
        :type: str
        """
        allowed_values = ["CSV"]
        if export_format.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for export_format -> " + export_format
            self._export_format = "outdated_sdk_version"
        else:
            self._export_format = export_format

    @property
    def interval(self):
        """
        Gets the interval of this ReportingExportJobResponse.
        The time period used to limit the the exported data. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss

        :return: The interval of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this ReportingExportJobResponse.
        The time period used to limit the the exported data. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss

        :param interval: The interval of this ReportingExportJobResponse.
        :type: str
        """
        
        self._interval = interval

    @property
    def download_url(self):
        """
        Gets the download_url of this ReportingExportJobResponse.
        The url to download the request if it's status is completed

        :return: The download_url of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """
        Sets the download_url of this ReportingExportJobResponse.
        The url to download the request if it's status is completed

        :param download_url: The download_url of this ReportingExportJobResponse.
        :type: str
        """
        
        self._download_url = download_url

    @property
    def view_type(self):
        """
        Gets the view_type of this ReportingExportJobResponse.
        The type of view export job to be created

        :return: The view_type of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._view_type

    @view_type.setter
    def view_type(self, view_type):
        """
        Sets the view_type of this ReportingExportJobResponse.
        The type of view export job to be created

        :param view_type: The view_type of this ReportingExportJobResponse.
        :type: str
        """
        allowed_values = ["QUEUE_PERFORMANCE_SUMMARY_VIEW", "QUEUE_PERFORMANCE_DETAIL_VIEW", "INTERACTION_SEARCH_VIEW", "AGENT_PERFORMANCE_SUMMARY_VIEW", "AGENT_PERFORMANCE_DETAIL_VIEW", "AGENT_STATUS_SUMMARY_VIEW", "AGENT_STATUS_DETAIL_VIEW", "AGENT_EVALUATION_SUMMARY_VIEW", "AGENT_EVALUATION_DETAIL_VIEW", "AGENT_QUEUE_DETAIL_VIEW", "AGENT_INTERACTION_DETAIL_VIEW", "ABANDON_INSIGHTS_VIEW", "SKILLS_PERFORMANCE_VIEW"]
        if view_type.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for view_type -> " + view_type
            self._view_type = "outdated_sdk_version"
        else:
            self._view_type = view_type

    @property
    def export_error_messages_type(self):
        """
        Gets the export_error_messages_type of this ReportingExportJobResponse.
        The error message in case the export request failed

        :return: The export_error_messages_type of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._export_error_messages_type

    @export_error_messages_type.setter
    def export_error_messages_type(self, export_error_messages_type):
        """
        Sets the export_error_messages_type of this ReportingExportJobResponse.
        The error message in case the export request failed

        :param export_error_messages_type: The export_error_messages_type of this ReportingExportJobResponse.
        :type: str
        """
        allowed_values = ["FAILED_CONVERTING_EXPORT_JOB", "FAILED_NO_DATA_EXPORT_JOB_FOUND", "FAILED_GETTING_DATA_FROM_SERVICE", "FAILED_GENERATING_TEMP_FILE", "FAILED_SAVING_FILE_TO_S3", "FAILED_NOTIFYING_SKYWALKER_OF_DOWNLOAD", "FAILED_BUILDING_DOWNLOAD_URL_FROM_SKYWALKER_RESPONSE", "FAILED_CONVERTING_EXPORT_JOB_TO_QUEUE_PERFORMANCE_JOB", "EXPORT_TYPE_NOT_IMPLEMENTED"]
        if export_error_messages_type.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for export_error_messages_type -> " + export_error_messages_type
            self._export_error_messages_type = "outdated_sdk_version"
        else:
            self._export_error_messages_type = export_error_messages_type

    @property
    def period(self):
        """
        Gets the period of this ReportingExportJobResponse.
        The Period of the request in which to break down the intervals. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H

        :return: The period of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this ReportingExportJobResponse.
        The Period of the request in which to break down the intervals. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H

        :param period: The period of this ReportingExportJobResponse.
        :type: str
        """
        
        self._period = period

    @property
    def filter(self):
        """
        Gets the filter of this ReportingExportJobResponse.
        Filters to apply to create the view

        :return: The filter of this ReportingExportJobResponse.
        :rtype: ViewFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this ReportingExportJobResponse.
        Filters to apply to create the view

        :param filter: The filter of this ReportingExportJobResponse.
        :type: ViewFilter
        """
        
        self._filter = filter

    @property
    def read(self):
        """
        Gets the read of this ReportingExportJobResponse.
        Indicates if the request has been marked as read

        :return: The read of this ReportingExportJobResponse.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """
        Sets the read of this ReportingExportJobResponse.
        Indicates if the request has been marked as read

        :param read: The read of this ReportingExportJobResponse.
        :type: bool
        """
        
        self._read = read

    @property
    def created_date_time(self):
        """
        Gets the created_date_time of this ReportingExportJobResponse.
        The created date/time of the request. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The created_date_time of this ReportingExportJobResponse.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """
        Sets the created_date_time of this ReportingExportJobResponse.
        The created date/time of the request. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param created_date_time: The created_date_time of this ReportingExportJobResponse.
        :type: datetime
        """
        
        self._created_date_time = created_date_time

    @property
    def modified_date_time(self):
        """
        Gets the modified_date_time of this ReportingExportJobResponse.
        The last modified date/time of the request. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The modified_date_time of this ReportingExportJobResponse.
        :rtype: datetime
        """
        return self._modified_date_time

    @modified_date_time.setter
    def modified_date_time(self, modified_date_time):
        """
        Sets the modified_date_time of this ReportingExportJobResponse.
        The last modified date/time of the request. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param modified_date_time: The modified_date_time of this ReportingExportJobResponse.
        :type: datetime
        """
        
        self._modified_date_time = modified_date_time

    @property
    def locale(self):
        """
        Gets the locale of this ReportingExportJobResponse.
        The locale use for localization of the exported data, i.e. en-us, es-mx  

        :return: The locale of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale of this ReportingExportJobResponse.
        The locale use for localization of the exported data, i.e. en-us, es-mx  

        :param locale: The locale of this ReportingExportJobResponse.
        :type: str
        """
        
        self._locale = locale

    @property
    def self_uri(self):
        """
        Gets the self_uri of this ReportingExportJobResponse.
        The URI for this object

        :return: The self_uri of this ReportingExportJobResponse.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri):
        """
        Sets the self_uri of this ReportingExportJobResponse.
        The URI for this object

        :param self_uri: The self_uri of this ReportingExportJobResponse.
        :type: str
        """
        
        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

