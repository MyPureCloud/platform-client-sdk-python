# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class IgnoredMinedEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        IgnoredMinedEntity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'text': 'str',
            'participant': 'str',
            'date_created': 'datetime',
            'date_modified': 'datetime',
            'media_type': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'participant': 'participant',
            'date_created': 'dateCreated',
            'date_modified': 'dateModified',
            'media_type': 'mediaType'
        }

        self._id = None
        self._text = None
        self._participant = None
        self._date_created = None
        self._date_modified = None
        self._media_type = None

    @property
    def id(self) -> str:
        """
        Gets the id of this IgnoredMinedEntity.
        Unique identifier for the ignored entity

        :return: The id of this IgnoredMinedEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this IgnoredMinedEntity.
        Unique identifier for the ignored entity

        :param id: The id of this IgnoredMinedEntity.
        :type: str
        """
        

        self._id = id

    @property
    def text(self) -> str:
        """
        Gets the text of this IgnoredMinedEntity.
        Text of the ignored entity

        :return: The text of this IgnoredMinedEntity.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str) -> None:
        """
        Sets the text of this IgnoredMinedEntity.
        Text of the ignored entity

        :param text: The text of this IgnoredMinedEntity.
        :type: str
        """
        

        self._text = text

    @property
    def participant(self) -> str:
        """
        Gets the participant of this IgnoredMinedEntity.
        Type of participant

        :return: The participant of this IgnoredMinedEntity.
        :rtype: str
        """
        return self._participant

    @participant.setter
    def participant(self, participant: str) -> None:
        """
        Sets the participant of this IgnoredMinedEntity.
        Type of participant

        :param participant: The participant of this IgnoredMinedEntity.
        :type: str
        """
        if isinstance(participant, int):
            participant = str(participant)
        allowed_values = ["Customer", "Agent", "Both"]
        if participant.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for participant -> " + participant)
            self._participant = "outdated_sdk_version"
        else:
            self._participant = participant

    @property
    def date_created(self) -> datetime:
        """
        Gets the date_created of this IgnoredMinedEntity.
        Date when the ignored entity was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_created of this IgnoredMinedEntity.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime) -> None:
        """
        Sets the date_created of this IgnoredMinedEntity.
        Date when the ignored entity was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_created: The date_created of this IgnoredMinedEntity.
        :type: datetime
        """
        

        self._date_created = date_created

    @property
    def date_modified(self) -> datetime:
        """
        Gets the date_modified of this IgnoredMinedEntity.
        Date when the ignored entity was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_modified of this IgnoredMinedEntity.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified: datetime) -> None:
        """
        Sets the date_modified of this IgnoredMinedEntity.
        Date when the ignored entity was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_modified: The date_modified of this IgnoredMinedEntity.
        :type: datetime
        """
        

        self._date_modified = date_modified

    @property
    def media_type(self) -> str:
        """
        Gets the media_type of this IgnoredMinedEntity.
        Media Type for the entity (Optional)

        :return: The media_type of this IgnoredMinedEntity.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str) -> None:
        """
        Sets the media_type of this IgnoredMinedEntity.
        Media Type for the entity (Optional)

        :param media_type: The media_type of this IgnoredMinedEntity.
        :type: str
        """
        if isinstance(media_type, int):
            media_type = str(media_type)
        allowed_values = ["Chat", "Call", "Message", "Email"]
        if media_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for media_type -> " + media_type)
            self._media_type = "outdated_sdk_version"
        else:
            self._media_type = media_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

