# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import ArchitectFlowNotificationArchitectOperation
    from . import ArchitectFlowNotificationFlowVersion

class ArchitectFlowNotificationFlowNotification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ArchitectFlowNotificationFlowNotification - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'deleted': 'bool',
            'checked_in_version': 'ArchitectFlowNotificationFlowVersion',
            'saved_version': 'ArchitectFlowNotificationFlowVersion',
            'published_version': 'ArchitectFlowNotificationFlowVersion',
            'current_operation': 'ArchitectFlowNotificationArchitectOperation'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'deleted': 'deleted',
            'checked_in_version': 'checkedInVersion',
            'saved_version': 'savedVersion',
            'published_version': 'publishedVersion',
            'current_operation': 'currentOperation'
        }

        self._id = None
        self._name = None
        self._description = None
        self._deleted = None
        self._checked_in_version = None
        self._saved_version = None
        self._published_version = None
        self._current_operation = None

    @property
    def id(self) -> str:
        """
        Gets the id of this ArchitectFlowNotificationFlowNotification.
        The flow ID

        :return: The id of this ArchitectFlowNotificationFlowNotification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this ArchitectFlowNotificationFlowNotification.
        The flow ID

        :param id: The id of this ArchitectFlowNotificationFlowNotification.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this ArchitectFlowNotificationFlowNotification.
        The flow name

        :return: The name of this ArchitectFlowNotificationFlowNotification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this ArchitectFlowNotificationFlowNotification.
        The flow name

        :param name: The name of this ArchitectFlowNotificationFlowNotification.
        :type: str
        """
        

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this ArchitectFlowNotificationFlowNotification.
        The flow description

        :return: The description of this ArchitectFlowNotificationFlowNotification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str) -> None:
        """
        Sets the description of this ArchitectFlowNotificationFlowNotification.
        The flow description

        :param description: The description of this ArchitectFlowNotificationFlowNotification.
        :type: str
        """
        

        self._description = description

    @property
    def deleted(self) -> bool:
        """
        Gets the deleted of this ArchitectFlowNotificationFlowNotification.
        The flow deleted state

        :return: The deleted of this ArchitectFlowNotificationFlowNotification.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted: bool) -> None:
        """
        Sets the deleted of this ArchitectFlowNotificationFlowNotification.
        The flow deleted state

        :param deleted: The deleted of this ArchitectFlowNotificationFlowNotification.
        :type: bool
        """
        

        self._deleted = deleted

    @property
    def checked_in_version(self) -> 'ArchitectFlowNotificationFlowVersion':
        """
        Gets the checked_in_version of this ArchitectFlowNotificationFlowNotification.


        :return: The checked_in_version of this ArchitectFlowNotificationFlowNotification.
        :rtype: ArchitectFlowNotificationFlowVersion
        """
        return self._checked_in_version

    @checked_in_version.setter
    def checked_in_version(self, checked_in_version: 'ArchitectFlowNotificationFlowVersion') -> None:
        """
        Sets the checked_in_version of this ArchitectFlowNotificationFlowNotification.


        :param checked_in_version: The checked_in_version of this ArchitectFlowNotificationFlowNotification.
        :type: ArchitectFlowNotificationFlowVersion
        """
        

        self._checked_in_version = checked_in_version

    @property
    def saved_version(self) -> 'ArchitectFlowNotificationFlowVersion':
        """
        Gets the saved_version of this ArchitectFlowNotificationFlowNotification.
        A bare-bones flow version object

        :return: The saved_version of this ArchitectFlowNotificationFlowNotification.
        :rtype: ArchitectFlowNotificationFlowVersion
        """
        return self._saved_version

    @saved_version.setter
    def saved_version(self, saved_version: 'ArchitectFlowNotificationFlowVersion') -> None:
        """
        Sets the saved_version of this ArchitectFlowNotificationFlowNotification.
        A bare-bones flow version object

        :param saved_version: The saved_version of this ArchitectFlowNotificationFlowNotification.
        :type: ArchitectFlowNotificationFlowVersion
        """
        

        self._saved_version = saved_version

    @property
    def published_version(self) -> 'ArchitectFlowNotificationFlowVersion':
        """
        Gets the published_version of this ArchitectFlowNotificationFlowNotification.
        A bare-bones flow version object

        :return: The published_version of this ArchitectFlowNotificationFlowNotification.
        :rtype: ArchitectFlowNotificationFlowVersion
        """
        return self._published_version

    @published_version.setter
    def published_version(self, published_version: 'ArchitectFlowNotificationFlowVersion') -> None:
        """
        Sets the published_version of this ArchitectFlowNotificationFlowNotification.
        A bare-bones flow version object

        :param published_version: The published_version of this ArchitectFlowNotificationFlowNotification.
        :type: ArchitectFlowNotificationFlowVersion
        """
        

        self._published_version = published_version

    @property
    def current_operation(self) -> 'ArchitectFlowNotificationArchitectOperation':
        """
        Gets the current_operation of this ArchitectFlowNotificationFlowNotification.


        :return: The current_operation of this ArchitectFlowNotificationFlowNotification.
        :rtype: ArchitectFlowNotificationArchitectOperation
        """
        return self._current_operation

    @current_operation.setter
    def current_operation(self, current_operation: 'ArchitectFlowNotificationArchitectOperation') -> None:
        """
        Sets the current_operation of this ArchitectFlowNotificationFlowNotification.


        :param current_operation: The current_operation of this ArchitectFlowNotificationFlowNotification.
        :type: ArchitectFlowNotificationArchitectOperation
        """
        

        self._current_operation = current_operation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

