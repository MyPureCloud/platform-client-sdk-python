# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

class LocationUpdateDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LocationUpdateDefinition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'version': 'int',
            'state': 'str',
            'path': 'list[str]',
            'notes': 'str',
            'contact_user': 'str',
            'emergency_number': 'LocationEmergencyNumber',
            'address': 'LocationAddress'
        }

        self.attribute_map = {
            'name': 'name',
            'version': 'version',
            'state': 'state',
            'path': 'path',
            'notes': 'notes',
            'contact_user': 'contactUser',
            'emergency_number': 'emergencyNumber',
            'address': 'address'
        }

        self._name = None
        self._version = None
        self._state = None
        self._path = None
        self._notes = None
        self._contact_user = None
        self._emergency_number = None
        self._address = None

    @property
    def name(self):
        """
        Gets the name of this LocationUpdateDefinition.
        The name of the Location. Required for creates, not required for updates

        :return: The name of this LocationUpdateDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LocationUpdateDefinition.
        The name of the Location. Required for creates, not required for updates

        :param name: The name of this LocationUpdateDefinition.
        :type: str
        """
        
        self._name = name

    @property
    def version(self):
        """
        Gets the version of this LocationUpdateDefinition.
        Current version of the location

        :return: The version of this LocationUpdateDefinition.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this LocationUpdateDefinition.
        Current version of the location

        :param version: The version of this LocationUpdateDefinition.
        :type: int
        """
        
        self._version = version

    @property
    def state(self):
        """
        Gets the state of this LocationUpdateDefinition.
        Current activity status of the location.

        :return: The state of this LocationUpdateDefinition.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this LocationUpdateDefinition.
        Current activity status of the location.

        :param state: The state of this LocationUpdateDefinition.
        :type: str
        """
        allowed_values = ["active", "deleted"]
        if state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for state -> " + state)
            self._state = "outdated_sdk_version"
        else:
            self._state = state

    @property
    def path(self):
        """
        Gets the path of this LocationUpdateDefinition.
        A list of ancestor ids

        :return: The path of this LocationUpdateDefinition.
        :rtype: list[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this LocationUpdateDefinition.
        A list of ancestor ids

        :param path: The path of this LocationUpdateDefinition.
        :type: list[str]
        """
        
        self._path = path

    @property
    def notes(self):
        """
        Gets the notes of this LocationUpdateDefinition.
        Notes for the location

        :return: The notes of this LocationUpdateDefinition.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this LocationUpdateDefinition.
        Notes for the location

        :param notes: The notes of this LocationUpdateDefinition.
        :type: str
        """
        
        self._notes = notes

    @property
    def contact_user(self):
        """
        Gets the contact_user of this LocationUpdateDefinition.
        The user id of the location contact

        :return: The contact_user of this LocationUpdateDefinition.
        :rtype: str
        """
        return self._contact_user

    @contact_user.setter
    def contact_user(self, contact_user):
        """
        Sets the contact_user of this LocationUpdateDefinition.
        The user id of the location contact

        :param contact_user: The contact_user of this LocationUpdateDefinition.
        :type: str
        """
        
        self._contact_user = contact_user

    @property
    def emergency_number(self):
        """
        Gets the emergency_number of this LocationUpdateDefinition.
        Emergency number for the location

        :return: The emergency_number of this LocationUpdateDefinition.
        :rtype: LocationEmergencyNumber
        """
        return self._emergency_number

    @emergency_number.setter
    def emergency_number(self, emergency_number):
        """
        Sets the emergency_number of this LocationUpdateDefinition.
        Emergency number for the location

        :param emergency_number: The emergency_number of this LocationUpdateDefinition.
        :type: LocationEmergencyNumber
        """
        
        self._emergency_number = emergency_number

    @property
    def address(self):
        """
        Gets the address of this LocationUpdateDefinition.
        Address of the location

        :return: The address of this LocationUpdateDefinition.
        :rtype: LocationAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this LocationUpdateDefinition.
        Address of the location

        :param address: The address of this LocationUpdateDefinition.
        :type: LocationAddress
        """
        
        self._address = address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

