# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class UserRoutingStatusNotificationErrorInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UserRoutingStatusNotificationErrorInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error_code': 'str',
            'status': 'int',
            'correlation_id': 'str',
            'user_message': 'str',
            'user_params_message': 'str',
            'user_params': 'list[UserRoutingStatusNotificationErrorInfoUserParams]'
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'status': 'status',
            'correlation_id': 'correlationId',
            'user_message': 'userMessage',
            'user_params_message': 'userParamsMessage',
            'user_params': 'userParams'
        }

        self._error_code = None
        self._status = None
        self._correlation_id = None
        self._user_message = None
        self._user_params_message = None
        self._user_params = None

    @property
    def error_code(self):
        """
        Gets the error_code of this UserRoutingStatusNotificationErrorInfo.


        :return: The error_code of this UserRoutingStatusNotificationErrorInfo.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """
        Sets the error_code of this UserRoutingStatusNotificationErrorInfo.


        :param error_code: The error_code of this UserRoutingStatusNotificationErrorInfo.
        :type: str
        """
        
        self._error_code = error_code

    @property
    def status(self):
        """
        Gets the status of this UserRoutingStatusNotificationErrorInfo.


        :return: The status of this UserRoutingStatusNotificationErrorInfo.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this UserRoutingStatusNotificationErrorInfo.


        :param status: The status of this UserRoutingStatusNotificationErrorInfo.
        :type: int
        """
        
        self._status = status

    @property
    def correlation_id(self):
        """
        Gets the correlation_id of this UserRoutingStatusNotificationErrorInfo.


        :return: The correlation_id of this UserRoutingStatusNotificationErrorInfo.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """
        Sets the correlation_id of this UserRoutingStatusNotificationErrorInfo.


        :param correlation_id: The correlation_id of this UserRoutingStatusNotificationErrorInfo.
        :type: str
        """
        
        self._correlation_id = correlation_id

    @property
    def user_message(self):
        """
        Gets the user_message of this UserRoutingStatusNotificationErrorInfo.


        :return: The user_message of this UserRoutingStatusNotificationErrorInfo.
        :rtype: str
        """
        return self._user_message

    @user_message.setter
    def user_message(self, user_message):
        """
        Sets the user_message of this UserRoutingStatusNotificationErrorInfo.


        :param user_message: The user_message of this UserRoutingStatusNotificationErrorInfo.
        :type: str
        """
        
        self._user_message = user_message

    @property
    def user_params_message(self):
        """
        Gets the user_params_message of this UserRoutingStatusNotificationErrorInfo.


        :return: The user_params_message of this UserRoutingStatusNotificationErrorInfo.
        :rtype: str
        """
        return self._user_params_message

    @user_params_message.setter
    def user_params_message(self, user_params_message):
        """
        Sets the user_params_message of this UserRoutingStatusNotificationErrorInfo.


        :param user_params_message: The user_params_message of this UserRoutingStatusNotificationErrorInfo.
        :type: str
        """
        
        self._user_params_message = user_params_message

    @property
    def user_params(self):
        """
        Gets the user_params of this UserRoutingStatusNotificationErrorInfo.


        :return: The user_params of this UserRoutingStatusNotificationErrorInfo.
        :rtype: list[UserRoutingStatusNotificationErrorInfoUserParams]
        """
        return self._user_params

    @user_params.setter
    def user_params(self, user_params):
        """
        Sets the user_params of this UserRoutingStatusNotificationErrorInfo.


        :param user_params: The user_params of this UserRoutingStatusNotificationErrorInfo.
        :type: list[UserRoutingStatusNotificationErrorInfoUserParams]
        """
        
        self._user_params = user_params

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

