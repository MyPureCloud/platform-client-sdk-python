# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class TrustRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TrustRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'created_by': 'OrgUser',
            'date_created': 'datetime',
            'trustee': 'Organization',
            'users': 'list[OrgUser]',
            'groups': 'list[TrustGroup]',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'created_by': 'createdBy',
            'date_created': 'dateCreated',
            'trustee': 'trustee',
            'users': 'users',
            'groups': 'groups',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._created_by = None
        self._date_created = None
        self._trustee = None
        self._users = None
        self._groups = None
        self._self_uri = None

    @property
    def id(self):
        """
        Gets the id of this TrustRequest.
        The globally unique identifier for the object.

        :return: The id of this TrustRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TrustRequest.
        The globally unique identifier for the object.

        :param id: The id of this TrustRequest.
        :type: str
        """
        
        self._id = id

    @property
    def created_by(self):
        """
        Gets the created_by of this TrustRequest.
        User who created this request.

        :return: The created_by of this TrustRequest.
        :rtype: OrgUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this TrustRequest.
        User who created this request.

        :param created_by: The created_by of this TrustRequest.
        :type: OrgUser
        """
        
        self._created_by = created_by

    @property
    def date_created(self):
        """
        Gets the date_created of this TrustRequest.
        Date request was created. There is a 48 hour expiration on all requests. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The date_created of this TrustRequest.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this TrustRequest.
        Date request was created. There is a 48 hour expiration on all requests. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param date_created: The date_created of this TrustRequest.
        :type: datetime
        """
        
        self._date_created = date_created

    @property
    def trustee(self):
        """
        Gets the trustee of this TrustRequest.
        Trustee organization who generated this request.

        :return: The trustee of this TrustRequest.
        :rtype: Organization
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """
        Sets the trustee of this TrustRequest.
        Trustee organization who generated this request.

        :param trustee: The trustee of this TrustRequest.
        :type: Organization
        """
        
        self._trustee = trustee

    @property
    def users(self):
        """
        Gets the users of this TrustRequest.
        The list of trustee users that are requesting access.

        :return: The users of this TrustRequest.
        :rtype: list[OrgUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this TrustRequest.
        The list of trustee users that are requesting access.

        :param users: The users of this TrustRequest.
        :type: list[OrgUser]
        """
        
        self._users = users

    @property
    def groups(self):
        """
        Gets the groups of this TrustRequest.
        The list of trustee groups that are requesting access.

        :return: The groups of this TrustRequest.
        :rtype: list[TrustGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this TrustRequest.
        The list of trustee groups that are requesting access.

        :param groups: The groups of this TrustRequest.
        :type: list[TrustGroup]
        """
        
        self._groups = groups

    @property
    def self_uri(self):
        """
        Gets the self_uri of this TrustRequest.
        The URI for this object

        :return: The self_uri of this TrustRequest.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri):
        """
        Sets the self_uri of this TrustRequest.
        The URI for this object

        :param self_uri: The self_uri of this TrustRequest.
        :type: str
        """
        
        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

