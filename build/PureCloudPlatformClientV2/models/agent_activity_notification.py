# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AgentActivityNotification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AgentActivityNotification - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'routing_status': 'AgentActivityNotificationRoutingStatus',
            'presence': 'AgentActivityNotificationPresence',
            'out_of_office': 'AgentActivityNotificationOutOfOffice',
            'active_queue_ids': 'list[str]',
            'date_active_queues_changed': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'routing_status': 'routingStatus',
            'presence': 'presence',
            'out_of_office': 'outOfOffice',
            'active_queue_ids': 'activeQueueIds',
            'date_active_queues_changed': 'dateActiveQueuesChanged'
        }

        self._id = None
        self._routing_status = None
        self._presence = None
        self._out_of_office = None
        self._active_queue_ids = None
        self._date_active_queues_changed = None

    @property
    def id(self):
        """
        Gets the id of this AgentActivityNotification.


        :return: The id of this AgentActivityNotification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AgentActivityNotification.


        :param id: The id of this AgentActivityNotification.
        :type: str
        """
        
        self._id = id

    @property
    def routing_status(self):
        """
        Gets the routing_status of this AgentActivityNotification.


        :return: The routing_status of this AgentActivityNotification.
        :rtype: AgentActivityNotificationRoutingStatus
        """
        return self._routing_status

    @routing_status.setter
    def routing_status(self, routing_status):
        """
        Sets the routing_status of this AgentActivityNotification.


        :param routing_status: The routing_status of this AgentActivityNotification.
        :type: AgentActivityNotificationRoutingStatus
        """
        
        self._routing_status = routing_status

    @property
    def presence(self):
        """
        Gets the presence of this AgentActivityNotification.


        :return: The presence of this AgentActivityNotification.
        :rtype: AgentActivityNotificationPresence
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """
        Sets the presence of this AgentActivityNotification.


        :param presence: The presence of this AgentActivityNotification.
        :type: AgentActivityNotificationPresence
        """
        
        self._presence = presence

    @property
    def out_of_office(self):
        """
        Gets the out_of_office of this AgentActivityNotification.


        :return: The out_of_office of this AgentActivityNotification.
        :rtype: AgentActivityNotificationOutOfOffice
        """
        return self._out_of_office

    @out_of_office.setter
    def out_of_office(self, out_of_office):
        """
        Sets the out_of_office of this AgentActivityNotification.


        :param out_of_office: The out_of_office of this AgentActivityNotification.
        :type: AgentActivityNotificationOutOfOffice
        """
        
        self._out_of_office = out_of_office

    @property
    def active_queue_ids(self):
        """
        Gets the active_queue_ids of this AgentActivityNotification.


        :return: The active_queue_ids of this AgentActivityNotification.
        :rtype: list[str]
        """
        return self._active_queue_ids

    @active_queue_ids.setter
    def active_queue_ids(self, active_queue_ids):
        """
        Sets the active_queue_ids of this AgentActivityNotification.


        :param active_queue_ids: The active_queue_ids of this AgentActivityNotification.
        :type: list[str]
        """
        
        self._active_queue_ids = active_queue_ids

    @property
    def date_active_queues_changed(self):
        """
        Gets the date_active_queues_changed of this AgentActivityNotification.


        :return: The date_active_queues_changed of this AgentActivityNotification.
        :rtype: datetime
        """
        return self._date_active_queues_changed

    @date_active_queues_changed.setter
    def date_active_queues_changed(self, date_active_queues_changed):
        """
        Sets the date_active_queues_changed of this AgentActivityNotification.


        :param date_active_queues_changed: The date_active_queues_changed of this AgentActivityNotification.
        :type: datetime
        """
        
        self._date_active_queues_changed = date_active_queues_changed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

