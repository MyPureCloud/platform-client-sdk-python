# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import FileUploadMode

class FileUploadSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        FileUploadSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enable_attachments': 'bool',
            'use_supported_content_profile': 'bool',
            'modes': 'list[FileUploadMode]'
        }

        self.attribute_map = {
            'enable_attachments': 'enableAttachments',
            'use_supported_content_profile': 'useSupportedContentProfile',
            'modes': 'modes'
        }

        self._enable_attachments = None
        self._use_supported_content_profile = None
        self._modes = None

    @property
    def enable_attachments(self) -> bool:
        """
        Gets the enable_attachments of this FileUploadSettings.
        whether or not attachments is enabled

        :return: The enable_attachments of this FileUploadSettings.
        :rtype: bool
        """
        return self._enable_attachments

    @enable_attachments.setter
    def enable_attachments(self, enable_attachments: bool) -> None:
        """
        Sets the enable_attachments of this FileUploadSettings.
        whether or not attachments is enabled

        :param enable_attachments: The enable_attachments of this FileUploadSettings.
        :type: bool
        """
        

        self._enable_attachments = enable_attachments

    @property
    def use_supported_content_profile(self) -> bool:
        """
        Gets the use_supported_content_profile of this FileUploadSettings.
        whether or not supported content profile is enabled

        :return: The use_supported_content_profile of this FileUploadSettings.
        :rtype: bool
        """
        return self._use_supported_content_profile

    @use_supported_content_profile.setter
    def use_supported_content_profile(self, use_supported_content_profile: bool) -> None:
        """
        Sets the use_supported_content_profile of this FileUploadSettings.
        whether or not supported content profile is enabled

        :param use_supported_content_profile: The use_supported_content_profile of this FileUploadSettings.
        :type: bool
        """
        

        self._use_supported_content_profile = use_supported_content_profile

    @property
    def modes(self) -> List['FileUploadMode']:
        """
        Gets the modes of this FileUploadSettings.
        The list of supported file upload modes

        :return: The modes of this FileUploadSettings.
        :rtype: list[FileUploadMode]
        """
        return self._modes

    @modes.setter
    def modes(self, modes: List['FileUploadMode']) -> None:
        """
        Sets the modes of this FileUploadSettings.
        The list of supported file upload modes

        :param modes: The modes of this FileUploadSettings.
        :type: list[FileUploadMode]
        """
        

        self._modes = modes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

