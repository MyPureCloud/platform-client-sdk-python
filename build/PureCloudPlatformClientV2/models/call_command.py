# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CallCommand(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CallCommand - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'call_number': 'str',
            'phone_column': 'str'
        }

        self.attribute_map = {
            'call_number': 'callNumber',
            'phone_column': 'phoneColumn'
        }

        self._call_number = None
        self._phone_column = None

    @property
    def call_number(self):
        """
        Gets the call_number of this CallCommand.
        The phone number to dial for this call.

        :return: The call_number of this CallCommand.
        :rtype: str
        """
        return self._call_number

    @call_number.setter
    def call_number(self, call_number):
        """
        Sets the call_number of this CallCommand.
        The phone number to dial for this call.

        :param call_number: The call_number of this CallCommand.
        :type: str
        """
        
        self._call_number = call_number

    @property
    def phone_column(self):
        """
        Gets the phone_column of this CallCommand.
        For a dialer preview or scheduled callback, the phone column associated with the phone number

        :return: The phone_column of this CallCommand.
        :rtype: str
        """
        return self._phone_column

    @phone_column.setter
    def phone_column(self, phone_column):
        """
        Sets the phone_column of this CallCommand.
        For a dialer preview or scheduled callback, the phone column associated with the phone number

        :param phone_column: The phone_column of this CallCommand.
        :type: str
        """
        
        self._phone_column = phone_column

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

