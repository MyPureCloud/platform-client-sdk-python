# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

class SearchShiftTradeResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SearchShiftTradeResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'trade': 'ShiftTradeResponse',
            'matching_receiving_shift_ids': 'list[str]',
            'preview': 'ShiftTradePreviewResponse'
        }

        self.attribute_map = {
            'trade': 'trade',
            'matching_receiving_shift_ids': 'matchingReceivingShiftIds',
            'preview': 'preview'
        }

        self._trade = None
        self._matching_receiving_shift_ids = None
        self._preview = None

    @property
    def trade(self):
        """
        Gets the trade of this SearchShiftTradeResponse.
        A trade which matches search criteria

        :return: The trade of this SearchShiftTradeResponse.
        :rtype: ShiftTradeResponse
        """
        return self._trade

    @trade.setter
    def trade(self, trade):
        """
        Sets the trade of this SearchShiftTradeResponse.
        A trade which matches search criteria

        :param trade: The trade of this SearchShiftTradeResponse.
        :type: ShiftTradeResponse
        """
        
        self._trade = trade

    @property
    def matching_receiving_shift_ids(self):
        """
        Gets the matching_receiving_shift_ids of this SearchShiftTradeResponse.
        IDs of shifts which match the search criteria

        :return: The matching_receiving_shift_ids of this SearchShiftTradeResponse.
        :rtype: list[str]
        """
        return self._matching_receiving_shift_ids

    @matching_receiving_shift_ids.setter
    def matching_receiving_shift_ids(self, matching_receiving_shift_ids):
        """
        Sets the matching_receiving_shift_ids of this SearchShiftTradeResponse.
        IDs of shifts which match the search criteria

        :param matching_receiving_shift_ids: The matching_receiving_shift_ids of this SearchShiftTradeResponse.
        :type: list[str]
        """
        
        self._matching_receiving_shift_ids = matching_receiving_shift_ids

    @property
    def preview(self):
        """
        Gets the preview of this SearchShiftTradeResponse.
        A preview of what the shift trade would look like if matched

        :return: The preview of this SearchShiftTradeResponse.
        :rtype: ShiftTradePreviewResponse
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """
        Sets the preview of this SearchShiftTradeResponse.
        A preview of what the shift trade would look like if matched

        :param preview: The preview of this SearchShiftTradeResponse.
        :type: ShiftTradePreviewResponse
        """
        
        self._preview = preview

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

