# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ReplacementTerm(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ReplacementTerm - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'existing_value': 'str',
            'updated_value': 'str'
        }

        self.attribute_map = {
            'type': 'type',
            'existing_value': 'existingValue',
            'updated_value': 'updatedValue'
        }

        self._type = None
        self._existing_value = None
        self._updated_value = None

    @property
    def type(self):
        """
        Gets the type of this ReplacementTerm.


        :return: The type of this ReplacementTerm.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ReplacementTerm.


        :param type: The type of this ReplacementTerm.
        :type: str
        """
        allowed_values = ["NAME", "ADDRESS", "PHONE", "EMAIL"]
        if type.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for type -> " + type
            self._type = "outdated_sdk_version"
        else:
            self._type = type

    @property
    def existing_value(self):
        """
        Gets the existing_value of this ReplacementTerm.


        :return: The existing_value of this ReplacementTerm.
        :rtype: str
        """
        return self._existing_value

    @existing_value.setter
    def existing_value(self, existing_value):
        """
        Sets the existing_value of this ReplacementTerm.


        :param existing_value: The existing_value of this ReplacementTerm.
        :type: str
        """
        
        self._existing_value = existing_value

    @property
    def updated_value(self):
        """
        Gets the updated_value of this ReplacementTerm.


        :return: The updated_value of this ReplacementTerm.
        :rtype: str
        """
        return self._updated_value

    @updated_value.setter
    def updated_value(self, updated_value):
        """
        Sets the updated_value of this ReplacementTerm.


        :param updated_value: The updated_value of this ReplacementTerm.
        :type: str
        """
        
        self._updated_value = updated_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

