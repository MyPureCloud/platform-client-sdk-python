# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import DomainEntityRef
    from . import WorkspaceSummary

class Workspace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        Workspace - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'type': 'str',
            'is_current_user_workspace': 'bool',
            'user': 'DomainEntityRef',
            'bucket': 'str',
            'date_created': 'datetime',
            'date_modified': 'datetime',
            'summary': 'WorkspaceSummary',
            'acl': 'list[str]',
            'description': 'str',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'is_current_user_workspace': 'isCurrentUserWorkspace',
            'user': 'user',
            'bucket': 'bucket',
            'date_created': 'dateCreated',
            'date_modified': 'dateModified',
            'summary': 'summary',
            'acl': 'acl',
            'description': 'description',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._type = None
        self._is_current_user_workspace = None
        self._user = None
        self._bucket = None
        self._date_created = None
        self._date_modified = None
        self._summary = None
        self._acl = None
        self._description = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this Workspace.
        The globally unique identifier for the object.

        :return: The id of this Workspace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this Workspace.
        The globally unique identifier for the object.

        :param id: The id of this Workspace.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Workspace.
        The current name of the workspace.

        :return: The name of this Workspace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this Workspace.
        The current name of the workspace.

        :param name: The name of this Workspace.
        :type: str
        """
        

        self._name = name

    @property
    def type(self) -> str:
        """
        Gets the type of this Workspace.


        :return: The type of this Workspace.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str) -> None:
        """
        Sets the type of this Workspace.


        :param type: The type of this Workspace.
        :type: str
        """
        if isinstance(type, int):
            type = str(type)
        allowed_values = ["USER", "GROUP"]
        if type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for type -> " + type)
            self._type = "outdated_sdk_version"
        else:
            self._type = type

    @property
    def is_current_user_workspace(self) -> bool:
        """
        Gets the is_current_user_workspace of this Workspace.


        :return: The is_current_user_workspace of this Workspace.
        :rtype: bool
        """
        return self._is_current_user_workspace

    @is_current_user_workspace.setter
    def is_current_user_workspace(self, is_current_user_workspace: bool) -> None:
        """
        Sets the is_current_user_workspace of this Workspace.


        :param is_current_user_workspace: The is_current_user_workspace of this Workspace.
        :type: bool
        """
        

        self._is_current_user_workspace = is_current_user_workspace

    @property
    def user(self) -> 'DomainEntityRef':
        """
        Gets the user of this Workspace.


        :return: The user of this Workspace.
        :rtype: DomainEntityRef
        """
        return self._user

    @user.setter
    def user(self, user: 'DomainEntityRef') -> None:
        """
        Sets the user of this Workspace.


        :param user: The user of this Workspace.
        :type: DomainEntityRef
        """
        

        self._user = user

    @property
    def bucket(self) -> str:
        """
        Gets the bucket of this Workspace.


        :return: The bucket of this Workspace.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket: str) -> None:
        """
        Sets the bucket of this Workspace.


        :param bucket: The bucket of this Workspace.
        :type: str
        """
        

        self._bucket = bucket

    @property
    def date_created(self) -> datetime:
        """
        Gets the date_created of this Workspace.
        Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_created of this Workspace.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime) -> None:
        """
        Sets the date_created of this Workspace.
        Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_created: The date_created of this Workspace.
        :type: datetime
        """
        

        self._date_created = date_created

    @property
    def date_modified(self) -> datetime:
        """
        Gets the date_modified of this Workspace.
        Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_modified of this Workspace.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified: datetime) -> None:
        """
        Sets the date_modified of this Workspace.
        Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_modified: The date_modified of this Workspace.
        :type: datetime
        """
        

        self._date_modified = date_modified

    @property
    def summary(self) -> 'WorkspaceSummary':
        """
        Gets the summary of this Workspace.


        :return: The summary of this Workspace.
        :rtype: WorkspaceSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary: 'WorkspaceSummary') -> None:
        """
        Sets the summary of this Workspace.


        :param summary: The summary of this Workspace.
        :type: WorkspaceSummary
        """
        

        self._summary = summary

    @property
    def acl(self) -> List[str]:
        """
        Gets the acl of this Workspace.


        :return: The acl of this Workspace.
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl: List[str]) -> None:
        """
        Sets the acl of this Workspace.


        :param acl: The acl of this Workspace.
        :type: list[str]
        """
        

        self._acl = acl

    @property
    def description(self) -> str:
        """
        Gets the description of this Workspace.


        :return: The description of this Workspace.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str) -> None:
        """
        Sets the description of this Workspace.


        :param description: The description of this Workspace.
        :type: str
        """
        

        self._description = description

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this Workspace.
        The URI for this object

        :return: The self_uri of this Workspace.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this Workspace.
        The URI for this object

        :param self_uri: The self_uri of this Workspace.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

