# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

class SmsAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SmsAddress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'street': 'str',
            'city': 'str',
            'region': 'str',
            'postal_code': 'str',
            'country_code': 'str',
            'validated': 'bool',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'street': 'street',
            'city': 'city',
            'region': 'region',
            'postal_code': 'postalCode',
            'country_code': 'countryCode',
            'validated': 'validated',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._street = None
        self._city = None
        self._region = None
        self._postal_code = None
        self._country_code = None
        self._validated = None
        self._self_uri = None

    @property
    def id(self):
        """
        Gets the id of this SmsAddress.
        The id of this address.

        :return: The id of this SmsAddress.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SmsAddress.
        The id of this address.

        :param id: The id of this SmsAddress.
        :type: str
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this SmsAddress.


        :return: The name of this SmsAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SmsAddress.


        :param name: The name of this SmsAddress.
        :type: str
        """
        
        self._name = name

    @property
    def street(self):
        """
        Gets the street of this SmsAddress.
        The number and street address where this address is located.

        :return: The street of this SmsAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """
        Sets the street of this SmsAddress.
        The number and street address where this address is located.

        :param street: The street of this SmsAddress.
        :type: str
        """
        
        self._street = street

    @property
    def city(self):
        """
        Gets the city of this SmsAddress.
        The city in which this address is in

        :return: The city of this SmsAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this SmsAddress.
        The city in which this address is in

        :param city: The city of this SmsAddress.
        :type: str
        """
        
        self._city = city

    @property
    def region(self):
        """
        Gets the region of this SmsAddress.
        The state or region this address is in

        :return: The region of this SmsAddress.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this SmsAddress.
        The state or region this address is in

        :param region: The region of this SmsAddress.
        :type: str
        """
        
        self._region = region

    @property
    def postal_code(self):
        """
        Gets the postal_code of this SmsAddress.
        The postal code this address is in

        :return: The postal_code of this SmsAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this SmsAddress.
        The postal code this address is in

        :param postal_code: The postal_code of this SmsAddress.
        :type: str
        """
        
        self._postal_code = postal_code

    @property
    def country_code(self):
        """
        Gets the country_code of this SmsAddress.
        The ISO country code of this address

        :return: The country_code of this SmsAddress.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this SmsAddress.
        The ISO country code of this address

        :param country_code: The country_code of this SmsAddress.
        :type: str
        """
        
        self._country_code = country_code

    @property
    def validated(self):
        """
        Gets the validated of this SmsAddress.
        In some countries, addresses are validated to comply with local regulation. In those countries, if the address you provide does not pass validation, it will not be accepted as an Address. This value will be true if the Address has been validated, or false for countries that don't require validation or if the Address is non-compliant.

        :return: The validated of this SmsAddress.
        :rtype: bool
        """
        return self._validated

    @validated.setter
    def validated(self, validated):
        """
        Sets the validated of this SmsAddress.
        In some countries, addresses are validated to comply with local regulation. In those countries, if the address you provide does not pass validation, it will not be accepted as an Address. This value will be true if the Address has been validated, or false for countries that don't require validation or if the Address is non-compliant.

        :param validated: The validated of this SmsAddress.
        :type: bool
        """
        
        self._validated = validated

    @property
    def self_uri(self):
        """
        Gets the self_uri of this SmsAddress.
        The URI for this object

        :return: The self_uri of this SmsAddress.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri):
        """
        Sets the self_uri of this SmsAddress.
        The URI for this object

        :param self_uri: The self_uri of this SmsAddress.
        :type: str
        """
        
        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

