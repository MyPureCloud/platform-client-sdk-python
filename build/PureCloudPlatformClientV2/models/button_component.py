# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

class ButtonComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ButtonComponent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'text': 'str',
            'title': 'str',
            'actions': 'ContentActions'
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'title': 'title',
            'actions': 'actions'
        }

        self._id = None
        self._text = None
        self._title = None
        self._actions = None

    @property
    def id(self):
        """
        Gets the id of this ButtonComponent.
        The ID of this component.

        :return: The id of this ButtonComponent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ButtonComponent.
        The ID of this component.

        :param id: The id of this ButtonComponent.
        :type: str
        """
        
        self._id = id

    @property
    def text(self):
        """
        Gets the text of this ButtonComponent.
        Deprecated - Use title instead.

        :return: The text of this ButtonComponent.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this ButtonComponent.
        Deprecated - Use title instead.

        :param text: The text of this ButtonComponent.
        :type: str
        """
        
        self._text = text

    @property
    def title(self):
        """
        Gets the title of this ButtonComponent.
        Text to show inside the button.

        :return: The title of this ButtonComponent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ButtonComponent.
        Text to show inside the button.

        :param title: The title of this ButtonComponent.
        :type: str
        """
        
        self._title = title

    @property
    def actions(self):
        """
        Gets the actions of this ButtonComponent.
        The button actions.

        :return: The actions of this ButtonComponent.
        :rtype: ContentActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this ButtonComponent.
        The button actions.

        :param actions: The actions of this ButtonComponent.
        :type: ContentActions
        """
        
        self._actions = actions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

