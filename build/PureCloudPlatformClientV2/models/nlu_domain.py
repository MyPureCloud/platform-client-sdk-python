# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

class NluDomain(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NluDomain - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'language': 'str',
            'draft_version': 'NluDomainVersion',
            'last_published_version': 'NluDomainVersion',
            'date_created': 'datetime',
            'date_modified': 'datetime',
            'engine_version': 'str',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'language': 'language',
            'draft_version': 'draftVersion',
            'last_published_version': 'lastPublishedVersion',
            'date_created': 'dateCreated',
            'date_modified': 'dateModified',
            'engine_version': 'engineVersion',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._language = None
        self._draft_version = None
        self._last_published_version = None
        self._date_created = None
        self._date_modified = None
        self._engine_version = None
        self._self_uri = None

    @property
    def id(self):
        """
        Gets the id of this NluDomain.
        The globally unique identifier for the object.

        :return: The id of this NluDomain.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NluDomain.
        The globally unique identifier for the object.

        :param id: The id of this NluDomain.
        :type: str
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this NluDomain.
        The name of the NLU domain.

        :return: The name of this NluDomain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NluDomain.
        The name of the NLU domain.

        :param name: The name of this NluDomain.
        :type: str
        """
        
        self._name = name

    @property
    def language(self):
        """
        Gets the language of this NluDomain.
        The language culture of the NLU domain, e.g. `en-us`, `de-de`.

        :return: The language of this NluDomain.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this NluDomain.
        The language culture of the NLU domain, e.g. `en-us`, `de-de`.

        :param language: The language of this NluDomain.
        :type: str
        """
        
        self._language = language

    @property
    def draft_version(self):
        """
        Gets the draft_version of this NluDomain.
        The draft version of that NLU domain.

        :return: The draft_version of this NluDomain.
        :rtype: NluDomainVersion
        """
        return self._draft_version

    @draft_version.setter
    def draft_version(self, draft_version):
        """
        Sets the draft_version of this NluDomain.
        The draft version of that NLU domain.

        :param draft_version: The draft_version of this NluDomain.
        :type: NluDomainVersion
        """
        
        self._draft_version = draft_version

    @property
    def last_published_version(self):
        """
        Gets the last_published_version of this NluDomain.
        The last published version of that NLU domain.

        :return: The last_published_version of this NluDomain.
        :rtype: NluDomainVersion
        """
        return self._last_published_version

    @last_published_version.setter
    def last_published_version(self, last_published_version):
        """
        Sets the last_published_version of this NluDomain.
        The last published version of that NLU domain.

        :param last_published_version: The last_published_version of this NluDomain.
        :type: NluDomainVersion
        """
        
        self._last_published_version = last_published_version

    @property
    def date_created(self):
        """
        Gets the date_created of this NluDomain.
        The date when the NLU domain was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_created of this NluDomain.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this NluDomain.
        The date when the NLU domain was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_created: The date_created of this NluDomain.
        :type: datetime
        """
        
        self._date_created = date_created

    @property
    def date_modified(self):
        """
        Gets the date_modified of this NluDomain.
        The date when the NLU domain was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_modified of this NluDomain.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """
        Sets the date_modified of this NluDomain.
        The date when the NLU domain was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_modified: The date_modified of this NluDomain.
        :type: datetime
        """
        
        self._date_modified = date_modified

    @property
    def engine_version(self):
        """
        Gets the engine_version of this NluDomain.
        The version of the NLU engine to use.

        :return: The engine_version of this NluDomain.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """
        Sets the engine_version of this NluDomain.
        The version of the NLU engine to use.

        :param engine_version: The engine_version of this NluDomain.
        :type: str
        """
        
        self._engine_version = engine_version

    @property
    def self_uri(self):
        """
        Gets the self_uri of this NluDomain.
        The URI for this object

        :return: The self_uri of this NluDomain.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri):
        """
        Sets the self_uri of this NluDomain.
        The URI for this object

        :param self_uri: The self_uri of this NluDomain.
        :type: str
        """
        
        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

