# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import MessagingSettingRequestReference
    from . import SupportedContentReference

class TwitterIntegrationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        TwitterIntegrationRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'supported_content': 'SupportedContentReference',
            'messaging_setting': 'MessagingSettingRequestReference',
            'access_token_key': 'str',
            'access_token_secret': 'str',
            'consumer_key': 'str',
            'consumer_secret': 'str',
            'tier': 'str',
            'env_name': 'str',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'supported_content': 'supportedContent',
            'messaging_setting': 'messagingSetting',
            'access_token_key': 'accessTokenKey',
            'access_token_secret': 'accessTokenSecret',
            'consumer_key': 'consumerKey',
            'consumer_secret': 'consumerSecret',
            'tier': 'tier',
            'env_name': 'envName',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._supported_content = None
        self._messaging_setting = None
        self._access_token_key = None
        self._access_token_secret = None
        self._consumer_key = None
        self._consumer_secret = None
        self._tier = None
        self._env_name = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this TwitterIntegrationRequest.
        The globally unique identifier for the object.

        :return: The id of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this TwitterIntegrationRequest.
        The globally unique identifier for the object.

        :param id: The id of this TwitterIntegrationRequest.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this TwitterIntegrationRequest.
        The name of the Twitter Integration

        :return: The name of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this TwitterIntegrationRequest.
        The name of the Twitter Integration

        :param name: The name of this TwitterIntegrationRequest.
        :type: str
        """
        

        self._name = name

    @property
    def supported_content(self) -> 'SupportedContentReference':
        """
        Gets the supported_content of this TwitterIntegrationRequest.
        Defines the SupportedContent profile configured for an integration

        :return: The supported_content of this TwitterIntegrationRequest.
        :rtype: SupportedContentReference
        """
        return self._supported_content

    @supported_content.setter
    def supported_content(self, supported_content: 'SupportedContentReference') -> None:
        """
        Sets the supported_content of this TwitterIntegrationRequest.
        Defines the SupportedContent profile configured for an integration

        :param supported_content: The supported_content of this TwitterIntegrationRequest.
        :type: SupportedContentReference
        """
        

        self._supported_content = supported_content

    @property
    def messaging_setting(self) -> 'MessagingSettingRequestReference':
        """
        Gets the messaging_setting of this TwitterIntegrationRequest.
        Defines the message settings to be applied for this integration

        :return: The messaging_setting of this TwitterIntegrationRequest.
        :rtype: MessagingSettingRequestReference
        """
        return self._messaging_setting

    @messaging_setting.setter
    def messaging_setting(self, messaging_setting: 'MessagingSettingRequestReference') -> None:
        """
        Sets the messaging_setting of this TwitterIntegrationRequest.
        Defines the message settings to be applied for this integration

        :param messaging_setting: The messaging_setting of this TwitterIntegrationRequest.
        :type: MessagingSettingRequestReference
        """
        

        self._messaging_setting = messaging_setting

    @property
    def access_token_key(self) -> str:
        """
        Gets the access_token_key of this TwitterIntegrationRequest.
        The Access Token Key from Twitter messenger

        :return: The access_token_key of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._access_token_key

    @access_token_key.setter
    def access_token_key(self, access_token_key: str) -> None:
        """
        Sets the access_token_key of this TwitterIntegrationRequest.
        The Access Token Key from Twitter messenger

        :param access_token_key: The access_token_key of this TwitterIntegrationRequest.
        :type: str
        """
        

        self._access_token_key = access_token_key

    @property
    def access_token_secret(self) -> str:
        """
        Gets the access_token_secret of this TwitterIntegrationRequest.
        The Access Token Secret from Twitter messenger

        :return: The access_token_secret of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._access_token_secret

    @access_token_secret.setter
    def access_token_secret(self, access_token_secret: str) -> None:
        """
        Sets the access_token_secret of this TwitterIntegrationRequest.
        The Access Token Secret from Twitter messenger

        :param access_token_secret: The access_token_secret of this TwitterIntegrationRequest.
        :type: str
        """
        

        self._access_token_secret = access_token_secret

    @property
    def consumer_key(self) -> str:
        """
        Gets the consumer_key of this TwitterIntegrationRequest.
        The Consumer Key from Twitter messenger

        :return: The consumer_key of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._consumer_key

    @consumer_key.setter
    def consumer_key(self, consumer_key: str) -> None:
        """
        Sets the consumer_key of this TwitterIntegrationRequest.
        The Consumer Key from Twitter messenger

        :param consumer_key: The consumer_key of this TwitterIntegrationRequest.
        :type: str
        """
        

        self._consumer_key = consumer_key

    @property
    def consumer_secret(self) -> str:
        """
        Gets the consumer_secret of this TwitterIntegrationRequest.
        The Consumer Secret from Twitter messenger

        :return: The consumer_secret of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._consumer_secret

    @consumer_secret.setter
    def consumer_secret(self, consumer_secret: str) -> None:
        """
        Sets the consumer_secret of this TwitterIntegrationRequest.
        The Consumer Secret from Twitter messenger

        :param consumer_secret: The consumer_secret of this TwitterIntegrationRequest.
        :type: str
        """
        

        self._consumer_secret = consumer_secret

    @property
    def tier(self) -> str:
        """
        Gets the tier of this TwitterIntegrationRequest.
        The type of twitter account to be used for the integration

        :return: The tier of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier: str) -> None:
        """
        Sets the tier of this TwitterIntegrationRequest.
        The type of twitter account to be used for the integration

        :param tier: The tier of this TwitterIntegrationRequest.
        :type: str
        """
        if isinstance(tier, int):
            tier = str(tier)
        allowed_values = ["premium", "enterprise"]
        if tier.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for tier -> " + tier)
            self._tier = "outdated_sdk_version"
        else:
            self._tier = tier

    @property
    def env_name(self) -> str:
        """
        Gets the env_name of this TwitterIntegrationRequest.
        The Twitter environment name, e.g.: env-beta (required for premium tier)

        :return: The env_name of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._env_name

    @env_name.setter
    def env_name(self, env_name: str) -> None:
        """
        Sets the env_name of this TwitterIntegrationRequest.
        The Twitter environment name, e.g.: env-beta (required for premium tier)

        :param env_name: The env_name of this TwitterIntegrationRequest.
        :type: str
        """
        

        self._env_name = env_name

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this TwitterIntegrationRequest.
        The URI for this object

        :return: The self_uri of this TwitterIntegrationRequest.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this TwitterIntegrationRequest.
        The URI for this object

        :param self_uri: The self_uri of this TwitterIntegrationRequest.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

