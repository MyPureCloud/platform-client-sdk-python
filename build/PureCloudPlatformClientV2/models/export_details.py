# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import ArchitectFlowReference

class ExportDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ExportDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'flow': 'ArchitectFlowReference',
            'file_name': 'str',
            'export_type': 'str'
        }

        self.attribute_map = {
            'flow': 'flow',
            'file_name': 'fileName',
            'export_type': 'exportType'
        }

        self._flow = None
        self._file_name = None
        self._export_type = None

    @property
    def flow(self) -> 'ArchitectFlowReference':
        """
        Gets the flow of this ExportDetails.
        The flow to export. If you do not provide the flow ID, you must provide both the name and type.

        :return: The flow of this ExportDetails.
        :rtype: ArchitectFlowReference
        """
        return self._flow

    @flow.setter
    def flow(self, flow: 'ArchitectFlowReference') -> None:
        """
        Sets the flow of this ExportDetails.
        The flow to export. If you do not provide the flow ID, you must provide both the name and type.

        :param flow: The flow of this ExportDetails.
        :type: ArchitectFlowReference
        """
        

        self._flow = flow

    @property
    def file_name(self) -> str:
        """
        Gets the file_name of this ExportDetails.
        Name to assign to the file after download. The extension will be automatically appended based on desired export type. Must contain only alphanumeric characters, underscores, or hyphens.

        :return: The file_name of this ExportDetails.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name: str) -> None:
        """
        Sets the file_name of this ExportDetails.
        Name to assign to the file after download. The extension will be automatically appended based on desired export type. Must contain only alphanumeric characters, underscores, or hyphens.

        :param file_name: The file_name of this ExportDetails.
        :type: str
        """
        

        self._file_name = file_name

    @property
    def export_type(self) -> str:
        """
        Gets the export_type of this ExportDetails.
        The export type for the flow. Default: 'Yaml'.

        :return: The export_type of this ExportDetails.
        :rtype: str
        """
        return self._export_type

    @export_type.setter
    def export_type(self, export_type: str) -> None:
        """
        Sets the export_type of this ExportDetails.
        The export type for the flow. Default: 'Yaml'.

        :param export_type: The export_type of this ExportDetails.
        :type: str
        """
        if isinstance(export_type, int):
            export_type = str(export_type)
        allowed_values = ["Architect", "Yaml"]
        if export_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for export_type -> " + export_type)
            self._export_type = "outdated_sdk_version"
        else:
            self._export_type = export_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

