# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class PushDeviceInsertRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        PushDeviceInsertRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_token': 'str',
            'notification_provider': 'str',
            'language': 'str',
            'device_type': 'str'
        }

        self.attribute_map = {
            'device_token': 'deviceToken',
            'notification_provider': 'notificationProvider',
            'language': 'language',
            'device_type': 'deviceType'
        }

        self._device_token = None
        self._notification_provider = None
        self._language = None
        self._device_type = None

    @property
    def device_token(self) -> str:
        """
        Gets the device_token of this PushDeviceInsertRequest.
        The device token generated by the network providers

        :return: The device_token of this PushDeviceInsertRequest.
        :rtype: str
        """
        return self._device_token

    @device_token.setter
    def device_token(self, device_token: str) -> None:
        """
        Sets the device_token of this PushDeviceInsertRequest.
        The device token generated by the network providers

        :param device_token: The device_token of this PushDeviceInsertRequest.
        :type: str
        """
        

        self._device_token = device_token

    @property
    def notification_provider(self) -> str:
        """
        Gets the notification_provider of this PushDeviceInsertRequest.
        The notification provider for the device (FCM / APNS)

        :return: The notification_provider of this PushDeviceInsertRequest.
        :rtype: str
        """
        return self._notification_provider

    @notification_provider.setter
    def notification_provider(self, notification_provider: str) -> None:
        """
        Sets the notification_provider of this PushDeviceInsertRequest.
        The notification provider for the device (FCM / APNS)

        :param notification_provider: The notification_provider of this PushDeviceInsertRequest.
        :type: str
        """
        if isinstance(notification_provider, int):
            notification_provider = str(notification_provider)
        allowed_values = ["FCM", "APNS"]
        if notification_provider.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for notification_provider -> " + notification_provider)
            self._notification_provider = "outdated_sdk_version"
        else:
            self._notification_provider = notification_provider

    @property
    def language(self) -> str:
        """
        Gets the language of this PushDeviceInsertRequest.
        The preferred language of the user (eg. en-us, de, fr)

        :return: The language of this PushDeviceInsertRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str) -> None:
        """
        Sets the language of this PushDeviceInsertRequest.
        The preferred language of the user (eg. en-us, de, fr)

        :param language: The language of this PushDeviceInsertRequest.
        :type: str
        """
        

        self._language = language

    @property
    def device_type(self) -> str:
        """
        Gets the device_type of this PushDeviceInsertRequest.
        The type of the device (Android / IoS)

        :return: The device_type of this PushDeviceInsertRequest.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type: str) -> None:
        """
        Sets the device_type of this PushDeviceInsertRequest.
        The type of the device (Android / IoS)

        :param device_type: The device_type of this PushDeviceInsertRequest.
        :type: str
        """
        if isinstance(device_type, int):
            device_type = str(device_type)
        allowed_values = ["android", "ios"]
        if device_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for device_type -> " + device_type)
            self._device_type = "outdated_sdk_version"
        else:
            self._device_type = device_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

