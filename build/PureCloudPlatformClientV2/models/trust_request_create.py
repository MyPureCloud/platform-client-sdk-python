# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class TrustRequestCreate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TrustRequestCreate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_ids': 'list[str]',
            'group_ids': 'list[str]'
        }

        self.attribute_map = {
            'user_ids': 'userIds',
            'group_ids': 'groupIds'
        }

        self._user_ids = None
        self._group_ids = None

    @property
    def user_ids(self):
        """
        Gets the user_ids of this TrustRequestCreate.
        The list of trustee users that are requesting access. If no users are specified, at least one group is required.

        :return: The user_ids of this TrustRequestCreate.
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """
        Sets the user_ids of this TrustRequestCreate.
        The list of trustee users that are requesting access. If no users are specified, at least one group is required.

        :param user_ids: The user_ids of this TrustRequestCreate.
        :type: list[str]
        """
        
        self._user_ids = user_ids

    @property
    def group_ids(self):
        """
        Gets the group_ids of this TrustRequestCreate.
        The list of trustee groups that are requesting access. If no groups are specified, at least one user is required.

        :return: The group_ids of this TrustRequestCreate.
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """
        Sets the group_ids of this TrustRequestCreate.
        The list of trustee groups that are requesting access. If no groups are specified, at least one user is required.

        :param group_ids: The group_ids of this TrustRequestCreate.
        :type: list[str]
        """
        
        self._group_ids = group_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

