# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import ScimConfigResourceTypeSchemaExtension
    from . import ScimMetadata

class ScimConfigResourceType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ScimConfigResourceType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'schemas': 'list[str]',
            'name': 'str',
            'description': 'str',
            'schema': 'str',
            'schema_extensions': 'list[ScimConfigResourceTypeSchemaExtension]',
            'endpoint': 'str',
            'meta': 'ScimMetadata'
        }

        self.attribute_map = {
            'id': 'id',
            'schemas': 'schemas',
            'name': 'name',
            'description': 'description',
            'schema': 'schema',
            'schema_extensions': 'schemaExtensions',
            'endpoint': 'endpoint',
            'meta': 'meta'
        }

        self._id = None
        self._schemas = None
        self._name = None
        self._description = None
        self._schema = None
        self._schema_extensions = None
        self._endpoint = None
        self._meta = None

    @property
    def id(self) -> str:
        """
        Gets the id of this ScimConfigResourceType.
        The ID of the SCIM resource. Set by the service provider. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readOnly\". \"returned\" is set to \"always\".

        :return: The id of this ScimConfigResourceType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this ScimConfigResourceType.
        The ID of the SCIM resource. Set by the service provider. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readOnly\". \"returned\" is set to \"always\".

        :param id: The id of this ScimConfigResourceType.
        :type: str
        """
        

        self._id = id

    @property
    def schemas(self) -> List[str]:
        """
        Gets the schemas of this ScimConfigResourceType.
        The list of supported schemas.

        :return: The schemas of this ScimConfigResourceType.
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas: List[str]) -> None:
        """
        Sets the schemas of this ScimConfigResourceType.
        The list of supported schemas.

        :param schemas: The schemas of this ScimConfigResourceType.
        :type: list[str]
        """
        

        self._schemas = schemas

    @property
    def name(self) -> str:
        """
        Gets the name of this ScimConfigResourceType.
        The name of the resource type.

        :return: The name of this ScimConfigResourceType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this ScimConfigResourceType.
        The name of the resource type.

        :param name: The name of this ScimConfigResourceType.
        :type: str
        """
        

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this ScimConfigResourceType.
        The description of the resource type.

        :return: The description of this ScimConfigResourceType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str) -> None:
        """
        Sets the description of this ScimConfigResourceType.
        The description of the resource type.

        :param description: The description of this ScimConfigResourceType.
        :type: str
        """
        

        self._description = description

    @property
    def schema(self) -> str:
        """
        Gets the schema of this ScimConfigResourceType.
        The URI of the primary or base schema for the resource type.

        :return: The schema of this ScimConfigResourceType.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema: str) -> None:
        """
        Sets the schema of this ScimConfigResourceType.
        The URI of the primary or base schema for the resource type.

        :param schema: The schema of this ScimConfigResourceType.
        :type: str
        """
        

        self._schema = schema

    @property
    def schema_extensions(self) -> List['ScimConfigResourceTypeSchemaExtension']:
        """
        Gets the schema_extensions of this ScimConfigResourceType.
        The list of schema extensions for the resource type.

        :return: The schema_extensions of this ScimConfigResourceType.
        :rtype: list[ScimConfigResourceTypeSchemaExtension]
        """
        return self._schema_extensions

    @schema_extensions.setter
    def schema_extensions(self, schema_extensions: List['ScimConfigResourceTypeSchemaExtension']) -> None:
        """
        Sets the schema_extensions of this ScimConfigResourceType.
        The list of schema extensions for the resource type.

        :param schema_extensions: The schema_extensions of this ScimConfigResourceType.
        :type: list[ScimConfigResourceTypeSchemaExtension]
        """
        

        self._schema_extensions = schema_extensions

    @property
    def endpoint(self) -> str:
        """
        Gets the endpoint of this ScimConfigResourceType.
        The HTTP-addressable endpoint of the resource type. Appears after the base URL.

        :return: The endpoint of this ScimConfigResourceType.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint: str) -> None:
        """
        Sets the endpoint of this ScimConfigResourceType.
        The HTTP-addressable endpoint of the resource type. Appears after the base URL.

        :param endpoint: The endpoint of this ScimConfigResourceType.
        :type: str
        """
        

        self._endpoint = endpoint

    @property
    def meta(self) -> 'ScimMetadata':
        """
        Gets the meta of this ScimConfigResourceType.
        The metadata of the SCIM resource. Only \"location\" and \"resourceType\" are set for \"ResourceType\" resources.

        :return: The meta of this ScimConfigResourceType.
        :rtype: ScimMetadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta: 'ScimMetadata') -> None:
        """
        Sets the meta of this ScimConfigResourceType.
        The metadata of the SCIM resource. Only \"location\" and \"resourceType\" are set for \"ResourceType\" resources.

        :param meta: The meta of this ScimConfigResourceType.
        :type: ScimMetadata
        """
        

        self._meta = meta

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

