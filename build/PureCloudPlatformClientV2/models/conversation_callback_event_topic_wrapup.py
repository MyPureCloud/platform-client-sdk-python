# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class ConversationCallbackEventTopicWrapup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ConversationCallbackEventTopicWrapup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'notes': 'str',
            'tags': 'list[str]',
            'duration_seconds': 'int',
            'end_time': 'datetime'
        }

        self.attribute_map = {
            'code': 'code',
            'notes': 'notes',
            'tags': 'tags',
            'duration_seconds': 'durationSeconds',
            'end_time': 'endTime'
        }

        self._code = None
        self._notes = None
        self._tags = None
        self._duration_seconds = None
        self._end_time = None

    @property
    def code(self) -> str:
        """
        Gets the code of this ConversationCallbackEventTopicWrapup.
        The user configured wrap up code name.

        :return: The code of this ConversationCallbackEventTopicWrapup.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str) -> None:
        """
        Sets the code of this ConversationCallbackEventTopicWrapup.
        The user configured wrap up code name.

        :param code: The code of this ConversationCallbackEventTopicWrapup.
        :type: str
        """
        

        self._code = code

    @property
    def notes(self) -> str:
        """
        Gets the notes of this ConversationCallbackEventTopicWrapup.
        Text entered by the agent to describe the call or disposition.

        :return: The notes of this ConversationCallbackEventTopicWrapup.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str) -> None:
        """
        Sets the notes of this ConversationCallbackEventTopicWrapup.
        Text entered by the agent to describe the call or disposition.

        :param notes: The notes of this ConversationCallbackEventTopicWrapup.
        :type: str
        """
        

        self._notes = notes

    @property
    def tags(self) -> List[str]:
        """
        Gets the tags of this ConversationCallbackEventTopicWrapup.
        List of tags selected by the agent to describe the call or disposition.

        :return: The tags of this ConversationCallbackEventTopicWrapup.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]) -> None:
        """
        Sets the tags of this ConversationCallbackEventTopicWrapup.
        List of tags selected by the agent to describe the call or disposition.

        :param tags: The tags of this ConversationCallbackEventTopicWrapup.
        :type: list[str]
        """
        

        self._tags = tags

    @property
    def duration_seconds(self) -> int:
        """
        Gets the duration_seconds of this ConversationCallbackEventTopicWrapup.
        The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally

        :return: The duration_seconds of this ConversationCallbackEventTopicWrapup.
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds: int) -> None:
        """
        Sets the duration_seconds of this ConversationCallbackEventTopicWrapup.
        The length of time in seconds that the agent spent doing after call work., Note, the format of utc-millisec should be ignored, our code generator needs it to generate a Long for us internally

        :param duration_seconds: The duration_seconds of this ConversationCallbackEventTopicWrapup.
        :type: int
        """
        

        self._duration_seconds = duration_seconds

    @property
    def end_time(self) -> datetime:
        """
        Gets the end_time of this ConversationCallbackEventTopicWrapup.
        The timestamp when the wrapup was finished.

        :return: The end_time of this ConversationCallbackEventTopicWrapup.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime) -> None:
        """
        Sets the end_time of this ConversationCallbackEventTopicWrapup.
        The timestamp when the wrapup was finished.

        :param end_time: The end_time of this ConversationCallbackEventTopicWrapup.
        :type: datetime
        """
        

        self._end_time = end_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

