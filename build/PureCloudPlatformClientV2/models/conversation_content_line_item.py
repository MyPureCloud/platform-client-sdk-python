# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class ConversationContentLineItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ConversationContentLineItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'price': 'float',
            'description': 'str',
            'identifier': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'price': 'price',
            'description': 'description',
            'identifier': 'identifier'
        }

        self._name = None
        self._price = None
        self._description = None
        self._identifier = None

    @property
    def name(self) -> str:
        """
        Gets the name of this ConversationContentLineItem.
        The display name for the item.

        :return: The name of this ConversationContentLineItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this ConversationContentLineItem.
        The display name for the item.

        :param name: The name of this ConversationContentLineItem.
        :type: str
        """
        

        self._name = name

    @property
    def price(self) -> float:
        """
        Gets the price of this ConversationContentLineItem.
        The price of the item.

        :return: The price of this ConversationContentLineItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float) -> None:
        """
        Sets the price of this ConversationContentLineItem.
        The price of the item.

        :param price: The price of this ConversationContentLineItem.
        :type: float
        """
        

        self._price = price

    @property
    def description(self) -> str:
        """
        Gets the description of this ConversationContentLineItem.
        Additional details about the item (e.g. the length of time to deliver for shipping options).

        :return: The description of this ConversationContentLineItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str) -> None:
        """
        Sets the description of this ConversationContentLineItem.
        Additional details about the item (e.g. the length of time to deliver for shipping options).

        :param description: The description of this ConversationContentLineItem.
        :type: str
        """
        

        self._description = description

    @property
    def identifier(self) -> str:
        """
        Gets the identifier of this ConversationContentLineItem.
        A client defined value used to identify the item.

        :return: The identifier of this ConversationContentLineItem.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str) -> None:
        """
        Sets the identifier of this ConversationContentLineItem.
        A client defined value used to identify the item.

        :param identifier: The identifier of this ConversationContentLineItem.
        :type: str
        """
        

        self._identifier = identifier

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

