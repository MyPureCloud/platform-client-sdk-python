# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import Division
    from . import ImportStatus

class DncListDivisionView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        DncListDivisionView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'division': 'Division',
            'import_status': 'ImportStatus',
            'size': 'int',
            'dnc_source_type': 'str',
            'contact_method': 'str',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'division': 'division',
            'import_status': 'importStatus',
            'size': 'size',
            'dnc_source_type': 'dncSourceType',
            'contact_method': 'contactMethod',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._division = None
        self._import_status = None
        self._size = None
        self._dnc_source_type = None
        self._contact_method = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this DncListDivisionView.
        The globally unique identifier for the object.

        :return: The id of this DncListDivisionView.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this DncListDivisionView.
        The globally unique identifier for the object.

        :param id: The id of this DncListDivisionView.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this DncListDivisionView.


        :return: The name of this DncListDivisionView.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this DncListDivisionView.


        :param name: The name of this DncListDivisionView.
        :type: str
        """
        

        self._name = name

    @property
    def division(self) -> 'Division':
        """
        Gets the division of this DncListDivisionView.
        The division to which this entity belongs.

        :return: The division of this DncListDivisionView.
        :rtype: Division
        """
        return self._division

    @division.setter
    def division(self, division: 'Division') -> None:
        """
        Sets the division of this DncListDivisionView.
        The division to which this entity belongs.

        :param division: The division of this DncListDivisionView.
        :type: Division
        """
        

        self._division = division

    @property
    def import_status(self) -> 'ImportStatus':
        """
        Gets the import_status of this DncListDivisionView.
        The status of the import process.

        :return: The import_status of this DncListDivisionView.
        :rtype: ImportStatus
        """
        return self._import_status

    @import_status.setter
    def import_status(self, import_status: 'ImportStatus') -> None:
        """
        Sets the import_status of this DncListDivisionView.
        The status of the import process.

        :param import_status: The import_status of this DncListDivisionView.
        :type: ImportStatus
        """
        

        self._import_status = import_status

    @property
    def size(self) -> int:
        """
        Gets the size of this DncListDivisionView.
        The number of contacts in the DncList.

        :return: The size of this DncListDivisionView.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int) -> None:
        """
        Sets the size of this DncListDivisionView.
        The number of contacts in the DncList.

        :param size: The size of this DncListDivisionView.
        :type: int
        """
        

        self._size = size

    @property
    def dnc_source_type(self) -> str:
        """
        Gets the dnc_source_type of this DncListDivisionView.
        The type of the DncList.

        :return: The dnc_source_type of this DncListDivisionView.
        :rtype: str
        """
        return self._dnc_source_type

    @dnc_source_type.setter
    def dnc_source_type(self, dnc_source_type: str) -> None:
        """
        Sets the dnc_source_type of this DncListDivisionView.
        The type of the DncList.

        :param dnc_source_type: The dnc_source_type of this DncListDivisionView.
        :type: str
        """
        if isinstance(dnc_source_type, int):
            dnc_source_type = str(dnc_source_type)
        allowed_values = ["rds", "rds_custom", "dnc.com", "gryphon"]
        if dnc_source_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for dnc_source_type -> " + dnc_source_type)
            self._dnc_source_type = "outdated_sdk_version"
        else:
            self._dnc_source_type = dnc_source_type

    @property
    def contact_method(self) -> str:
        """
        Gets the contact_method of this DncListDivisionView.
        The contact method. Required if dncSourceType is rds.

        :return: The contact_method of this DncListDivisionView.
        :rtype: str
        """
        return self._contact_method

    @contact_method.setter
    def contact_method(self, contact_method: str) -> None:
        """
        Sets the contact_method of this DncListDivisionView.
        The contact method. Required if dncSourceType is rds.

        :param contact_method: The contact_method of this DncListDivisionView.
        :type: str
        """
        if isinstance(contact_method, int):
            contact_method = str(contact_method)
        allowed_values = ["Email", "Phone", "Any"]
        if contact_method.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for contact_method -> " + contact_method)
            self._contact_method = "outdated_sdk_version"
        else:
            self._contact_method = contact_method

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this DncListDivisionView.
        The URI for this object

        :return: The self_uri of this DncListDivisionView.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this DncListDivisionView.
        The URI for this object

        :param self_uri: The self_uri of this DncListDivisionView.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

