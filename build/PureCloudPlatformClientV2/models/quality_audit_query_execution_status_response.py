# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import AuditQuerySort
    from . import QualityAuditQueryFilter

class QualityAuditQueryExecutionStatusResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        QualityAuditQueryExecutionStatusResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'state': 'str',
            'date_start': 'datetime',
            'interval': 'str',
            'filters': 'list[QualityAuditQueryFilter]',
            'sort': 'list[AuditQuerySort]'
        }

        self.attribute_map = {
            'id': 'id',
            'state': 'state',
            'date_start': 'dateStart',
            'interval': 'interval',
            'filters': 'filters',
            'sort': 'sort'
        }

        self._id = None
        self._state = None
        self._date_start = None
        self._interval = None
        self._filters = None
        self._sort = None

    @property
    def id(self) -> str:
        """
        Gets the id of this QualityAuditQueryExecutionStatusResponse.
        Id of the audit query execution request.

        :return: The id of this QualityAuditQueryExecutionStatusResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this QualityAuditQueryExecutionStatusResponse.
        Id of the audit query execution request.

        :param id: The id of this QualityAuditQueryExecutionStatusResponse.
        :type: str
        """
        

        self._id = id

    @property
    def state(self) -> str:
        """
        Gets the state of this QualityAuditQueryExecutionStatusResponse.
        Status of the audit query execution request.

        :return: The state of this QualityAuditQueryExecutionStatusResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str) -> None:
        """
        Sets the state of this QualityAuditQueryExecutionStatusResponse.
        Status of the audit query execution request.

        :param state: The state of this QualityAuditQueryExecutionStatusResponse.
        :type: str
        """
        if isinstance(state, int):
            state = str(state)
        allowed_values = ["Queued", "Running", "Succeeded", "Failed", "Cancelled"]
        if state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for state -> " + state)
            self._state = "outdated_sdk_version"
        else:
            self._state = state

    @property
    def date_start(self) -> datetime:
        """
        Gets the date_start of this QualityAuditQueryExecutionStatusResponse.
        Start date and time of the audit query execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_start of this QualityAuditQueryExecutionStatusResponse.
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start: datetime) -> None:
        """
        Sets the date_start of this QualityAuditQueryExecutionStatusResponse.
        Start date and time of the audit query execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_start: The date_start of this QualityAuditQueryExecutionStatusResponse.
        :type: datetime
        """
        

        self._date_start = date_start

    @property
    def interval(self) -> str:
        """
        Gets the interval of this QualityAuditQueryExecutionStatusResponse.
        Interval for the audit query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss

        :return: The interval of this QualityAuditQueryExecutionStatusResponse.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval: str) -> None:
        """
        Sets the interval of this QualityAuditQueryExecutionStatusResponse.
        Interval for the audit query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss

        :param interval: The interval of this QualityAuditQueryExecutionStatusResponse.
        :type: str
        """
        

        self._interval = interval

    @property
    def filters(self) -> List['QualityAuditQueryFilter']:
        """
        Gets the filters of this QualityAuditQueryExecutionStatusResponse.
        Filters for the audit query.

        :return: The filters of this QualityAuditQueryExecutionStatusResponse.
        :rtype: list[QualityAuditQueryFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters: List['QualityAuditQueryFilter']) -> None:
        """
        Sets the filters of this QualityAuditQueryExecutionStatusResponse.
        Filters for the audit query.

        :param filters: The filters of this QualityAuditQueryExecutionStatusResponse.
        :type: list[QualityAuditQueryFilter]
        """
        

        self._filters = filters

    @property
    def sort(self) -> List['AuditQuerySort']:
        """
        Gets the sort of this QualityAuditQueryExecutionStatusResponse.
        Sort parameter for the audit query.

        :return: The sort of this QualityAuditQueryExecutionStatusResponse.
        :rtype: list[AuditQuerySort]
        """
        return self._sort

    @sort.setter
    def sort(self, sort: List['AuditQuerySort']) -> None:
        """
        Sets the sort of this QualityAuditQueryExecutionStatusResponse.
        Sort parameter for the audit query.

        :param sort: The sort of this QualityAuditQueryExecutionStatusResponse.
        :type: list[AuditQuerySort]
        """
        

        self._sort = sort

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

