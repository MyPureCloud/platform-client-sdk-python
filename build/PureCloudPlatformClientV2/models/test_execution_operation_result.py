# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class TestExecutionOperationResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TestExecutionOperationResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'step': 'int',
            'name': 'str',
            'success': 'bool',
            'result': 'object',
            'error': 'ErrorBody'
        }

        self.attribute_map = {
            'step': 'step',
            'name': 'name',
            'success': 'success',
            'result': 'result',
            'error': 'error'
        }

        self._step = None
        self._name = None
        self._success = None
        self._result = None
        self._error = None

    @property
    def step(self):
        """
        Gets the step of this TestExecutionOperationResult.
        The step number to indicate the order in which the operation was performed

        :return: The step of this TestExecutionOperationResult.
        :rtype: int
        """
        return self._step

    @step.setter
    def step(self, step):
        """
        Sets the step of this TestExecutionOperationResult.
        The step number to indicate the order in which the operation was performed

        :param step: The step of this TestExecutionOperationResult.
        :type: int
        """
        
        self._step = step

    @property
    def name(self):
        """
        Gets the name of this TestExecutionOperationResult.
        Name of the operation performed

        :return: The name of this TestExecutionOperationResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TestExecutionOperationResult.
        Name of the operation performed

        :param name: The name of this TestExecutionOperationResult.
        :type: str
        """
        
        self._name = name

    @property
    def success(self):
        """
        Gets the success of this TestExecutionOperationResult.
        Indicated whether or not the operation was successful

        :return: The success of this TestExecutionOperationResult.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this TestExecutionOperationResult.
        Indicated whether or not the operation was successful

        :param success: The success of this TestExecutionOperationResult.
        :type: bool
        """
        
        self._success = success

    @property
    def result(self):
        """
        Gets the result of this TestExecutionOperationResult.
        The result of the operation

        :return: The result of this TestExecutionOperationResult.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this TestExecutionOperationResult.
        The result of the operation

        :param result: The result of this TestExecutionOperationResult.
        :type: object
        """
        
        self._result = result

    @property
    def error(self):
        """
        Gets the error of this TestExecutionOperationResult.
        Error that occurred during the operation

        :return: The error of this TestExecutionOperationResult.
        :rtype: ErrorBody
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this TestExecutionOperationResult.
        Error that occurred during the operation

        :param error: The error of this TestExecutionOperationResult.
        :type: ErrorBody
        """
        
        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

