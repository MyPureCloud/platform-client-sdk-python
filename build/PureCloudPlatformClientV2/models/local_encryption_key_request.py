# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LocalEncryptionKeyRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LocalEncryptionKeyRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'config_id': 'str',
            'public_key': 'str',
            'keypair_id': 'str'
        }

        self.attribute_map = {
            'config_id': 'configId',
            'public_key': 'publicKey',
            'keypair_id': 'keypairId'
        }

        self._config_id = None
        self._public_key = None
        self._keypair_id = None

    @property
    def config_id(self):
        """
        Gets the config_id of this LocalEncryptionKeyRequest.
        The local configuration id that contains metadata on private local service

        :return: The config_id of this LocalEncryptionKeyRequest.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """
        Sets the config_id of this LocalEncryptionKeyRequest.
        The local configuration id that contains metadata on private local service

        :param config_id: The config_id of this LocalEncryptionKeyRequest.
        :type: str
        """
        
        self._config_id = config_id

    @property
    def public_key(self):
        """
        Gets the public_key of this LocalEncryptionKeyRequest.
        Base 64 encoded public key, generated by the local service.

        :return: The public_key of this LocalEncryptionKeyRequest.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """
        Sets the public_key of this LocalEncryptionKeyRequest.
        Base 64 encoded public key, generated by the local service.

        :param public_key: The public_key of this LocalEncryptionKeyRequest.
        :type: str
        """
        
        self._public_key = public_key

    @property
    def keypair_id(self):
        """
        Gets the keypair_id of this LocalEncryptionKeyRequest.
        The key pair id from the local service.

        :return: The keypair_id of this LocalEncryptionKeyRequest.
        :rtype: str
        """
        return self._keypair_id

    @keypair_id.setter
    def keypair_id(self, keypair_id):
        """
        Sets the keypair_id of this LocalEncryptionKeyRequest.
        The key pair id from the local service.

        :param keypair_id: The keypair_id of this LocalEncryptionKeyRequest.
        :type: str
        """
        
        self._keypair_id = keypair_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

