# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ViewFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ViewFilter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'media_types': 'list[str]',
            'queue_ids': 'list[str]',
            'skill_ids': 'list[str]',
            'language_ids': 'list[str]',
            'directions': 'list[str]',
            'wrap_up_codes': 'list[str]',
            'dnis_list': 'list[str]',
            'user_ids': 'list[str]',
            'address_tos': 'list[str]',
            'outbound_campaign_ids': 'list[str]',
            'outbound_contact_list_ids': 'list[str]'
        }

        self.attribute_map = {
            'media_types': 'mediaTypes',
            'queue_ids': 'queueIds',
            'skill_ids': 'skillIds',
            'language_ids': 'languageIds',
            'directions': 'directions',
            'wrap_up_codes': 'wrapUpCodes',
            'dnis_list': 'dnisList',
            'user_ids': 'userIds',
            'address_tos': 'addressTos',
            'outbound_campaign_ids': 'outboundCampaignIds',
            'outbound_contact_list_ids': 'outboundContactListIds'
        }

        self._media_types = None
        self._queue_ids = None
        self._skill_ids = None
        self._language_ids = None
        self._directions = None
        self._wrap_up_codes = None
        self._dnis_list = None
        self._user_ids = None
        self._address_tos = None
        self._outbound_campaign_ids = None
        self._outbound_contact_list_ids = None

    @property
    def media_types(self):
        """
        Gets the media_types of this ViewFilter.
        The media types used to filter the data export request

        :return: The media_types of this ViewFilter.
        :rtype: list[str]
        """
        return self._media_types

    @media_types.setter
    def media_types(self, media_types):
        """
        Sets the media_types of this ViewFilter.
        The media types used to filter the data export request

        :param media_types: The media_types of this ViewFilter.
        :type: list[str]
        """
        
        self._media_types = media_types

    @property
    def queue_ids(self):
        """
        Gets the queue_ids of this ViewFilter.
        The queue ids used to filter the data export request

        :return: The queue_ids of this ViewFilter.
        :rtype: list[str]
        """
        return self._queue_ids

    @queue_ids.setter
    def queue_ids(self, queue_ids):
        """
        Sets the queue_ids of this ViewFilter.
        The queue ids used to filter the data export request

        :param queue_ids: The queue_ids of this ViewFilter.
        :type: list[str]
        """
        
        self._queue_ids = queue_ids

    @property
    def skill_ids(self):
        """
        Gets the skill_ids of this ViewFilter.
        The skill ids used to filter the data export request

        :return: The skill_ids of this ViewFilter.
        :rtype: list[str]
        """
        return self._skill_ids

    @skill_ids.setter
    def skill_ids(self, skill_ids):
        """
        Sets the skill_ids of this ViewFilter.
        The skill ids used to filter the data export request

        :param skill_ids: The skill_ids of this ViewFilter.
        :type: list[str]
        """
        
        self._skill_ids = skill_ids

    @property
    def language_ids(self):
        """
        Gets the language_ids of this ViewFilter.
        The language ids used to filter the data export request

        :return: The language_ids of this ViewFilter.
        :rtype: list[str]
        """
        return self._language_ids

    @language_ids.setter
    def language_ids(self, language_ids):
        """
        Sets the language_ids of this ViewFilter.
        The language ids used to filter the data export request

        :param language_ids: The language_ids of this ViewFilter.
        :type: list[str]
        """
        
        self._language_ids = language_ids

    @property
    def directions(self):
        """
        Gets the directions of this ViewFilter.
        The directions used to filter the data export request

        :return: The directions of this ViewFilter.
        :rtype: list[str]
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """
        Sets the directions of this ViewFilter.
        The directions used to filter the data export request

        :param directions: The directions of this ViewFilter.
        :type: list[str]
        """
        
        self._directions = directions

    @property
    def wrap_up_codes(self):
        """
        Gets the wrap_up_codes of this ViewFilter.
        The wrap up codes used to filter the data export request

        :return: The wrap_up_codes of this ViewFilter.
        :rtype: list[str]
        """
        return self._wrap_up_codes

    @wrap_up_codes.setter
    def wrap_up_codes(self, wrap_up_codes):
        """
        Sets the wrap_up_codes of this ViewFilter.
        The wrap up codes used to filter the data export request

        :param wrap_up_codes: The wrap_up_codes of this ViewFilter.
        :type: list[str]
        """
        
        self._wrap_up_codes = wrap_up_codes

    @property
    def dnis_list(self):
        """
        Gets the dnis_list of this ViewFilter.
        The dnis list used to filter the data export request

        :return: The dnis_list of this ViewFilter.
        :rtype: list[str]
        """
        return self._dnis_list

    @dnis_list.setter
    def dnis_list(self, dnis_list):
        """
        Sets the dnis_list of this ViewFilter.
        The dnis list used to filter the data export request

        :param dnis_list: The dnis_list of this ViewFilter.
        :type: list[str]
        """
        
        self._dnis_list = dnis_list

    @property
    def user_ids(self):
        """
        Gets the user_ids of this ViewFilter.
        The user ids used to filter the data export request

        :return: The user_ids of this ViewFilter.
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """
        Sets the user_ids of this ViewFilter.
        The user ids used to filter the data export request

        :param user_ids: The user_ids of this ViewFilter.
        :type: list[str]
        """
        
        self._user_ids = user_ids

    @property
    def address_tos(self):
        """
        Gets the address_tos of this ViewFilter.
        The address To values used to filter the data export request

        :return: The address_tos of this ViewFilter.
        :rtype: list[str]
        """
        return self._address_tos

    @address_tos.setter
    def address_tos(self, address_tos):
        """
        Sets the address_tos of this ViewFilter.
        The address To values used to filter the data export request

        :param address_tos: The address_tos of this ViewFilter.
        :type: list[str]
        """
        
        self._address_tos = address_tos

    @property
    def outbound_campaign_ids(self):
        """
        Gets the outbound_campaign_ids of this ViewFilter.
        The outbound campaign ids used to filter the data export request

        :return: The outbound_campaign_ids of this ViewFilter.
        :rtype: list[str]
        """
        return self._outbound_campaign_ids

    @outbound_campaign_ids.setter
    def outbound_campaign_ids(self, outbound_campaign_ids):
        """
        Sets the outbound_campaign_ids of this ViewFilter.
        The outbound campaign ids used to filter the data export request

        :param outbound_campaign_ids: The outbound_campaign_ids of this ViewFilter.
        :type: list[str]
        """
        
        self._outbound_campaign_ids = outbound_campaign_ids

    @property
    def outbound_contact_list_ids(self):
        """
        Gets the outbound_contact_list_ids of this ViewFilter.
        The outbound contact list ids used to filter the data export request

        :return: The outbound_contact_list_ids of this ViewFilter.
        :rtype: list[str]
        """
        return self._outbound_contact_list_ids

    @outbound_contact_list_ids.setter
    def outbound_contact_list_ids(self, outbound_contact_list_ids):
        """
        Sets the outbound_contact_list_ids of this ViewFilter.
        The outbound contact list ids used to filter the data export request

        :param outbound_contact_list_ids: The outbound_contact_list_ids of this ViewFilter.
        :type: list[str]
        """
        
        self._outbound_contact_list_ids = outbound_contact_list_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

