# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

class FileUploadMode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FileUploadMode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file_types': 'list[str]',
            'max_file_size_kb': 'int'
        }

        self.attribute_map = {
            'file_types': 'fileTypes',
            'max_file_size_kb': 'maxFileSizeKB'
        }

        self._file_types = None
        self._max_file_size_kb = None

    @property
    def file_types(self):
        """
        Gets the file_types of this FileUploadMode.
        A list of supported content types for uploading files

        :return: The file_types of this FileUploadMode.
        :rtype: list[str]
        """
        return self._file_types

    @file_types.setter
    def file_types(self, file_types):
        """
        Sets the file_types of this FileUploadMode.
        A list of supported content types for uploading files

        :param file_types: The file_types of this FileUploadMode.
        :type: list[str]
        """
        
        self._file_types = file_types

    @property
    def max_file_size_kb(self):
        """
        Gets the max_file_size_kb of this FileUploadMode.
        The maximum file size for file uploads in kilobytes. Default is 10240 (10 MB)

        :return: The max_file_size_kb of this FileUploadMode.
        :rtype: int
        """
        return self._max_file_size_kb

    @max_file_size_kb.setter
    def max_file_size_kb(self, max_file_size_kb):
        """
        Sets the max_file_size_kb of this FileUploadMode.
        The maximum file size for file uploads in kilobytes. Default is 10240 (10 MB)

        :param max_file_size_kb: The max_file_size_kb of this FileUploadMode.
        :type: int
        """
        
        self._max_file_size_kb = max_file_size_kb

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

