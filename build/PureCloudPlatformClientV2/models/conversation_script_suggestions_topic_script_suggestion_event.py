# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import ConversationScriptSuggestionsTopicSuggestedIntent
    from . import ConversationScriptSuggestionsTopicSuggestedScript
    from . import ConversationScriptSuggestionsTopicSuggestionContext
    from . import ConversationScriptSuggestionsTopicSuggestionFeedback

class ConversationScriptSuggestionsTopicScriptSuggestionEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ConversationScriptSuggestionsTopicScriptSuggestionEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'event_time': 'datetime',
            'conversation_id': 'str',
            'suggestion_id': 'str',
            'state': 'str',
            'trigger_type': 'str',
            'engagement_type': 'str',
            'context': 'ConversationScriptSuggestionsTopicSuggestionContext',
            'feedback': 'ConversationScriptSuggestionsTopicSuggestionFeedback',
            'script': 'ConversationScriptSuggestionsTopicSuggestedScript',
            'active_intent': 'ConversationScriptSuggestionsTopicSuggestedIntent'
        }

        self.attribute_map = {
            'event_time': 'eventTime',
            'conversation_id': 'conversationId',
            'suggestion_id': 'suggestionId',
            'state': 'state',
            'trigger_type': 'triggerType',
            'engagement_type': 'engagementType',
            'context': 'context',
            'feedback': 'feedback',
            'script': 'script',
            'active_intent': 'activeIntent'
        }

        self._event_time = None
        self._conversation_id = None
        self._suggestion_id = None
        self._state = None
        self._trigger_type = None
        self._engagement_type = None
        self._context = None
        self._feedback = None
        self._script = None
        self._active_intent = None

    @property
    def event_time(self) -> datetime:
        """
        Gets the event_time of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The event_time of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time: datetime) -> None:
        """
        Sets the event_time of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param event_time: The event_time of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: datetime
        """
        

        self._event_time = event_time

    @property
    def conversation_id(self) -> str:
        """
        Gets the conversation_id of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The conversation_id of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id: str) -> None:
        """
        Sets the conversation_id of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param conversation_id: The conversation_id of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: str
        """
        

        self._conversation_id = conversation_id

    @property
    def suggestion_id(self) -> str:
        """
        Gets the suggestion_id of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The suggestion_id of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: str
        """
        return self._suggestion_id

    @suggestion_id.setter
    def suggestion_id(self, suggestion_id: str) -> None:
        """
        Sets the suggestion_id of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param suggestion_id: The suggestion_id of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: str
        """
        

        self._suggestion_id = suggestion_id

    @property
    def state(self) -> str:
        """
        Gets the state of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The state of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str) -> None:
        """
        Sets the state of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param state: The state of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: str
        """
        if isinstance(state, int):
            state = str(state)
        allowed_values = ["Unknown", "Suggested", "Accepted", "Dismissed", "Failed", "Rated"]
        if state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for state -> " + state)
            self._state = "outdated_sdk_version"
        else:
            self._state = state

    @property
    def trigger_type(self) -> str:
        """
        Gets the trigger_type of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The trigger_type of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type: str) -> None:
        """
        Sets the trigger_type of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param trigger_type: The trigger_type of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: str
        """
        if isinstance(trigger_type, int):
            trigger_type = str(trigger_type)
        allowed_values = ["Unknown", "Fallback", "ConversationStart", "ConversationTransfer", "ConversationEnd", "Intent"]
        if trigger_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for trigger_type -> " + trigger_type)
            self._trigger_type = "outdated_sdk_version"
        else:
            self._trigger_type = trigger_type

    @property
    def engagement_type(self) -> str:
        """
        Gets the engagement_type of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The engagement_type of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: str
        """
        return self._engagement_type

    @engagement_type.setter
    def engagement_type(self, engagement_type: str) -> None:
        """
        Sets the engagement_type of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param engagement_type: The engagement_type of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: str
        """
        if isinstance(engagement_type, int):
            engagement_type = str(engagement_type)
        allowed_values = ["Unknown", "Dismissed", "Copied", "Opened", "Feedback"]
        if engagement_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for engagement_type -> " + engagement_type)
            self._engagement_type = "outdated_sdk_version"
        else:
            self._engagement_type = engagement_type

    @property
    def context(self) -> 'ConversationScriptSuggestionsTopicSuggestionContext':
        """
        Gets the context of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The context of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: ConversationScriptSuggestionsTopicSuggestionContext
        """
        return self._context

    @context.setter
    def context(self, context: 'ConversationScriptSuggestionsTopicSuggestionContext') -> None:
        """
        Sets the context of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param context: The context of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: ConversationScriptSuggestionsTopicSuggestionContext
        """
        

        self._context = context

    @property
    def feedback(self) -> 'ConversationScriptSuggestionsTopicSuggestionFeedback':
        """
        Gets the feedback of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The feedback of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: ConversationScriptSuggestionsTopicSuggestionFeedback
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback: 'ConversationScriptSuggestionsTopicSuggestionFeedback') -> None:
        """
        Sets the feedback of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param feedback: The feedback of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: ConversationScriptSuggestionsTopicSuggestionFeedback
        """
        

        self._feedback = feedback

    @property
    def script(self) -> 'ConversationScriptSuggestionsTopicSuggestedScript':
        """
        Gets the script of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The script of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: ConversationScriptSuggestionsTopicSuggestedScript
        """
        return self._script

    @script.setter
    def script(self, script: 'ConversationScriptSuggestionsTopicSuggestedScript') -> None:
        """
        Sets the script of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param script: The script of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: ConversationScriptSuggestionsTopicSuggestedScript
        """
        

        self._script = script

    @property
    def active_intent(self) -> 'ConversationScriptSuggestionsTopicSuggestedIntent':
        """
        Gets the active_intent of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :return: The active_intent of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :rtype: ConversationScriptSuggestionsTopicSuggestedIntent
        """
        return self._active_intent

    @active_intent.setter
    def active_intent(self, active_intent: 'ConversationScriptSuggestionsTopicSuggestedIntent') -> None:
        """
        Sets the active_intent of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.


        :param active_intent: The active_intent of this ConversationScriptSuggestionsTopicScriptSuggestionEvent.
        :type: ConversationScriptSuggestionsTopicSuggestedIntent
        """
        

        self._active_intent = active_intent

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

