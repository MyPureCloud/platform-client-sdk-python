# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class IntradayDataUpdateNotificationForecastDataPerInterval(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IntradayDataUpdateNotificationForecastDataPerInterval - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'offered': 'float',
            'average_talk_time_seconds': 'float',
            'average_after_call_work_seconds': 'float'
        }

        self.attribute_map = {
            'offered': 'offered',
            'average_talk_time_seconds': 'averageTalkTimeSeconds',
            'average_after_call_work_seconds': 'averageAfterCallWorkSeconds'
        }

        self._offered = None
        self._average_talk_time_seconds = None
        self._average_after_call_work_seconds = None

    @property
    def offered(self):
        """
        Gets the offered of this IntradayDataUpdateNotificationForecastDataPerInterval.


        :return: The offered of this IntradayDataUpdateNotificationForecastDataPerInterval.
        :rtype: float
        """
        return self._offered

    @offered.setter
    def offered(self, offered):
        """
        Sets the offered of this IntradayDataUpdateNotificationForecastDataPerInterval.


        :param offered: The offered of this IntradayDataUpdateNotificationForecastDataPerInterval.
        :type: float
        """
        
        self._offered = offered

    @property
    def average_talk_time_seconds(self):
        """
        Gets the average_talk_time_seconds of this IntradayDataUpdateNotificationForecastDataPerInterval.


        :return: The average_talk_time_seconds of this IntradayDataUpdateNotificationForecastDataPerInterval.
        :rtype: float
        """
        return self._average_talk_time_seconds

    @average_talk_time_seconds.setter
    def average_talk_time_seconds(self, average_talk_time_seconds):
        """
        Sets the average_talk_time_seconds of this IntradayDataUpdateNotificationForecastDataPerInterval.


        :param average_talk_time_seconds: The average_talk_time_seconds of this IntradayDataUpdateNotificationForecastDataPerInterval.
        :type: float
        """
        
        self._average_talk_time_seconds = average_talk_time_seconds

    @property
    def average_after_call_work_seconds(self):
        """
        Gets the average_after_call_work_seconds of this IntradayDataUpdateNotificationForecastDataPerInterval.


        :return: The average_after_call_work_seconds of this IntradayDataUpdateNotificationForecastDataPerInterval.
        :rtype: float
        """
        return self._average_after_call_work_seconds

    @average_after_call_work_seconds.setter
    def average_after_call_work_seconds(self, average_after_call_work_seconds):
        """
        Sets the average_after_call_work_seconds of this IntradayDataUpdateNotificationForecastDataPerInterval.


        :param average_after_call_work_seconds: The average_after_call_work_seconds of this IntradayDataUpdateNotificationForecastDataPerInterval.
        :type: float
        """
        
        self._average_after_call_work_seconds = average_after_call_work_seconds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

