# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class PatchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PatchRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'schemas': 'list[str]',
            'id': 'str',
            'external_id': 'str',
            'operations': 'list[PatchOperation]',
            'meta': 'Meta'
        }

        self.attribute_map = {
            'schemas': 'schemas',
            'id': 'id',
            'external_id': 'externalId',
            'operations': 'Operations',
            'meta': 'meta'
        }

        self._schemas = None
        self._id = None
        self._external_id = None
        self._operations = None
        self._meta = None

    @property
    def schemas(self):
        """
        Gets the schemas of this PatchRequest.


        :return: The schemas of this PatchRequest.
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """
        Sets the schemas of this PatchRequest.


        :param schemas: The schemas of this PatchRequest.
        :type: list[str]
        """
        
        self._schemas = schemas

    @property
    def id(self):
        """
        Gets the id of this PatchRequest.


        :return: The id of this PatchRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PatchRequest.


        :param id: The id of this PatchRequest.
        :type: str
        """
        
        self._id = id

    @property
    def external_id(self):
        """
        Gets the external_id of this PatchRequest.


        :return: The external_id of this PatchRequest.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this PatchRequest.


        :param external_id: The external_id of this PatchRequest.
        :type: str
        """
        
        self._external_id = external_id

    @property
    def operations(self):
        """
        Gets the operations of this PatchRequest.


        :return: The operations of this PatchRequest.
        :rtype: list[PatchOperation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """
        Sets the operations of this PatchRequest.


        :param operations: The operations of this PatchRequest.
        :type: list[PatchOperation]
        """
        
        self._operations = operations

    @property
    def meta(self):
        """
        Gets the meta of this PatchRequest.


        :return: The meta of this PatchRequest.
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """
        Sets the meta of this PatchRequest.


        :param meta: The meta of this PatchRequest.
        :type: Meta
        """
        
        self._meta = meta

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

