# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import ConversationKnowledgeSearchSuggestionsTopicKnowledgeAnswer

class ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'uri': 'str',
            'snippets': 'list[str]',
            'confidence': 'float',
            'metadata': 'dict(str, str)',
            'search_id': 'str',
            'document_id': 'str',
            'version_id': 'str',
            'variation_ids': 'list[str]',
            'knowledge_answer': 'ConversationKnowledgeSearchSuggestionsTopicKnowledgeAnswer'
        }

        self.attribute_map = {
            'title': 'title',
            'uri': 'uri',
            'snippets': 'snippets',
            'confidence': 'confidence',
            'metadata': 'metadata',
            'search_id': 'searchId',
            'document_id': 'documentId',
            'version_id': 'versionId',
            'variation_ids': 'variationIds',
            'knowledge_answer': 'knowledgeAnswer'
        }

        self._title = None
        self._uri = None
        self._snippets = None
        self._confidence = None
        self._metadata = None
        self._search_id = None
        self._document_id = None
        self._version_id = None
        self._variation_ids = None
        self._knowledge_answer = None

    @property
    def title(self) -> str:
        """
        Gets the title of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The title of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str) -> None:
        """
        Sets the title of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param title: The title of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: str
        """
        

        self._title = title

    @property
    def uri(self) -> str:
        """
        Gets the uri of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The uri of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str) -> None:
        """
        Sets the uri of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param uri: The uri of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: str
        """
        

        self._uri = uri

    @property
    def snippets(self) -> List[str]:
        """
        Gets the snippets of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The snippets of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: list[str]
        """
        return self._snippets

    @snippets.setter
    def snippets(self, snippets: List[str]) -> None:
        """
        Sets the snippets of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param snippets: The snippets of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: list[str]
        """
        

        self._snippets = snippets

    @property
    def confidence(self) -> float:
        """
        Gets the confidence of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The confidence of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: float) -> None:
        """
        Sets the confidence of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param confidence: The confidence of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: float
        """
        

        self._confidence = confidence

    @property
    def metadata(self) -> Dict[str, str]:
        """
        Gets the metadata of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The metadata of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]) -> None:
        """
        Sets the metadata of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param metadata: The metadata of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: dict(str, str)
        """
        

        self._metadata = metadata

    @property
    def search_id(self) -> str:
        """
        Gets the search_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The search_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: str
        """
        return self._search_id

    @search_id.setter
    def search_id(self, search_id: str) -> None:
        """
        Sets the search_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param search_id: The search_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: str
        """
        

        self._search_id = search_id

    @property
    def document_id(self) -> str:
        """
        Gets the document_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The document_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id: str) -> None:
        """
        Sets the document_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param document_id: The document_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: str
        """
        

        self._document_id = document_id

    @property
    def version_id(self) -> str:
        """
        Gets the version_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The version_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id: str) -> None:
        """
        Sets the version_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param version_id: The version_id of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: str
        """
        

        self._version_id = version_id

    @property
    def variation_ids(self) -> List[str]:
        """
        Gets the variation_ids of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The variation_ids of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: list[str]
        """
        return self._variation_ids

    @variation_ids.setter
    def variation_ids(self, variation_ids: List[str]) -> None:
        """
        Sets the variation_ids of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param variation_ids: The variation_ids of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: list[str]
        """
        

        self._variation_ids = variation_ids

    @property
    def knowledge_answer(self) -> 'ConversationKnowledgeSearchSuggestionsTopicKnowledgeAnswer':
        """
        Gets the knowledge_answer of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :return: The knowledge_answer of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :rtype: ConversationKnowledgeSearchSuggestionsTopicKnowledgeAnswer
        """
        return self._knowledge_answer

    @knowledge_answer.setter
    def knowledge_answer(self, knowledge_answer: 'ConversationKnowledgeSearchSuggestionsTopicKnowledgeAnswer') -> None:
        """
        Sets the knowledge_answer of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.


        :param knowledge_answer: The knowledge_answer of this ConversationKnowledgeSearchSuggestionsTopicSuggestedSearchResult.
        :type: ConversationKnowledgeSearchSuggestionsTopicKnowledgeAnswer
        """
        

        self._knowledge_answer = knowledge_answer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

