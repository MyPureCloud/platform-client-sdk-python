# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import AgentCountRange
    from . import ManagementUnitReference

class BidGroupWorkPlanResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        BidGroupWorkPlanResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'management_unit': 'ManagementUnitReference',
            'override_agent_count': 'int',
            'suggested_agent_count': 'int',
            'agent_count_range': 'AgentCountRange',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'management_unit': 'managementUnit',
            'override_agent_count': 'overrideAgentCount',
            'suggested_agent_count': 'suggestedAgentCount',
            'agent_count_range': 'agentCountRange',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._management_unit = None
        self._override_agent_count = None
        self._suggested_agent_count = None
        self._agent_count_range = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this BidGroupWorkPlanResponse.
        The globally unique identifier for the object.

        :return: The id of this BidGroupWorkPlanResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this BidGroupWorkPlanResponse.
        The globally unique identifier for the object.

        :param id: The id of this BidGroupWorkPlanResponse.
        :type: str
        """
        

        self._id = id

    @property
    def management_unit(self) -> 'ManagementUnitReference':
        """
        Gets the management_unit of this BidGroupWorkPlanResponse.
        The management unit to which this work plan belongs.  Nullable in some routes

        :return: The management_unit of this BidGroupWorkPlanResponse.
        :rtype: ManagementUnitReference
        """
        return self._management_unit

    @management_unit.setter
    def management_unit(self, management_unit: 'ManagementUnitReference') -> None:
        """
        Sets the management_unit of this BidGroupWorkPlanResponse.
        The management unit to which this work plan belongs.  Nullable in some routes

        :param management_unit: The management_unit of this BidGroupWorkPlanResponse.
        :type: ManagementUnitReference
        """
        

        self._management_unit = management_unit

    @property
    def override_agent_count(self) -> int:
        """
        Gets the override_agent_count of this BidGroupWorkPlanResponse.
        The modified agent count for this work plan

        :return: The override_agent_count of this BidGroupWorkPlanResponse.
        :rtype: int
        """
        return self._override_agent_count

    @override_agent_count.setter
    def override_agent_count(self, override_agent_count: int) -> None:
        """
        Sets the override_agent_count of this BidGroupWorkPlanResponse.
        The modified agent count for this work plan

        :param override_agent_count: The override_agent_count of this BidGroupWorkPlanResponse.
        :type: int
        """
        

        self._override_agent_count = override_agent_count

    @property
    def suggested_agent_count(self) -> int:
        """
        Gets the suggested_agent_count of this BidGroupWorkPlanResponse.
        The number of agents needed for this work plan to produce the optimal schedule

        :return: The suggested_agent_count of this BidGroupWorkPlanResponse.
        :rtype: int
        """
        return self._suggested_agent_count

    @suggested_agent_count.setter
    def suggested_agent_count(self, suggested_agent_count: int) -> None:
        """
        Sets the suggested_agent_count of this BidGroupWorkPlanResponse.
        The number of agents needed for this work plan to produce the optimal schedule

        :param suggested_agent_count: The suggested_agent_count of this BidGroupWorkPlanResponse.
        :type: int
        """
        

        self._suggested_agent_count = suggested_agent_count

    @property
    def agent_count_range(self) -> 'AgentCountRange':
        """
        Gets the agent_count_range of this BidGroupWorkPlanResponse.
        The range of agent slot count per work plan. The suggested slot count must be in agent count range

        :return: The agent_count_range of this BidGroupWorkPlanResponse.
        :rtype: AgentCountRange
        """
        return self._agent_count_range

    @agent_count_range.setter
    def agent_count_range(self, agent_count_range: 'AgentCountRange') -> None:
        """
        Sets the agent_count_range of this BidGroupWorkPlanResponse.
        The range of agent slot count per work plan. The suggested slot count must be in agent count range

        :param agent_count_range: The agent_count_range of this BidGroupWorkPlanResponse.
        :type: AgentCountRange
        """
        

        self._agent_count_range = agent_count_range

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this BidGroupWorkPlanResponse.
        The URI for this object

        :return: The self_uri of this BidGroupWorkPlanResponse.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this BidGroupWorkPlanResponse.
        The URI for this object

        :param self_uri: The self_uri of this BidGroupWorkPlanResponse.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

