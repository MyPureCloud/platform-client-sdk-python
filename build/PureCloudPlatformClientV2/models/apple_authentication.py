# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class AppleAuthentication(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        AppleAuthentication - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'oauth_client_id': 'str',
            'oauth_client_secret': 'str',
            'oauth_token_url': 'str',
            'oauth_scope': 'str'
        }

        self.attribute_map = {
            'oauth_client_id': 'oauthClientId',
            'oauth_client_secret': 'oauthClientSecret',
            'oauth_token_url': 'oauthTokenUrl',
            'oauth_scope': 'oauthScope'
        }

        self._oauth_client_id = None
        self._oauth_client_secret = None
        self._oauth_token_url = None
        self._oauth_scope = None

    @property
    def oauth_client_id(self) -> str:
        """
        Gets the oauth_client_id of this AppleAuthentication.
        The Apple Messages for Business OAuth client id.

        :return: The oauth_client_id of this AppleAuthentication.
        :rtype: str
        """
        return self._oauth_client_id

    @oauth_client_id.setter
    def oauth_client_id(self, oauth_client_id: str) -> None:
        """
        Sets the oauth_client_id of this AppleAuthentication.
        The Apple Messages for Business OAuth client id.

        :param oauth_client_id: The oauth_client_id of this AppleAuthentication.
        :type: str
        """
        

        self._oauth_client_id = oauth_client_id

    @property
    def oauth_client_secret(self) -> str:
        """
        Gets the oauth_client_secret of this AppleAuthentication.
        The Apple Messages for Business OAuth client secret.

        :return: The oauth_client_secret of this AppleAuthentication.
        :rtype: str
        """
        return self._oauth_client_secret

    @oauth_client_secret.setter
    def oauth_client_secret(self, oauth_client_secret: str) -> None:
        """
        Sets the oauth_client_secret of this AppleAuthentication.
        The Apple Messages for Business OAuth client secret.

        :param oauth_client_secret: The oauth_client_secret of this AppleAuthentication.
        :type: str
        """
        

        self._oauth_client_secret = oauth_client_secret

    @property
    def oauth_token_url(self) -> str:
        """
        Gets the oauth_token_url of this AppleAuthentication.
        The Apple Messages for Business token URL.

        :return: The oauth_token_url of this AppleAuthentication.
        :rtype: str
        """
        return self._oauth_token_url

    @oauth_token_url.setter
    def oauth_token_url(self, oauth_token_url: str) -> None:
        """
        Sets the oauth_token_url of this AppleAuthentication.
        The Apple Messages for Business token URL.

        :param oauth_token_url: The oauth_token_url of this AppleAuthentication.
        :type: str
        """
        

        self._oauth_token_url = oauth_token_url

    @property
    def oauth_scope(self) -> str:
        """
        Gets the oauth_scope of this AppleAuthentication.
        The Apple Messages for Business OAuth scope.

        :return: The oauth_scope of this AppleAuthentication.
        :rtype: str
        """
        return self._oauth_scope

    @oauth_scope.setter
    def oauth_scope(self, oauth_scope: str) -> None:
        """
        Sets the oauth_scope of this AppleAuthentication.
        The Apple Messages for Business OAuth scope.

        :param oauth_scope: The oauth_scope of this AppleAuthentication.
        :type: str
        """
        

        self._oauth_scope = oauth_scope

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

