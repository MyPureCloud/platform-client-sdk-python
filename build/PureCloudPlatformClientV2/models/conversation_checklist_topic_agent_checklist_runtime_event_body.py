# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import ConversationChecklistTopicAgentChecklistActivationTrigger
    from . import ConversationChecklistTopicAgentChecklistItemState
    from . import ConversationChecklistTopicConversationContextTurnInfo

class ConversationChecklistTopicAgentChecklistRuntimeEventBody(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ConversationChecklistTopicAgentChecklistRuntimeEventBody - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'evaluation_start_date': 'datetime',
            'evaluation_last_modified_date': 'datetime',
            'evaluation_finalized_date': 'datetime',
            'evaluation_finalized_with_acw_date': 'datetime',
            'conversation_id': 'str',
            'communication_id': 'str',
            'agent_checklist_id': 'str',
            'name': 'str',
            'language': 'str',
            'agent_id': 'str',
            'participant_id': 'str',
            'queue_id': 'str',
            'assistant_id': 'str',
            'media_type': 'str',
            'direction': 'str',
            'status': 'str',
            'exit_reason': 'str',
            'activation_triggers': 'list[ConversationChecklistTopicAgentChecklistActivationTrigger]',
            'conversation_context': 'list[ConversationChecklistTopicConversationContextTurnInfo]',
            'agent_checklist_items': 'list[ConversationChecklistTopicAgentChecklistItemState]'
        }

        self.attribute_map = {
            'evaluation_start_date': 'evaluationStartDate',
            'evaluation_last_modified_date': 'evaluationLastModifiedDate',
            'evaluation_finalized_date': 'evaluationFinalizedDate',
            'evaluation_finalized_with_acw_date': 'evaluationFinalizedWithAcwDate',
            'conversation_id': 'conversationId',
            'communication_id': 'communicationId',
            'agent_checklist_id': 'agentChecklistId',
            'name': 'name',
            'language': 'language',
            'agent_id': 'agentId',
            'participant_id': 'participantId',
            'queue_id': 'queueId',
            'assistant_id': 'assistantId',
            'media_type': 'mediaType',
            'direction': 'direction',
            'status': 'status',
            'exit_reason': 'exitReason',
            'activation_triggers': 'activationTriggers',
            'conversation_context': 'conversationContext',
            'agent_checklist_items': 'agentChecklistItems'
        }

        self._evaluation_start_date = None
        self._evaluation_last_modified_date = None
        self._evaluation_finalized_date = None
        self._evaluation_finalized_with_acw_date = None
        self._conversation_id = None
        self._communication_id = None
        self._agent_checklist_id = None
        self._name = None
        self._language = None
        self._agent_id = None
        self._participant_id = None
        self._queue_id = None
        self._assistant_id = None
        self._media_type = None
        self._direction = None
        self._status = None
        self._exit_reason = None
        self._activation_triggers = None
        self._conversation_context = None
        self._agent_checklist_items = None

    @property
    def evaluation_start_date(self) -> datetime:
        """
        Gets the evaluation_start_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The evaluation_start_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: datetime
        """
        return self._evaluation_start_date

    @evaluation_start_date.setter
    def evaluation_start_date(self, evaluation_start_date: datetime) -> None:
        """
        Sets the evaluation_start_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param evaluation_start_date: The evaluation_start_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: datetime
        """
        

        self._evaluation_start_date = evaluation_start_date

    @property
    def evaluation_last_modified_date(self) -> datetime:
        """
        Gets the evaluation_last_modified_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The evaluation_last_modified_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: datetime
        """
        return self._evaluation_last_modified_date

    @evaluation_last_modified_date.setter
    def evaluation_last_modified_date(self, evaluation_last_modified_date: datetime) -> None:
        """
        Sets the evaluation_last_modified_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param evaluation_last_modified_date: The evaluation_last_modified_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: datetime
        """
        

        self._evaluation_last_modified_date = evaluation_last_modified_date

    @property
    def evaluation_finalized_date(self) -> datetime:
        """
        Gets the evaluation_finalized_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The evaluation_finalized_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: datetime
        """
        return self._evaluation_finalized_date

    @evaluation_finalized_date.setter
    def evaluation_finalized_date(self, evaluation_finalized_date: datetime) -> None:
        """
        Sets the evaluation_finalized_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param evaluation_finalized_date: The evaluation_finalized_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: datetime
        """
        

        self._evaluation_finalized_date = evaluation_finalized_date

    @property
    def evaluation_finalized_with_acw_date(self) -> datetime:
        """
        Gets the evaluation_finalized_with_acw_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The evaluation_finalized_with_acw_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: datetime
        """
        return self._evaluation_finalized_with_acw_date

    @evaluation_finalized_with_acw_date.setter
    def evaluation_finalized_with_acw_date(self, evaluation_finalized_with_acw_date: datetime) -> None:
        """
        Sets the evaluation_finalized_with_acw_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param evaluation_finalized_with_acw_date: The evaluation_finalized_with_acw_date of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: datetime
        """
        

        self._evaluation_finalized_with_acw_date = evaluation_finalized_with_acw_date

    @property
    def conversation_id(self) -> str:
        """
        Gets the conversation_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The conversation_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id: str) -> None:
        """
        Sets the conversation_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param conversation_id: The conversation_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._conversation_id = conversation_id

    @property
    def communication_id(self) -> str:
        """
        Gets the communication_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The communication_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._communication_id

    @communication_id.setter
    def communication_id(self, communication_id: str) -> None:
        """
        Sets the communication_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param communication_id: The communication_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._communication_id = communication_id

    @property
    def agent_checklist_id(self) -> str:
        """
        Gets the agent_checklist_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The agent_checklist_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._agent_checklist_id

    @agent_checklist_id.setter
    def agent_checklist_id(self, agent_checklist_id: str) -> None:
        """
        Sets the agent_checklist_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param agent_checklist_id: The agent_checklist_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._agent_checklist_id = agent_checklist_id

    @property
    def name(self) -> str:
        """
        Gets the name of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The name of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param name: The name of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._name = name

    @property
    def language(self) -> str:
        """
        Gets the language of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The language of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str) -> None:
        """
        Sets the language of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param language: The language of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._language = language

    @property
    def agent_id(self) -> str:
        """
        Gets the agent_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The agent_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id: str) -> None:
        """
        Sets the agent_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param agent_id: The agent_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._agent_id = agent_id

    @property
    def participant_id(self) -> str:
        """
        Gets the participant_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The participant_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id: str) -> None:
        """
        Sets the participant_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param participant_id: The participant_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._participant_id = participant_id

    @property
    def queue_id(self) -> str:
        """
        Gets the queue_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The queue_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id: str) -> None:
        """
        Sets the queue_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param queue_id: The queue_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._queue_id = queue_id

    @property
    def assistant_id(self) -> str:
        """
        Gets the assistant_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The assistant_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id: str) -> None:
        """
        Sets the assistant_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param assistant_id: The assistant_id of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._assistant_id = assistant_id

    @property
    def media_type(self) -> str:
        """
        Gets the media_type of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The media_type of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str) -> None:
        """
        Sets the media_type of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param media_type: The media_type of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        if isinstance(media_type, int):
            media_type = str(media_type)
        allowed_values = ["Unknown", "Voice", "Message", "Email"]
        if media_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for media_type -> " + media_type)
            self._media_type = "outdated_sdk_version"
        else:
            self._media_type = media_type

    @property
    def direction(self) -> str:
        """
        Gets the direction of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The direction of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str) -> None:
        """
        Sets the direction of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param direction: The direction of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        if isinstance(direction, int):
            direction = str(direction)
        allowed_values = ["Unknown", "Inbound", "Outbound"]
        if direction.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for direction -> " + direction)
            self._direction = "outdated_sdk_version"
        else:
            self._direction = direction

    @property
    def status(self) -> str:
        """
        Gets the status of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The status of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str) -> None:
        """
        Sets the status of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param status: The status of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        if isinstance(status, int):
            status = str(status)
        allowed_values = ["Unknown", "EvaluationStarted", "EvaluationInProgress", "EvaluationFinalized", "EvaluationFinalizedWithAcw"]
        if status.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for status -> " + status)
            self._status = "outdated_sdk_version"
        else:
            self._status = status

    @property
    def exit_reason(self) -> str:
        """
        Gets the exit_reason of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The exit_reason of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: str
        """
        return self._exit_reason

    @exit_reason.setter
    def exit_reason(self, exit_reason: str) -> None:
        """
        Sets the exit_reason of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param exit_reason: The exit_reason of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: str
        """
        

        self._exit_reason = exit_reason

    @property
    def activation_triggers(self) -> List['ConversationChecklistTopicAgentChecklistActivationTrigger']:
        """
        Gets the activation_triggers of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The activation_triggers of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: list[ConversationChecklistTopicAgentChecklistActivationTrigger]
        """
        return self._activation_triggers

    @activation_triggers.setter
    def activation_triggers(self, activation_triggers: List['ConversationChecklistTopicAgentChecklistActivationTrigger']) -> None:
        """
        Sets the activation_triggers of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param activation_triggers: The activation_triggers of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: list[ConversationChecklistTopicAgentChecklistActivationTrigger]
        """
        

        self._activation_triggers = activation_triggers

    @property
    def conversation_context(self) -> List['ConversationChecklistTopicConversationContextTurnInfo']:
        """
        Gets the conversation_context of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The conversation_context of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: list[ConversationChecklistTopicConversationContextTurnInfo]
        """
        return self._conversation_context

    @conversation_context.setter
    def conversation_context(self, conversation_context: List['ConversationChecklistTopicConversationContextTurnInfo']) -> None:
        """
        Sets the conversation_context of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param conversation_context: The conversation_context of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: list[ConversationChecklistTopicConversationContextTurnInfo]
        """
        

        self._conversation_context = conversation_context

    @property
    def agent_checklist_items(self) -> List['ConversationChecklistTopicAgentChecklistItemState']:
        """
        Gets the agent_checklist_items of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :return: The agent_checklist_items of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :rtype: list[ConversationChecklistTopicAgentChecklistItemState]
        """
        return self._agent_checklist_items

    @agent_checklist_items.setter
    def agent_checklist_items(self, agent_checklist_items: List['ConversationChecklistTopicAgentChecklistItemState']) -> None:
        """
        Sets the agent_checklist_items of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.


        :param agent_checklist_items: The agent_checklist_items of this ConversationChecklistTopicAgentChecklistRuntimeEventBody.
        :type: list[ConversationChecklistTopicAgentChecklistItemState]
        """
        

        self._agent_checklist_items = agent_checklist_items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

