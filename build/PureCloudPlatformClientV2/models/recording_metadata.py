# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import Annotation

class RecordingMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        RecordingMetadata - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'conversation_id': 'str',
            'path': 'str',
            'start_time': 'str',
            'end_time': 'str',
            'media': 'str',
            'annotations': 'list[Annotation]',
            'file_state': 'str',
            'restore_expiration_time': 'datetime',
            'archive_date': 'datetime',
            'archive_medium': 'str',
            'delete_date': 'datetime',
            'export_date': 'datetime',
            'exported_date': 'datetime',
            'max_allowed_restorations_for_org': 'int',
            'remaining_restorations_allowed_for_org': 'int',
            'session_id': 'str',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'conversation_id': 'conversationId',
            'path': 'path',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'media': 'media',
            'annotations': 'annotations',
            'file_state': 'fileState',
            'restore_expiration_time': 'restoreExpirationTime',
            'archive_date': 'archiveDate',
            'archive_medium': 'archiveMedium',
            'delete_date': 'deleteDate',
            'export_date': 'exportDate',
            'exported_date': 'exportedDate',
            'max_allowed_restorations_for_org': 'maxAllowedRestorationsForOrg',
            'remaining_restorations_allowed_for_org': 'remainingRestorationsAllowedForOrg',
            'session_id': 'sessionId',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._conversation_id = None
        self._path = None
        self._start_time = None
        self._end_time = None
        self._media = None
        self._annotations = None
        self._file_state = None
        self._restore_expiration_time = None
        self._archive_date = None
        self._archive_medium = None
        self._delete_date = None
        self._export_date = None
        self._exported_date = None
        self._max_allowed_restorations_for_org = None
        self._remaining_restorations_allowed_for_org = None
        self._session_id = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this RecordingMetadata.
        The globally unique identifier for the object.

        :return: The id of this RecordingMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this RecordingMetadata.
        The globally unique identifier for the object.

        :param id: The id of this RecordingMetadata.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this RecordingMetadata.


        :return: The name of this RecordingMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this RecordingMetadata.


        :param name: The name of this RecordingMetadata.
        :type: str
        """
        

        self._name = name

    @property
    def conversation_id(self) -> str:
        """
        Gets the conversation_id of this RecordingMetadata.


        :return: The conversation_id of this RecordingMetadata.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id: str) -> None:
        """
        Sets the conversation_id of this RecordingMetadata.


        :param conversation_id: The conversation_id of this RecordingMetadata.
        :type: str
        """
        

        self._conversation_id = conversation_id

    @property
    def path(self) -> str:
        """
        Gets the path of this RecordingMetadata.


        :return: The path of this RecordingMetadata.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str) -> None:
        """
        Sets the path of this RecordingMetadata.


        :param path: The path of this RecordingMetadata.
        :type: str
        """
        

        self._path = path

    @property
    def start_time(self) -> str:
        """
        Gets the start_time of this RecordingMetadata.
        The start time of the recording for screen recordings. Null for other types.

        :return: The start_time of this RecordingMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str) -> None:
        """
        Sets the start_time of this RecordingMetadata.
        The start time of the recording for screen recordings. Null for other types.

        :param start_time: The start_time of this RecordingMetadata.
        :type: str
        """
        

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """
        Gets the end_time of this RecordingMetadata.


        :return: The end_time of this RecordingMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str) -> None:
        """
        Sets the end_time of this RecordingMetadata.


        :param end_time: The end_time of this RecordingMetadata.
        :type: str
        """
        

        self._end_time = end_time

    @property
    def media(self) -> str:
        """
        Gets the media of this RecordingMetadata.
        The type of media that the recording is. At the moment that could be audio, chat, email, or message.

        :return: The media of this RecordingMetadata.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media: str) -> None:
        """
        Sets the media of this RecordingMetadata.
        The type of media that the recording is. At the moment that could be audio, chat, email, or message.

        :param media: The media of this RecordingMetadata.
        :type: str
        """
        

        self._media = media

    @property
    def annotations(self) -> List['Annotation']:
        """
        Gets the annotations of this RecordingMetadata.
        Annotations that belong to the recording. Populated when recording filestate is AVAILABLE.

        :return: The annotations of this RecordingMetadata.
        :rtype: list[Annotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations: List['Annotation']) -> None:
        """
        Sets the annotations of this RecordingMetadata.
        Annotations that belong to the recording. Populated when recording filestate is AVAILABLE.

        :param annotations: The annotations of this RecordingMetadata.
        :type: list[Annotation]
        """
        

        self._annotations = annotations

    @property
    def file_state(self) -> str:
        """
        Gets the file_state of this RecordingMetadata.
        Represents the current file state for a recording. Examples: Uploading, Archived, etc

        :return: The file_state of this RecordingMetadata.
        :rtype: str
        """
        return self._file_state

    @file_state.setter
    def file_state(self, file_state: str) -> None:
        """
        Sets the file_state of this RecordingMetadata.
        Represents the current file state for a recording. Examples: Uploading, Archived, etc

        :param file_state: The file_state of this RecordingMetadata.
        :type: str
        """
        if isinstance(file_state, int):
            file_state = str(file_state)
        allowed_values = ["ARCHIVED", "AVAILABLE", "DELETED", "RESTORED", "RESTORING", "UPLOADING", "ERROR"]
        if file_state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for file_state -> " + file_state)
            self._file_state = "outdated_sdk_version"
        else:
            self._file_state = file_state

    @property
    def restore_expiration_time(self) -> datetime:
        """
        Gets the restore_expiration_time of this RecordingMetadata.
        The amount of time a restored recording will remain restored before being archived again. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The restore_expiration_time of this RecordingMetadata.
        :rtype: datetime
        """
        return self._restore_expiration_time

    @restore_expiration_time.setter
    def restore_expiration_time(self, restore_expiration_time: datetime) -> None:
        """
        Sets the restore_expiration_time of this RecordingMetadata.
        The amount of time a restored recording will remain restored before being archived again. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param restore_expiration_time: The restore_expiration_time of this RecordingMetadata.
        :type: datetime
        """
        

        self._restore_expiration_time = restore_expiration_time

    @property
    def archive_date(self) -> datetime:
        """
        Gets the archive_date of this RecordingMetadata.
        The date the recording will be archived. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The archive_date of this RecordingMetadata.
        :rtype: datetime
        """
        return self._archive_date

    @archive_date.setter
    def archive_date(self, archive_date: datetime) -> None:
        """
        Sets the archive_date of this RecordingMetadata.
        The date the recording will be archived. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param archive_date: The archive_date of this RecordingMetadata.
        :type: datetime
        """
        

        self._archive_date = archive_date

    @property
    def archive_medium(self) -> str:
        """
        Gets the archive_medium of this RecordingMetadata.
        The type of archive medium used. Example: CloudArchive

        :return: The archive_medium of this RecordingMetadata.
        :rtype: str
        """
        return self._archive_medium

    @archive_medium.setter
    def archive_medium(self, archive_medium: str) -> None:
        """
        Sets the archive_medium of this RecordingMetadata.
        The type of archive medium used. Example: CloudArchive

        :param archive_medium: The archive_medium of this RecordingMetadata.
        :type: str
        """
        if isinstance(archive_medium, int):
            archive_medium = str(archive_medium)
        allowed_values = ["CLOUDARCHIVE"]
        if archive_medium.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for archive_medium -> " + archive_medium)
            self._archive_medium = "outdated_sdk_version"
        else:
            self._archive_medium = archive_medium

    @property
    def delete_date(self) -> datetime:
        """
        Gets the delete_date of this RecordingMetadata.
        The date the recording will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The delete_date of this RecordingMetadata.
        :rtype: datetime
        """
        return self._delete_date

    @delete_date.setter
    def delete_date(self, delete_date: datetime) -> None:
        """
        Sets the delete_date of this RecordingMetadata.
        The date the recording will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param delete_date: The delete_date of this RecordingMetadata.
        :type: datetime
        """
        

        self._delete_date = delete_date

    @property
    def export_date(self) -> datetime:
        """
        Gets the export_date of this RecordingMetadata.
        The date the recording will be exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The export_date of this RecordingMetadata.
        :rtype: datetime
        """
        return self._export_date

    @export_date.setter
    def export_date(self, export_date: datetime) -> None:
        """
        Sets the export_date of this RecordingMetadata.
        The date the recording will be exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param export_date: The export_date of this RecordingMetadata.
        :type: datetime
        """
        

        self._export_date = export_date

    @property
    def exported_date(self) -> datetime:
        """
        Gets the exported_date of this RecordingMetadata.
        The date the recording was exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The exported_date of this RecordingMetadata.
        :rtype: datetime
        """
        return self._exported_date

    @exported_date.setter
    def exported_date(self, exported_date: datetime) -> None:
        """
        Sets the exported_date of this RecordingMetadata.
        The date the recording was exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param exported_date: The exported_date of this RecordingMetadata.
        :type: datetime
        """
        

        self._exported_date = exported_date

    @property
    def max_allowed_restorations_for_org(self) -> int:
        """
        Gets the max_allowed_restorations_for_org of this RecordingMetadata.
        How many archive restorations the organization is allowed to have.

        :return: The max_allowed_restorations_for_org of this RecordingMetadata.
        :rtype: int
        """
        return self._max_allowed_restorations_for_org

    @max_allowed_restorations_for_org.setter
    def max_allowed_restorations_for_org(self, max_allowed_restorations_for_org: int) -> None:
        """
        Sets the max_allowed_restorations_for_org of this RecordingMetadata.
        How many archive restorations the organization is allowed to have.

        :param max_allowed_restorations_for_org: The max_allowed_restorations_for_org of this RecordingMetadata.
        :type: int
        """
        

        self._max_allowed_restorations_for_org = max_allowed_restorations_for_org

    @property
    def remaining_restorations_allowed_for_org(self) -> int:
        """
        Gets the remaining_restorations_allowed_for_org of this RecordingMetadata.
        The remaining archive restorations the organization has.

        :return: The remaining_restorations_allowed_for_org of this RecordingMetadata.
        :rtype: int
        """
        return self._remaining_restorations_allowed_for_org

    @remaining_restorations_allowed_for_org.setter
    def remaining_restorations_allowed_for_org(self, remaining_restorations_allowed_for_org: int) -> None:
        """
        Sets the remaining_restorations_allowed_for_org of this RecordingMetadata.
        The remaining archive restorations the organization has.

        :param remaining_restorations_allowed_for_org: The remaining_restorations_allowed_for_org of this RecordingMetadata.
        :type: int
        """
        

        self._remaining_restorations_allowed_for_org = remaining_restorations_allowed_for_org

    @property
    def session_id(self) -> str:
        """
        Gets the session_id of this RecordingMetadata.
        The session id represents an external resource id, such as email, call, chat, etc

        :return: The session_id of this RecordingMetadata.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str) -> None:
        """
        Sets the session_id of this RecordingMetadata.
        The session id represents an external resource id, such as email, call, chat, etc

        :param session_id: The session_id of this RecordingMetadata.
        :type: str
        """
        

        self._session_id = session_id

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this RecordingMetadata.
        The URI for this object

        :return: The self_uri of this RecordingMetadata.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this RecordingMetadata.
        The URI for this object

        :param self_uri: The self_uri of this RecordingMetadata.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

