# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class GrammarLanguageFileMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        GrammarLanguageFileMetadata - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file_name': 'str',
            'file_size_bytes': 'int',
            'date_uploaded': 'datetime',
            'file_type': 'str'
        }

        self.attribute_map = {
            'file_name': 'fileName',
            'file_size_bytes': 'fileSizeBytes',
            'date_uploaded': 'dateUploaded',
            'file_type': 'fileType'
        }

        self._file_name = None
        self._file_size_bytes = None
        self._date_uploaded = None
        self._file_type = None

    @property
    def file_name(self) -> str:
        """
        Gets the file_name of this GrammarLanguageFileMetadata.
        The name of the file as defined by the user

        :return: The file_name of this GrammarLanguageFileMetadata.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name: str) -> None:
        """
        Sets the file_name of this GrammarLanguageFileMetadata.
        The name of the file as defined by the user

        :param file_name: The file_name of this GrammarLanguageFileMetadata.
        :type: str
        """
        

        self._file_name = file_name

    @property
    def file_size_bytes(self) -> int:
        """
        Gets the file_size_bytes of this GrammarLanguageFileMetadata.
        The size of the file in bytes

        :return: The file_size_bytes of this GrammarLanguageFileMetadata.
        :rtype: int
        """
        return self._file_size_bytes

    @file_size_bytes.setter
    def file_size_bytes(self, file_size_bytes: int) -> None:
        """
        Sets the file_size_bytes of this GrammarLanguageFileMetadata.
        The size of the file in bytes

        :param file_size_bytes: The file_size_bytes of this GrammarLanguageFileMetadata.
        :type: int
        """
        

        self._file_size_bytes = file_size_bytes

    @property
    def date_uploaded(self) -> datetime:
        """
        Gets the date_uploaded of this GrammarLanguageFileMetadata.
        The date the file was uploaded. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_uploaded of this GrammarLanguageFileMetadata.
        :rtype: datetime
        """
        return self._date_uploaded

    @date_uploaded.setter
    def date_uploaded(self, date_uploaded: datetime) -> None:
        """
        Sets the date_uploaded of this GrammarLanguageFileMetadata.
        The date the file was uploaded. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_uploaded: The date_uploaded of this GrammarLanguageFileMetadata.
        :type: datetime
        """
        

        self._date_uploaded = date_uploaded

    @property
    def file_type(self) -> str:
        """
        Gets the file_type of this GrammarLanguageFileMetadata.
        The extension of the file

        :return: The file_type of this GrammarLanguageFileMetadata.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type: str) -> None:
        """
        Sets the file_type of this GrammarLanguageFileMetadata.
        The extension of the file

        :param file_type: The file_type of this GrammarLanguageFileMetadata.
        :type: str
        """
        if isinstance(file_type, int):
            file_type = str(file_type)
        allowed_values = ["Gram", "Grxml"]
        if file_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for file_type -> " + file_type)
            self._file_type = "outdated_sdk_version"
        else:
            self._file_type = file_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

