# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class ConversationIntentSuggestionsTopicSuggestionContext(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        ConversationIntentSuggestionsTopicSuggestionContext - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'queue_id': 'str',
            'media_type': 'str',
            'user_id': 'str',
            'external_contact_id': 'str',
            'assistant_id': 'str',
            'utterance_id': 'str',
            'message_id': 'str',
            'query_statement': 'str'
        }

        self.attribute_map = {
            'queue_id': 'queueId',
            'media_type': 'mediaType',
            'user_id': 'userId',
            'external_contact_id': 'externalContactId',
            'assistant_id': 'assistantId',
            'utterance_id': 'utteranceId',
            'message_id': 'messageId',
            'query_statement': 'queryStatement'
        }

        self._queue_id = None
        self._media_type = None
        self._user_id = None
        self._external_contact_id = None
        self._assistant_id = None
        self._utterance_id = None
        self._message_id = None
        self._query_statement = None

    @property
    def queue_id(self) -> str:
        """
        Gets the queue_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :return: The queue_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id: str) -> None:
        """
        Sets the queue_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :param queue_id: The queue_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :type: str
        """
        

        self._queue_id = queue_id

    @property
    def media_type(self) -> str:
        """
        Gets the media_type of this ConversationIntentSuggestionsTopicSuggestionContext.


        :return: The media_type of this ConversationIntentSuggestionsTopicSuggestionContext.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str) -> None:
        """
        Sets the media_type of this ConversationIntentSuggestionsTopicSuggestionContext.


        :param media_type: The media_type of this ConversationIntentSuggestionsTopicSuggestionContext.
        :type: str
        """
        if isinstance(media_type, int):
            media_type = str(media_type)
        allowed_values = ["UNKNOWN", "VOICE", "MESSAGE", "EMAIL"]
        if media_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for media_type -> " + media_type)
            self._media_type = "outdated_sdk_version"
        else:
            self._media_type = media_type

    @property
    def user_id(self) -> str:
        """
        Gets the user_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :return: The user_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str) -> None:
        """
        Sets the user_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :param user_id: The user_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :type: str
        """
        

        self._user_id = user_id

    @property
    def external_contact_id(self) -> str:
        """
        Gets the external_contact_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :return: The external_contact_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :rtype: str
        """
        return self._external_contact_id

    @external_contact_id.setter
    def external_contact_id(self, external_contact_id: str) -> None:
        """
        Sets the external_contact_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :param external_contact_id: The external_contact_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :type: str
        """
        

        self._external_contact_id = external_contact_id

    @property
    def assistant_id(self) -> str:
        """
        Gets the assistant_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :return: The assistant_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id: str) -> None:
        """
        Sets the assistant_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :param assistant_id: The assistant_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :type: str
        """
        

        self._assistant_id = assistant_id

    @property
    def utterance_id(self) -> str:
        """
        Gets the utterance_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :return: The utterance_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :rtype: str
        """
        return self._utterance_id

    @utterance_id.setter
    def utterance_id(self, utterance_id: str) -> None:
        """
        Sets the utterance_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :param utterance_id: The utterance_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :type: str
        """
        

        self._utterance_id = utterance_id

    @property
    def message_id(self) -> str:
        """
        Gets the message_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :return: The message_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id: str) -> None:
        """
        Sets the message_id of this ConversationIntentSuggestionsTopicSuggestionContext.


        :param message_id: The message_id of this ConversationIntentSuggestionsTopicSuggestionContext.
        :type: str
        """
        

        self._message_id = message_id

    @property
    def query_statement(self) -> str:
        """
        Gets the query_statement of this ConversationIntentSuggestionsTopicSuggestionContext.


        :return: The query_statement of this ConversationIntentSuggestionsTopicSuggestionContext.
        :rtype: str
        """
        return self._query_statement

    @query_statement.setter
    def query_statement(self, query_statement: str) -> None:
        """
        Sets the query_statement of this ConversationIntentSuggestionsTopicSuggestionContext.


        :param query_statement: The query_statement of this ConversationIntentSuggestionsTopicSuggestionContext.
        :type: str
        """
        

        self._query_statement = query_statement

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

