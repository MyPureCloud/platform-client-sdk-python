# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ServiceGoalGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ServiceGoalGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'goals': 'ServiceGoalGroupGoals',
            'queue_media_associations': 'list[QueueMediaAssociation]',
            'metadata': 'WfmVersionedEntityMetadata',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'goals': 'goals',
            'queue_media_associations': 'queueMediaAssociations',
            'metadata': 'metadata',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._goals = None
        self._queue_media_associations = None
        self._metadata = None
        self._self_uri = None

    @property
    def id(self):
        """
        Gets the id of this ServiceGoalGroup.
        The globally unique identifier for the object.

        :return: The id of this ServiceGoalGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServiceGoalGroup.
        The globally unique identifier for the object.

        :param id: The id of this ServiceGoalGroup.
        :type: str
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ServiceGoalGroup.


        :return: The name of this ServiceGoalGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ServiceGoalGroup.


        :param name: The name of this ServiceGoalGroup.
        :type: str
        """
        
        self._name = name

    @property
    def goals(self):
        """
        Gets the goals of this ServiceGoalGroup.
        Goals defined for this service goal group

        :return: The goals of this ServiceGoalGroup.
        :rtype: ServiceGoalGroupGoals
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """
        Sets the goals of this ServiceGoalGroup.
        Goals defined for this service goal group

        :param goals: The goals of this ServiceGoalGroup.
        :type: ServiceGoalGroupGoals
        """
        
        self._goals = goals

    @property
    def queue_media_associations(self):
        """
        Gets the queue_media_associations of this ServiceGoalGroup.
        List of queues and media types from that queue to associate with this service goal group

        :return: The queue_media_associations of this ServiceGoalGroup.
        :rtype: list[QueueMediaAssociation]
        """
        return self._queue_media_associations

    @queue_media_associations.setter
    def queue_media_associations(self, queue_media_associations):
        """
        Sets the queue_media_associations of this ServiceGoalGroup.
        List of queues and media types from that queue to associate with this service goal group

        :param queue_media_associations: The queue_media_associations of this ServiceGoalGroup.
        :type: list[QueueMediaAssociation]
        """
        
        self._queue_media_associations = queue_media_associations

    @property
    def metadata(self):
        """
        Gets the metadata of this ServiceGoalGroup.
        Version metadata for the list of service goal groups for the associated management unit

        :return: The metadata of this ServiceGoalGroup.
        :rtype: WfmVersionedEntityMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this ServiceGoalGroup.
        Version metadata for the list of service goal groups for the associated management unit

        :param metadata: The metadata of this ServiceGoalGroup.
        :type: WfmVersionedEntityMetadata
        """
        
        self._metadata = metadata

    @property
    def self_uri(self):
        """
        Gets the self_uri of this ServiceGoalGroup.
        The URI for this object

        :return: The self_uri of this ServiceGoalGroup.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri):
        """
        Sets the self_uri of this ServiceGoalGroup.
        The URI for this object

        :param self_uri: The self_uri of this ServiceGoalGroup.
        :type: str
        """
        
        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

