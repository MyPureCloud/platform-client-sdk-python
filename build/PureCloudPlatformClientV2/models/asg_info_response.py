# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AsgInfoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AsgInfoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'site': 'Site',
            'ami': 'str',
            'edge_version': 'str',
            'instance_info': 'list[InstanceInfo]',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'site': 'site',
            'ami': 'ami',
            'edge_version': 'edgeVersion',
            'instance_info': 'instanceInfo',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._site = None
        self._ami = None
        self._edge_version = None
        self._instance_info = None
        self._self_uri = None

    @property
    def id(self):
        """
        Gets the id of this AsgInfoResponse.
        The globally unique identifier for the object.

        :return: The id of this AsgInfoResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AsgInfoResponse.
        The globally unique identifier for the object.

        :param id: The id of this AsgInfoResponse.
        :type: str
        """
        
        self._id = id

    @property
    def site(self):
        """
        Gets the site of this AsgInfoResponse.
        The site that the asg belongs to.

        :return: The site of this AsgInfoResponse.
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this AsgInfoResponse.
        The site that the asg belongs to.

        :param site: The site of this AsgInfoResponse.
        :type: Site
        """
        
        self._site = site

    @property
    def ami(self):
        """
        Gets the ami of this AsgInfoResponse.
        The ami ami of the asg.

        :return: The ami of this AsgInfoResponse.
        :rtype: str
        """
        return self._ami

    @ami.setter
    def ami(self, ami):
        """
        Sets the ami of this AsgInfoResponse.
        The ami ami of the asg.

        :param ami: The ami of this AsgInfoResponse.
        :type: str
        """
        
        self._ami = ami

    @property
    def edge_version(self):
        """
        Gets the edge_version of this AsgInfoResponse.
        The software ami of the edges in the asg.

        :return: The edge_version of this AsgInfoResponse.
        :rtype: str
        """
        return self._edge_version

    @edge_version.setter
    def edge_version(self, edge_version):
        """
        Sets the edge_version of this AsgInfoResponse.
        The software ami of the edges in the asg.

        :param edge_version: The edge_version of this AsgInfoResponse.
        :type: str
        """
        
        self._edge_version = edge_version

    @property
    def instance_info(self):
        """
        Gets the instance_info of this AsgInfoResponse.
        List of instances and their information that live in the ASG.

        :return: The instance_info of this AsgInfoResponse.
        :rtype: list[InstanceInfo]
        """
        return self._instance_info

    @instance_info.setter
    def instance_info(self, instance_info):
        """
        Sets the instance_info of this AsgInfoResponse.
        List of instances and their information that live in the ASG.

        :param instance_info: The instance_info of this AsgInfoResponse.
        :type: list[InstanceInfo]
        """
        
        self._instance_info = instance_info

    @property
    def self_uri(self):
        """
        Gets the self_uri of this AsgInfoResponse.
        The URI for this object

        :return: The self_uri of this AsgInfoResponse.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri):
        """
        Sets the self_uri of this AsgInfoResponse.
        The URI for this object

        :param self_uri: The self_uri of this AsgInfoResponse.
        :type: str
        """
        
        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

