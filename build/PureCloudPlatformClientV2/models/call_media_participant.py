# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import ConversationRoutingData
    from . import Disposition
    from . import DomainEntityRef
    from . import ErrorInfo
    from . import FaxStatus
    from . import JourneyContext
    from . import Wrapup

class CallMediaParticipant(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        CallMediaParticipant - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'address': 'str',
            'start_time': 'datetime',
            'connected_time': 'datetime',
            'end_time': 'datetime',
            'start_hold_time': 'datetime',
            'purpose': 'str',
            'state': 'str',
            'direction': 'str',
            'disconnect_type': 'str',
            'held': 'bool',
            'wrapup_required': 'bool',
            'wrapup_prompt': 'str',
            'media_roles': 'list[str]',
            'user': 'DomainEntityRef',
            'queue': 'DomainEntityRef',
            'team': 'DomainEntityRef',
            'attributes': 'dict(str, str)',
            'error_info': 'ErrorInfo',
            'script': 'DomainEntityRef',
            'wrapup_timeout_ms': 'int',
            'wrapup_skipped': 'bool',
            'alerting_timeout_ms': 'int',
            'provider': 'str',
            'external_contact': 'DomainEntityRef',
            'external_organization': 'DomainEntityRef',
            'wrapup': 'Wrapup',
            'peer': 'str',
            'flagged_reason': 'str',
            'journey_context': 'JourneyContext',
            'conversation_routing_data': 'ConversationRoutingData',
            'start_acw_time': 'datetime',
            'end_acw_time': 'datetime',
            'muted': 'bool',
            'confined': 'bool',
            'recording': 'bool',
            'recording_state': 'str',
            'group': 'DomainEntityRef',
            'ani': 'str',
            'dnis': 'str',
            'document_id': 'str',
            'fax_status': 'FaxStatus',
            'monitored_participant_id': 'str',
            'coached_participant_id': 'str',
            'barged_participant_id': 'str',
            'consult_participant_id': 'str',
            'uui_data': 'str',
            'barged_time': 'datetime',
            'secure_pause': 'bool',
            'disposition': 'Disposition'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'address': 'address',
            'start_time': 'startTime',
            'connected_time': 'connectedTime',
            'end_time': 'endTime',
            'start_hold_time': 'startHoldTime',
            'purpose': 'purpose',
            'state': 'state',
            'direction': 'direction',
            'disconnect_type': 'disconnectType',
            'held': 'held',
            'wrapup_required': 'wrapupRequired',
            'wrapup_prompt': 'wrapupPrompt',
            'media_roles': 'mediaRoles',
            'user': 'user',
            'queue': 'queue',
            'team': 'team',
            'attributes': 'attributes',
            'error_info': 'errorInfo',
            'script': 'script',
            'wrapup_timeout_ms': 'wrapupTimeoutMs',
            'wrapup_skipped': 'wrapupSkipped',
            'alerting_timeout_ms': 'alertingTimeoutMs',
            'provider': 'provider',
            'external_contact': 'externalContact',
            'external_organization': 'externalOrganization',
            'wrapup': 'wrapup',
            'peer': 'peer',
            'flagged_reason': 'flaggedReason',
            'journey_context': 'journeyContext',
            'conversation_routing_data': 'conversationRoutingData',
            'start_acw_time': 'startAcwTime',
            'end_acw_time': 'endAcwTime',
            'muted': 'muted',
            'confined': 'confined',
            'recording': 'recording',
            'recording_state': 'recordingState',
            'group': 'group',
            'ani': 'ani',
            'dnis': 'dnis',
            'document_id': 'documentId',
            'fax_status': 'faxStatus',
            'monitored_participant_id': 'monitoredParticipantId',
            'coached_participant_id': 'coachedParticipantId',
            'barged_participant_id': 'bargedParticipantId',
            'consult_participant_id': 'consultParticipantId',
            'uui_data': 'uuiData',
            'barged_time': 'bargedTime',
            'secure_pause': 'securePause',
            'disposition': 'disposition'
        }

        self._id = None
        self._name = None
        self._address = None
        self._start_time = None
        self._connected_time = None
        self._end_time = None
        self._start_hold_time = None
        self._purpose = None
        self._state = None
        self._direction = None
        self._disconnect_type = None
        self._held = None
        self._wrapup_required = None
        self._wrapup_prompt = None
        self._media_roles = None
        self._user = None
        self._queue = None
        self._team = None
        self._attributes = None
        self._error_info = None
        self._script = None
        self._wrapup_timeout_ms = None
        self._wrapup_skipped = None
        self._alerting_timeout_ms = None
        self._provider = None
        self._external_contact = None
        self._external_organization = None
        self._wrapup = None
        self._peer = None
        self._flagged_reason = None
        self._journey_context = None
        self._conversation_routing_data = None
        self._start_acw_time = None
        self._end_acw_time = None
        self._muted = None
        self._confined = None
        self._recording = None
        self._recording_state = None
        self._group = None
        self._ani = None
        self._dnis = None
        self._document_id = None
        self._fax_status = None
        self._monitored_participant_id = None
        self._coached_participant_id = None
        self._barged_participant_id = None
        self._consult_participant_id = None
        self._uui_data = None
        self._barged_time = None
        self._secure_pause = None
        self._disposition = None

    @property
    def id(self) -> str:
        """
        Gets the id of this CallMediaParticipant.
        The unique participant ID.

        :return: The id of this CallMediaParticipant.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this CallMediaParticipant.
        The unique participant ID.

        :param id: The id of this CallMediaParticipant.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this CallMediaParticipant.
        The display friendly name of the participant.

        :return: The name of this CallMediaParticipant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this CallMediaParticipant.
        The display friendly name of the participant.

        :param name: The name of this CallMediaParticipant.
        :type: str
        """
        

        self._name = name

    @property
    def address(self) -> str:
        """
        Gets the address of this CallMediaParticipant.
        The participant address.

        :return: The address of this CallMediaParticipant.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str) -> None:
        """
        Sets the address of this CallMediaParticipant.
        The participant address.

        :param address: The address of this CallMediaParticipant.
        :type: str
        """
        

        self._address = address

    @property
    def start_time(self) -> datetime:
        """
        Gets the start_time of this CallMediaParticipant.
        The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The start_time of this CallMediaParticipant.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime) -> None:
        """
        Sets the start_time of this CallMediaParticipant.
        The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param start_time: The start_time of this CallMediaParticipant.
        :type: datetime
        """
        

        self._start_time = start_time

    @property
    def connected_time(self) -> datetime:
        """
        Gets the connected_time of this CallMediaParticipant.
        The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The connected_time of this CallMediaParticipant.
        :rtype: datetime
        """
        return self._connected_time

    @connected_time.setter
    def connected_time(self, connected_time: datetime) -> None:
        """
        Sets the connected_time of this CallMediaParticipant.
        The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param connected_time: The connected_time of this CallMediaParticipant.
        :type: datetime
        """
        

        self._connected_time = connected_time

    @property
    def end_time(self) -> datetime:
        """
        Gets the end_time of this CallMediaParticipant.
        The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The end_time of this CallMediaParticipant.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime) -> None:
        """
        Sets the end_time of this CallMediaParticipant.
        The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param end_time: The end_time of this CallMediaParticipant.
        :type: datetime
        """
        

        self._end_time = end_time

    @property
    def start_hold_time(self) -> datetime:
        """
        Gets the start_hold_time of this CallMediaParticipant.
        The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The start_hold_time of this CallMediaParticipant.
        :rtype: datetime
        """
        return self._start_hold_time

    @start_hold_time.setter
    def start_hold_time(self, start_hold_time: datetime) -> None:
        """
        Sets the start_hold_time of this CallMediaParticipant.
        The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param start_hold_time: The start_hold_time of this CallMediaParticipant.
        :type: datetime
        """
        

        self._start_hold_time = start_hold_time

    @property
    def purpose(self) -> str:
        """
        Gets the purpose of this CallMediaParticipant.
        The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr

        :return: The purpose of this CallMediaParticipant.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose: str) -> None:
        """
        Sets the purpose of this CallMediaParticipant.
        The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr

        :param purpose: The purpose of this CallMediaParticipant.
        :type: str
        """
        

        self._purpose = purpose

    @property
    def state(self) -> str:
        """
        Gets the state of this CallMediaParticipant.
        The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting

        :return: The state of this CallMediaParticipant.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str) -> None:
        """
        Sets the state of this CallMediaParticipant.
        The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting

        :param state: The state of this CallMediaParticipant.
        :type: str
        """
        if isinstance(state, int):
            state = str(state)
        allowed_values = ["alerting", "dialing", "contacting", "offering", "connected", "disconnected", "terminated", "converting", "uploading", "transmitting", "none"]
        if state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for state -> " + state)
            self._state = "outdated_sdk_version"
        else:
            self._state = state

    @property
    def direction(self) -> str:
        """
        Gets the direction of this CallMediaParticipant.
        The participant's direction.  Values can be: 'inbound' or 'outbound'

        :return: The direction of this CallMediaParticipant.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str) -> None:
        """
        Sets the direction of this CallMediaParticipant.
        The participant's direction.  Values can be: 'inbound' or 'outbound'

        :param direction: The direction of this CallMediaParticipant.
        :type: str
        """
        if isinstance(direction, int):
            direction = str(direction)
        allowed_values = ["inbound", "outbound"]
        if direction.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for direction -> " + direction)
            self._direction = "outdated_sdk_version"
        else:
            self._direction = direction

    @property
    def disconnect_type(self) -> str:
        """
        Gets the disconnect_type of this CallMediaParticipant.
        The reason the participant was disconnected from the conversation.

        :return: The disconnect_type of this CallMediaParticipant.
        :rtype: str
        """
        return self._disconnect_type

    @disconnect_type.setter
    def disconnect_type(self, disconnect_type: str) -> None:
        """
        Sets the disconnect_type of this CallMediaParticipant.
        The reason the participant was disconnected from the conversation.

        :param disconnect_type: The disconnect_type of this CallMediaParticipant.
        :type: str
        """
        if isinstance(disconnect_type, int):
            disconnect_type = str(disconnect_type)
        allowed_values = ["endpoint", "endpoint.donotdisturb", "client", "system", "transfer", "transfer.conference", "transfer.consult", "transfer.donotdisturb", "transfer.forward", "transfer.noanswer", "transfer.notavailable", "transport.failure", "error", "peer", "other", "spam"]
        if disconnect_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for disconnect_type -> " + disconnect_type)
            self._disconnect_type = "outdated_sdk_version"
        else:
            self._disconnect_type = disconnect_type

    @property
    def held(self) -> bool:
        """
        Gets the held of this CallMediaParticipant.
        Value is true when the participant is on hold.

        :return: The held of this CallMediaParticipant.
        :rtype: bool
        """
        return self._held

    @held.setter
    def held(self, held: bool) -> None:
        """
        Sets the held of this CallMediaParticipant.
        Value is true when the participant is on hold.

        :param held: The held of this CallMediaParticipant.
        :type: bool
        """
        

        self._held = held

    @property
    def wrapup_required(self) -> bool:
        """
        Gets the wrapup_required of this CallMediaParticipant.
        Value is true when the participant requires wrap-up.

        :return: The wrapup_required of this CallMediaParticipant.
        :rtype: bool
        """
        return self._wrapup_required

    @wrapup_required.setter
    def wrapup_required(self, wrapup_required: bool) -> None:
        """
        Sets the wrapup_required of this CallMediaParticipant.
        Value is true when the participant requires wrap-up.

        :param wrapup_required: The wrapup_required of this CallMediaParticipant.
        :type: bool
        """
        

        self._wrapup_required = wrapup_required

    @property
    def wrapup_prompt(self) -> str:
        """
        Gets the wrapup_prompt of this CallMediaParticipant.
        The wrap-up prompt indicating the type of wrap-up to be performed.

        :return: The wrapup_prompt of this CallMediaParticipant.
        :rtype: str
        """
        return self._wrapup_prompt

    @wrapup_prompt.setter
    def wrapup_prompt(self, wrapup_prompt: str) -> None:
        """
        Sets the wrapup_prompt of this CallMediaParticipant.
        The wrap-up prompt indicating the type of wrap-up to be performed.

        :param wrapup_prompt: The wrapup_prompt of this CallMediaParticipant.
        :type: str
        """
        

        self._wrapup_prompt = wrapup_prompt

    @property
    def media_roles(self) -> List[str]:
        """
        Gets the media_roles of this CallMediaParticipant.
        List of roles this participant's media has had on the conversation, ie monitor, coach, etc

        :return: The media_roles of this CallMediaParticipant.
        :rtype: list[str]
        """
        return self._media_roles

    @media_roles.setter
    def media_roles(self, media_roles: List[str]) -> None:
        """
        Sets the media_roles of this CallMediaParticipant.
        List of roles this participant's media has had on the conversation, ie monitor, coach, etc

        :param media_roles: The media_roles of this CallMediaParticipant.
        :type: list[str]
        """
        

        self._media_roles = media_roles

    @property
    def user(self) -> 'DomainEntityRef':
        """
        Gets the user of this CallMediaParticipant.
        The PureCloud user for this participant.

        :return: The user of this CallMediaParticipant.
        :rtype: DomainEntityRef
        """
        return self._user

    @user.setter
    def user(self, user: 'DomainEntityRef') -> None:
        """
        Sets the user of this CallMediaParticipant.
        The PureCloud user for this participant.

        :param user: The user of this CallMediaParticipant.
        :type: DomainEntityRef
        """
        

        self._user = user

    @property
    def queue(self) -> 'DomainEntityRef':
        """
        Gets the queue of this CallMediaParticipant.
        The PureCloud queue for this participant.

        :return: The queue of this CallMediaParticipant.
        :rtype: DomainEntityRef
        """
        return self._queue

    @queue.setter
    def queue(self, queue: 'DomainEntityRef') -> None:
        """
        Sets the queue of this CallMediaParticipant.
        The PureCloud queue for this participant.

        :param queue: The queue of this CallMediaParticipant.
        :type: DomainEntityRef
        """
        

        self._queue = queue

    @property
    def team(self) -> 'DomainEntityRef':
        """
        Gets the team of this CallMediaParticipant.
        The PureCloud team for this participant.

        :return: The team of this CallMediaParticipant.
        :rtype: DomainEntityRef
        """
        return self._team

    @team.setter
    def team(self, team: 'DomainEntityRef') -> None:
        """
        Sets the team of this CallMediaParticipant.
        The PureCloud team for this participant.

        :param team: The team of this CallMediaParticipant.
        :type: DomainEntityRef
        """
        

        self._team = team

    @property
    def attributes(self) -> Dict[str, str]:
        """
        Gets the attributes of this CallMediaParticipant.
        A list of ad-hoc attributes for the participant.

        :return: The attributes of this CallMediaParticipant.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: Dict[str, str]) -> None:
        """
        Sets the attributes of this CallMediaParticipant.
        A list of ad-hoc attributes for the participant.

        :param attributes: The attributes of this CallMediaParticipant.
        :type: dict(str, str)
        """
        

        self._attributes = attributes

    @property
    def error_info(self) -> 'ErrorInfo':
        """
        Gets the error_info of this CallMediaParticipant.
        If the conversation ends in error, contains additional error details.

        :return: The error_info of this CallMediaParticipant.
        :rtype: ErrorInfo
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info: 'ErrorInfo') -> None:
        """
        Sets the error_info of this CallMediaParticipant.
        If the conversation ends in error, contains additional error details.

        :param error_info: The error_info of this CallMediaParticipant.
        :type: ErrorInfo
        """
        

        self._error_info = error_info

    @property
    def script(self) -> 'DomainEntityRef':
        """
        Gets the script of this CallMediaParticipant.
        The Engage script that should be used by this participant.

        :return: The script of this CallMediaParticipant.
        :rtype: DomainEntityRef
        """
        return self._script

    @script.setter
    def script(self, script: 'DomainEntityRef') -> None:
        """
        Sets the script of this CallMediaParticipant.
        The Engage script that should be used by this participant.

        :param script: The script of this CallMediaParticipant.
        :type: DomainEntityRef
        """
        

        self._script = script

    @property
    def wrapup_timeout_ms(self) -> int:
        """
        Gets the wrapup_timeout_ms of this CallMediaParticipant.
        The amount of time the participant has to complete wrap-up.

        :return: The wrapup_timeout_ms of this CallMediaParticipant.
        :rtype: int
        """
        return self._wrapup_timeout_ms

    @wrapup_timeout_ms.setter
    def wrapup_timeout_ms(self, wrapup_timeout_ms: int) -> None:
        """
        Sets the wrapup_timeout_ms of this CallMediaParticipant.
        The amount of time the participant has to complete wrap-up.

        :param wrapup_timeout_ms: The wrapup_timeout_ms of this CallMediaParticipant.
        :type: int
        """
        

        self._wrapup_timeout_ms = wrapup_timeout_ms

    @property
    def wrapup_skipped(self) -> bool:
        """
        Gets the wrapup_skipped of this CallMediaParticipant.
        Value is true when the participant has skipped wrap-up.

        :return: The wrapup_skipped of this CallMediaParticipant.
        :rtype: bool
        """
        return self._wrapup_skipped

    @wrapup_skipped.setter
    def wrapup_skipped(self, wrapup_skipped: bool) -> None:
        """
        Sets the wrapup_skipped of this CallMediaParticipant.
        Value is true when the participant has skipped wrap-up.

        :param wrapup_skipped: The wrapup_skipped of this CallMediaParticipant.
        :type: bool
        """
        

        self._wrapup_skipped = wrapup_skipped

    @property
    def alerting_timeout_ms(self) -> int:
        """
        Gets the alerting_timeout_ms of this CallMediaParticipant.
        Specifies how long the agent has to answer an interaction before being marked as not responding.

        :return: The alerting_timeout_ms of this CallMediaParticipant.
        :rtype: int
        """
        return self._alerting_timeout_ms

    @alerting_timeout_ms.setter
    def alerting_timeout_ms(self, alerting_timeout_ms: int) -> None:
        """
        Sets the alerting_timeout_ms of this CallMediaParticipant.
        Specifies how long the agent has to answer an interaction before being marked as not responding.

        :param alerting_timeout_ms: The alerting_timeout_ms of this CallMediaParticipant.
        :type: int
        """
        

        self._alerting_timeout_ms = alerting_timeout_ms

    @property
    def provider(self) -> str:
        """
        Gets the provider of this CallMediaParticipant.
        The source provider for the communication.

        :return: The provider of this CallMediaParticipant.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider: str) -> None:
        """
        Sets the provider of this CallMediaParticipant.
        The source provider for the communication.

        :param provider: The provider of this CallMediaParticipant.
        :type: str
        """
        

        self._provider = provider

    @property
    def external_contact(self) -> 'DomainEntityRef':
        """
        Gets the external_contact of this CallMediaParticipant.
        If this participant represents an external contact, then this will be the reference for the external contact.

        :return: The external_contact of this CallMediaParticipant.
        :rtype: DomainEntityRef
        """
        return self._external_contact

    @external_contact.setter
    def external_contact(self, external_contact: 'DomainEntityRef') -> None:
        """
        Sets the external_contact of this CallMediaParticipant.
        If this participant represents an external contact, then this will be the reference for the external contact.

        :param external_contact: The external_contact of this CallMediaParticipant.
        :type: DomainEntityRef
        """
        

        self._external_contact = external_contact

    @property
    def external_organization(self) -> 'DomainEntityRef':
        """
        Gets the external_organization of this CallMediaParticipant.
        If this participant represents an external org, then this will be the reference for the external org.

        :return: The external_organization of this CallMediaParticipant.
        :rtype: DomainEntityRef
        """
        return self._external_organization

    @external_organization.setter
    def external_organization(self, external_organization: 'DomainEntityRef') -> None:
        """
        Sets the external_organization of this CallMediaParticipant.
        If this participant represents an external org, then this will be the reference for the external org.

        :param external_organization: The external_organization of this CallMediaParticipant.
        :type: DomainEntityRef
        """
        

        self._external_organization = external_organization

    @property
    def wrapup(self) -> 'Wrapup':
        """
        Gets the wrapup of this CallMediaParticipant.
        Wrapup for this participant, if it has been applied.

        :return: The wrapup of this CallMediaParticipant.
        :rtype: Wrapup
        """
        return self._wrapup

    @wrapup.setter
    def wrapup(self, wrapup: 'Wrapup') -> None:
        """
        Sets the wrapup of this CallMediaParticipant.
        Wrapup for this participant, if it has been applied.

        :param wrapup: The wrapup of this CallMediaParticipant.
        :type: Wrapup
        """
        

        self._wrapup = wrapup

    @property
    def peer(self) -> str:
        """
        Gets the peer of this CallMediaParticipant.
        The peer communication corresponding to a matching leg for this communication.

        :return: The peer of this CallMediaParticipant.
        :rtype: str
        """
        return self._peer

    @peer.setter
    def peer(self, peer: str) -> None:
        """
        Sets the peer of this CallMediaParticipant.
        The peer communication corresponding to a matching leg for this communication.

        :param peer: The peer of this CallMediaParticipant.
        :type: str
        """
        

        self._peer = peer

    @property
    def flagged_reason(self) -> str:
        """
        Gets the flagged_reason of this CallMediaParticipant.
        The reason specifying why participant flagged the conversation.

        :return: The flagged_reason of this CallMediaParticipant.
        :rtype: str
        """
        return self._flagged_reason

    @flagged_reason.setter
    def flagged_reason(self, flagged_reason: str) -> None:
        """
        Sets the flagged_reason of this CallMediaParticipant.
        The reason specifying why participant flagged the conversation.

        :param flagged_reason: The flagged_reason of this CallMediaParticipant.
        :type: str
        """
        if isinstance(flagged_reason, int):
            flagged_reason = str(flagged_reason)
        allowed_values = ["general"]
        if flagged_reason.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for flagged_reason -> " + flagged_reason)
            self._flagged_reason = "outdated_sdk_version"
        else:
            self._flagged_reason = flagged_reason

    @property
    def journey_context(self) -> 'JourneyContext':
        """
        Gets the journey_context of this CallMediaParticipant.
        Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context.

        :return: The journey_context of this CallMediaParticipant.
        :rtype: JourneyContext
        """
        return self._journey_context

    @journey_context.setter
    def journey_context(self, journey_context: 'JourneyContext') -> None:
        """
        Sets the journey_context of this CallMediaParticipant.
        Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context.

        :param journey_context: The journey_context of this CallMediaParticipant.
        :type: JourneyContext
        """
        

        self._journey_context = journey_context

    @property
    def conversation_routing_data(self) -> 'ConversationRoutingData':
        """
        Gets the conversation_routing_data of this CallMediaParticipant.
        Information on how a communication should be routed to an agent.

        :return: The conversation_routing_data of this CallMediaParticipant.
        :rtype: ConversationRoutingData
        """
        return self._conversation_routing_data

    @conversation_routing_data.setter
    def conversation_routing_data(self, conversation_routing_data: 'ConversationRoutingData') -> None:
        """
        Sets the conversation_routing_data of this CallMediaParticipant.
        Information on how a communication should be routed to an agent.

        :param conversation_routing_data: The conversation_routing_data of this CallMediaParticipant.
        :type: ConversationRoutingData
        """
        

        self._conversation_routing_data = conversation_routing_data

    @property
    def start_acw_time(self) -> datetime:
        """
        Gets the start_acw_time of this CallMediaParticipant.
        The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The start_acw_time of this CallMediaParticipant.
        :rtype: datetime
        """
        return self._start_acw_time

    @start_acw_time.setter
    def start_acw_time(self, start_acw_time: datetime) -> None:
        """
        Sets the start_acw_time of this CallMediaParticipant.
        The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param start_acw_time: The start_acw_time of this CallMediaParticipant.
        :type: datetime
        """
        

        self._start_acw_time = start_acw_time

    @property
    def end_acw_time(self) -> datetime:
        """
        Gets the end_acw_time of this CallMediaParticipant.
        The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The end_acw_time of this CallMediaParticipant.
        :rtype: datetime
        """
        return self._end_acw_time

    @end_acw_time.setter
    def end_acw_time(self, end_acw_time: datetime) -> None:
        """
        Sets the end_acw_time of this CallMediaParticipant.
        The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param end_acw_time: The end_acw_time of this CallMediaParticipant.
        :type: datetime
        """
        

        self._end_acw_time = end_acw_time

    @property
    def muted(self) -> bool:
        """
        Gets the muted of this CallMediaParticipant.
        Value is true when the call is muted.

        :return: The muted of this CallMediaParticipant.
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted: bool) -> None:
        """
        Sets the muted of this CallMediaParticipant.
        Value is true when the call is muted.

        :param muted: The muted of this CallMediaParticipant.
        :type: bool
        """
        

        self._muted = muted

    @property
    def confined(self) -> bool:
        """
        Gets the confined of this CallMediaParticipant.
        Value is true when the call is confined.

        :return: The confined of this CallMediaParticipant.
        :rtype: bool
        """
        return self._confined

    @confined.setter
    def confined(self, confined: bool) -> None:
        """
        Sets the confined of this CallMediaParticipant.
        Value is true when the call is confined.

        :param confined: The confined of this CallMediaParticipant.
        :type: bool
        """
        

        self._confined = confined

    @property
    def recording(self) -> bool:
        """
        Gets the recording of this CallMediaParticipant.
        Value is true when the call is being recorded.

        :return: The recording of this CallMediaParticipant.
        :rtype: bool
        """
        return self._recording

    @recording.setter
    def recording(self, recording: bool) -> None:
        """
        Sets the recording of this CallMediaParticipant.
        Value is true when the call is being recorded.

        :param recording: The recording of this CallMediaParticipant.
        :type: bool
        """
        

        self._recording = recording

    @property
    def recording_state(self) -> str:
        """
        Gets the recording_state of this CallMediaParticipant.
        The state of the call recording.

        :return: The recording_state of this CallMediaParticipant.
        :rtype: str
        """
        return self._recording_state

    @recording_state.setter
    def recording_state(self, recording_state: str) -> None:
        """
        Sets the recording_state of this CallMediaParticipant.
        The state of the call recording.

        :param recording_state: The recording_state of this CallMediaParticipant.
        :type: str
        """
        if isinstance(recording_state, int):
            recording_state = str(recording_state)
        allowed_values = ["none", "active", "paused"]
        if recording_state.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for recording_state -> " + recording_state)
            self._recording_state = "outdated_sdk_version"
        else:
            self._recording_state = recording_state

    @property
    def group(self) -> 'DomainEntityRef':
        """
        Gets the group of this CallMediaParticipant.
        The group involved in the group ring call.

        :return: The group of this CallMediaParticipant.
        :rtype: DomainEntityRef
        """
        return self._group

    @group.setter
    def group(self, group: 'DomainEntityRef') -> None:
        """
        Sets the group of this CallMediaParticipant.
        The group involved in the group ring call.

        :param group: The group of this CallMediaParticipant.
        :type: DomainEntityRef
        """
        

        self._group = group

    @property
    def ani(self) -> str:
        """
        Gets the ani of this CallMediaParticipant.
        The call ANI.

        :return: The ani of this CallMediaParticipant.
        :rtype: str
        """
        return self._ani

    @ani.setter
    def ani(self, ani: str) -> None:
        """
        Sets the ani of this CallMediaParticipant.
        The call ANI.

        :param ani: The ani of this CallMediaParticipant.
        :type: str
        """
        

        self._ani = ani

    @property
    def dnis(self) -> str:
        """
        Gets the dnis of this CallMediaParticipant.
        The call DNIS.

        :return: The dnis of this CallMediaParticipant.
        :rtype: str
        """
        return self._dnis

    @dnis.setter
    def dnis(self, dnis: str) -> None:
        """
        Sets the dnis of this CallMediaParticipant.
        The call DNIS.

        :param dnis: The dnis of this CallMediaParticipant.
        :type: str
        """
        

        self._dnis = dnis

    @property
    def document_id(self) -> str:
        """
        Gets the document_id of this CallMediaParticipant.
        The ID of the Content Management document if the call is a fax.

        :return: The document_id of this CallMediaParticipant.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id: str) -> None:
        """
        Sets the document_id of this CallMediaParticipant.
        The ID of the Content Management document if the call is a fax.

        :param document_id: The document_id of this CallMediaParticipant.
        :type: str
        """
        

        self._document_id = document_id

    @property
    def fax_status(self) -> 'FaxStatus':
        """
        Gets the fax_status of this CallMediaParticipant.
        Extra fax information if the call is a fax.

        :return: The fax_status of this CallMediaParticipant.
        :rtype: FaxStatus
        """
        return self._fax_status

    @fax_status.setter
    def fax_status(self, fax_status: 'FaxStatus') -> None:
        """
        Sets the fax_status of this CallMediaParticipant.
        Extra fax information if the call is a fax.

        :param fax_status: The fax_status of this CallMediaParticipant.
        :type: FaxStatus
        """
        

        self._fax_status = fax_status

    @property
    def monitored_participant_id(self) -> str:
        """
        Gets the monitored_participant_id of this CallMediaParticipant.
        The ID of the participant being monitored when performing a call monitor.

        :return: The monitored_participant_id of this CallMediaParticipant.
        :rtype: str
        """
        return self._monitored_participant_id

    @monitored_participant_id.setter
    def monitored_participant_id(self, monitored_participant_id: str) -> None:
        """
        Sets the monitored_participant_id of this CallMediaParticipant.
        The ID of the participant being monitored when performing a call monitor.

        :param monitored_participant_id: The monitored_participant_id of this CallMediaParticipant.
        :type: str
        """
        

        self._monitored_participant_id = monitored_participant_id

    @property
    def coached_participant_id(self) -> str:
        """
        Gets the coached_participant_id of this CallMediaParticipant.
        The ID of the participant being coached when performing a call coach.

        :return: The coached_participant_id of this CallMediaParticipant.
        :rtype: str
        """
        return self._coached_participant_id

    @coached_participant_id.setter
    def coached_participant_id(self, coached_participant_id: str) -> None:
        """
        Sets the coached_participant_id of this CallMediaParticipant.
        The ID of the participant being coached when performing a call coach.

        :param coached_participant_id: The coached_participant_id of this CallMediaParticipant.
        :type: str
        """
        

        self._coached_participant_id = coached_participant_id

    @property
    def barged_participant_id(self) -> str:
        """
        Gets the barged_participant_id of this CallMediaParticipant.
        If this participant barged in a participant's call, then this will be the id of the targeted participant.

        :return: The barged_participant_id of this CallMediaParticipant.
        :rtype: str
        """
        return self._barged_participant_id

    @barged_participant_id.setter
    def barged_participant_id(self, barged_participant_id: str) -> None:
        """
        Sets the barged_participant_id of this CallMediaParticipant.
        If this participant barged in a participant's call, then this will be the id of the targeted participant.

        :param barged_participant_id: The barged_participant_id of this CallMediaParticipant.
        :type: str
        """
        

        self._barged_participant_id = barged_participant_id

    @property
    def consult_participant_id(self) -> str:
        """
        Gets the consult_participant_id of this CallMediaParticipant.
        The ID of the consult transfer target participant when performing a consult transfer.

        :return: The consult_participant_id of this CallMediaParticipant.
        :rtype: str
        """
        return self._consult_participant_id

    @consult_participant_id.setter
    def consult_participant_id(self, consult_participant_id: str) -> None:
        """
        Sets the consult_participant_id of this CallMediaParticipant.
        The ID of the consult transfer target participant when performing a consult transfer.

        :param consult_participant_id: The consult_participant_id of this CallMediaParticipant.
        :type: str
        """
        

        self._consult_participant_id = consult_participant_id

    @property
    def uui_data(self) -> str:
        """
        Gets the uui_data of this CallMediaParticipant.
        User-to-User information which maps to a SIP header field defined in RFC7433. UUI data is used in the Public Switched Telephone Network (PSTN) for use cases described in RFC6567.

        :return: The uui_data of this CallMediaParticipant.
        :rtype: str
        """
        return self._uui_data

    @uui_data.setter
    def uui_data(self, uui_data: str) -> None:
        """
        Sets the uui_data of this CallMediaParticipant.
        User-to-User information which maps to a SIP header field defined in RFC7433. UUI data is used in the Public Switched Telephone Network (PSTN) for use cases described in RFC6567.

        :param uui_data: The uui_data of this CallMediaParticipant.
        :type: str
        """
        

        self._uui_data = uui_data

    @property
    def barged_time(self) -> datetime:
        """
        Gets the barged_time of this CallMediaParticipant.
        The timestamp when this participant was connected to the barge conference in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The barged_time of this CallMediaParticipant.
        :rtype: datetime
        """
        return self._barged_time

    @barged_time.setter
    def barged_time(self, barged_time: datetime) -> None:
        """
        Sets the barged_time of this CallMediaParticipant.
        The timestamp when this participant was connected to the barge conference in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param barged_time: The barged_time of this CallMediaParticipant.
        :type: datetime
        """
        

        self._barged_time = barged_time

    @property
    def secure_pause(self) -> bool:
        """
        Gets the secure_pause of this CallMediaParticipant.
        True when the recording of this call is in secure pause status.

        :return: The secure_pause of this CallMediaParticipant.
        :rtype: bool
        """
        return self._secure_pause

    @secure_pause.setter
    def secure_pause(self, secure_pause: bool) -> None:
        """
        Sets the secure_pause of this CallMediaParticipant.
        True when the recording of this call is in secure pause status.

        :param secure_pause: The secure_pause of this CallMediaParticipant.
        :type: bool
        """
        

        self._secure_pause = secure_pause

    @property
    def disposition(self) -> 'Disposition':
        """
        Gets the disposition of this CallMediaParticipant.
        Call resolution data for Dialer bulk make calls commands.

        :return: The disposition of this CallMediaParticipant.
        :rtype: Disposition
        """
        return self._disposition

    @disposition.setter
    def disposition(self, disposition: 'Disposition') -> None:
        """
        Sets the disposition of this CallMediaParticipant.
        Call resolution data for Dialer bulk make calls commands.

        :param disposition: The disposition of this CallMediaParticipant.
        :type: Disposition
        """
        

        self._disposition = disposition

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

