# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class DataExportNotificationNotification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DataExportNotificationNotification - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'status': 'str',
            'export_format': 'str',
            'download_url': 'str',
            'view_type': 'str',
            'export_error_messages_type': 'str',
            'read': 'bool',
            'created_date_time': 'datetime',
            'modified_date_time': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'export_format': 'exportFormat',
            'download_url': 'downloadUrl',
            'view_type': 'viewType',
            'export_error_messages_type': 'exportErrorMessagesType',
            'read': 'read',
            'created_date_time': 'createdDateTime',
            'modified_date_time': 'modifiedDateTime'
        }

        self._id = None
        self._name = None
        self._status = None
        self._export_format = None
        self._download_url = None
        self._view_type = None
        self._export_error_messages_type = None
        self._read = None
        self._created_date_time = None
        self._modified_date_time = None

    @property
    def id(self):
        """
        Gets the id of this DataExportNotificationNotification.


        :return: The id of this DataExportNotificationNotification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DataExportNotificationNotification.


        :param id: The id of this DataExportNotificationNotification.
        :type: str
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DataExportNotificationNotification.


        :return: The name of this DataExportNotificationNotification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DataExportNotificationNotification.


        :param name: The name of this DataExportNotificationNotification.
        :type: str
        """
        
        self._name = name

    @property
    def status(self):
        """
        Gets the status of this DataExportNotificationNotification.


        :return: The status of this DataExportNotificationNotification.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DataExportNotificationNotification.


        :param status: The status of this DataExportNotificationNotification.
        :type: str
        """
        allowed_values = ["SUBMITTED", "RUNNING", "COMPLETED", "FAILED"]
        if status.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for status -> " + status
            self._status = "outdated_sdk_version"
        else:
            self._status = status

    @property
    def export_format(self):
        """
        Gets the export_format of this DataExportNotificationNotification.


        :return: The export_format of this DataExportNotificationNotification.
        :rtype: str
        """
        return self._export_format

    @export_format.setter
    def export_format(self, export_format):
        """
        Sets the export_format of this DataExportNotificationNotification.


        :param export_format: The export_format of this DataExportNotificationNotification.
        :type: str
        """
        allowed_values = ["CSV"]
        if export_format.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for export_format -> " + export_format
            self._export_format = "outdated_sdk_version"
        else:
            self._export_format = export_format

    @property
    def download_url(self):
        """
        Gets the download_url of this DataExportNotificationNotification.


        :return: The download_url of this DataExportNotificationNotification.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """
        Sets the download_url of this DataExportNotificationNotification.


        :param download_url: The download_url of this DataExportNotificationNotification.
        :type: str
        """
        
        self._download_url = download_url

    @property
    def view_type(self):
        """
        Gets the view_type of this DataExportNotificationNotification.


        :return: The view_type of this DataExportNotificationNotification.
        :rtype: str
        """
        return self._view_type

    @view_type.setter
    def view_type(self, view_type):
        """
        Sets the view_type of this DataExportNotificationNotification.


        :param view_type: The view_type of this DataExportNotificationNotification.
        :type: str
        """
        allowed_values = ["QUEUE_PERFORMANCE_SUMMARY_VIEW", "QUEUE_PERFORMANCE_DETAIL_VIEW", "INTERACTION_SUMMARY_VIEW", "AGENTS_PERFORMANCE_SUMMARY_VIEW"]
        if view_type.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for view_type -> " + view_type
            self._view_type = "outdated_sdk_version"
        else:
            self._view_type = view_type

    @property
    def export_error_messages_type(self):
        """
        Gets the export_error_messages_type of this DataExportNotificationNotification.


        :return: The export_error_messages_type of this DataExportNotificationNotification.
        :rtype: str
        """
        return self._export_error_messages_type

    @export_error_messages_type.setter
    def export_error_messages_type(self, export_error_messages_type):
        """
        Sets the export_error_messages_type of this DataExportNotificationNotification.


        :param export_error_messages_type: The export_error_messages_type of this DataExportNotificationNotification.
        :type: str
        """
        allowed_values = ["FAILED_CONVERTING_EXPORT_JOB", "FAILED_NO_DATA_EXPORT_JOB_FOUND", "FAILED_GETTING_DATA_FROM_SERVICE", "FAILED_GENERATING_TEMP_FILE", "FAILED_SAVING_FILE_TO_S3", "FAILED_NOTIFYING_SKYWALKER_OF_DOWNLOAD", "FAILED_BUILDING_DOWNLOAD_URL_FROM_SKYWALKER_RESPONSE", "EXPORT_TYPE_NOT_IMPLEMENTED"]
        if export_error_messages_type.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for export_error_messages_type -> " + export_error_messages_type
            self._export_error_messages_type = "outdated_sdk_version"
        else:
            self._export_error_messages_type = export_error_messages_type

    @property
    def read(self):
        """
        Gets the read of this DataExportNotificationNotification.


        :return: The read of this DataExportNotificationNotification.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """
        Sets the read of this DataExportNotificationNotification.


        :param read: The read of this DataExportNotificationNotification.
        :type: bool
        """
        
        self._read = read

    @property
    def created_date_time(self):
        """
        Gets the created_date_time of this DataExportNotificationNotification.


        :return: The created_date_time of this DataExportNotificationNotification.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """
        Sets the created_date_time of this DataExportNotificationNotification.


        :param created_date_time: The created_date_time of this DataExportNotificationNotification.
        :type: datetime
        """
        
        self._created_date_time = created_date_time

    @property
    def modified_date_time(self):
        """
        Gets the modified_date_time of this DataExportNotificationNotification.


        :return: The modified_date_time of this DataExportNotificationNotification.
        :rtype: datetime
        """
        return self._modified_date_time

    @modified_date_time.setter
    def modified_date_time(self, modified_date_time):
        """
        Sets the modified_date_time of this DataExportNotificationNotification.


        :param modified_date_time: The modified_date_time of this DataExportNotificationNotification.
        :type: datetime
        """
        
        self._modified_date_time = modified_date_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

