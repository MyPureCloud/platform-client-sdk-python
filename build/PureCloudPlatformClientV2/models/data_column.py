# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class DataColumn(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DataColumn - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'column_name': 'str',
            'data_column_type': 'str'
        }

        self.attribute_map = {
            'column_name': 'columnName',
            'data_column_type': 'dataColumnType'
        }

        self._column_name = None
        self._data_column_type = None

    @property
    def column_name(self):
        """
        Gets the column_name of this DataColumn.
        The localized value of the column name as provided by the client

        :return: The column_name of this DataColumn.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """
        Sets the column_name of this DataColumn.
        The localized value of the column name as provided by the client

        :param column_name: The column_name of this DataColumn.
        :type: str
        """
        
        self._column_name = column_name

    @property
    def data_column_type(self):
        """
        Gets the data_column_type of this DataColumn.
        The type of column being requested

        :return: The data_column_type of this DataColumn.
        :rtype: str
        """
        return self._data_column_type

    @data_column_type.setter
    def data_column_type(self, data_column_type):
        """
        Sets the data_column_type of this DataColumn.
        The type of column being requested

        :param data_column_type: The data_column_type of this DataColumn.
        :type: str
        """
        allowed_values = ["INTERVAL_START", "INTERVAL_END", "INTERVAL_COMPLETE", "MEDIA_TYPE", "QUEUE_ID", "QUEUE_NAME", "OFFER", "ANSWER", "ANSWER_PERCENT", "ABANDON", "ABANDON_PERCENT", "TIME_TO_ABANDON", "ASA", "SERVICE_LEVEL_PERCENT", "SLA_LEVEL_PERCENT_TARGET", "AVERAGE_HANDLE", "TOTAL_HANDLE", "AVERAGE_TALK", "TOTAL_TALK", "AVERAGE_HOLD", "TOTAL_HOLD", "AVERAGE_ACW", "TOTAL_ACW", "HOLD", "TRANSFER", "TRANSFER_PERCENT", "FLOW_OUT", "HANDLE", "AVERAGE_WAIT"]
        if data_column_type.lower() not in map(str.lower, allowed_values):
            # print "Invalid value for data_column_type -> " + data_column_type
            self._data_column_type = "outdated_sdk_version"
        else:
            self._data_column_type = data_column_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

