# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class AgentWorkPlanBid(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        AgentWorkPlanBid - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'bid_window_start_date': 'date',
            'bid_window_end_date': 'date',
            'effective_date': 'date',
            'status': 'str',
            'work_plan_fields_visible_to_agents': 'list[str]',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'bid_window_start_date': 'bidWindowStartDate',
            'bid_window_end_date': 'bidWindowEndDate',
            'effective_date': 'effectiveDate',
            'status': 'status',
            'work_plan_fields_visible_to_agents': 'workPlanFieldsVisibleToAgents',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._bid_window_start_date = None
        self._bid_window_end_date = None
        self._effective_date = None
        self._status = None
        self._work_plan_fields_visible_to_agents = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this AgentWorkPlanBid.
        The ID of the work plan bid

        :return: The id of this AgentWorkPlanBid.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this AgentWorkPlanBid.
        The ID of the work plan bid

        :param id: The id of this AgentWorkPlanBid.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this AgentWorkPlanBid.


        :return: The name of this AgentWorkPlanBid.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this AgentWorkPlanBid.


        :param name: The name of this AgentWorkPlanBid.
        :type: str
        """
        

        self._name = name

    @property
    def bid_window_start_date(self) -> date:
        """
        Gets the bid_window_start_date of this AgentWorkPlanBid.
        The date when agents can start participating in work plan bidding. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

        :return: The bid_window_start_date of this AgentWorkPlanBid.
        :rtype: date
        """
        return self._bid_window_start_date

    @bid_window_start_date.setter
    def bid_window_start_date(self, bid_window_start_date: date) -> None:
        """
        Sets the bid_window_start_date of this AgentWorkPlanBid.
        The date when agents can start participating in work plan bidding. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

        :param bid_window_start_date: The bid_window_start_date of this AgentWorkPlanBid.
        :type: date
        """
        

        self._bid_window_start_date = bid_window_start_date

    @property
    def bid_window_end_date(self) -> date:
        """
        Gets the bid_window_end_date of this AgentWorkPlanBid.
        The inclusive end date of a bid window. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

        :return: The bid_window_end_date of this AgentWorkPlanBid.
        :rtype: date
        """
        return self._bid_window_end_date

    @bid_window_end_date.setter
    def bid_window_end_date(self, bid_window_end_date: date) -> None:
        """
        Sets the bid_window_end_date of this AgentWorkPlanBid.
        The inclusive end date of a bid window. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

        :param bid_window_end_date: The bid_window_end_date of this AgentWorkPlanBid.
        :type: date
        """
        

        self._bid_window_end_date = bid_window_end_date

    @property
    def effective_date(self) -> date:
        """
        Gets the effective_date of this AgentWorkPlanBid.
        The date when agents will be assigned to the new work plan. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

        :return: The effective_date of this AgentWorkPlanBid.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date: date) -> None:
        """
        Sets the effective_date of this AgentWorkPlanBid.
        The date when agents will be assigned to the new work plan. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd

        :param effective_date: The effective_date of this AgentWorkPlanBid.
        :type: date
        """
        

        self._effective_date = effective_date

    @property
    def status(self) -> str:
        """
        Gets the status of this AgentWorkPlanBid.
        The state of the bid

        :return: The status of this AgentWorkPlanBid.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str) -> None:
        """
        Sets the status of this AgentWorkPlanBid.
        The state of the bid

        :param status: The status of this AgentWorkPlanBid.
        :type: str
        """
        if isinstance(status, int):
            status = str(status)
        allowed_values = ["Draft", "Locked", "Optimized", "Scheduled", "Open", "Closed", "Processed", "Published"]
        if status.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for status -> " + status)
            self._status = "outdated_sdk_version"
        else:
            self._status = status

    @property
    def work_plan_fields_visible_to_agents(self) -> List[str]:
        """
        Gets the work_plan_fields_visible_to_agents of this AgentWorkPlanBid.
        The work plan fields visible to agents whenever work plan preferences are made

        :return: The work_plan_fields_visible_to_agents of this AgentWorkPlanBid.
        :rtype: list[str]
        """
        return self._work_plan_fields_visible_to_agents

    @work_plan_fields_visible_to_agents.setter
    def work_plan_fields_visible_to_agents(self, work_plan_fields_visible_to_agents: List[str]) -> None:
        """
        Sets the work_plan_fields_visible_to_agents of this AgentWorkPlanBid.
        The work plan fields visible to agents whenever work plan preferences are made

        :param work_plan_fields_visible_to_agents: The work_plan_fields_visible_to_agents of this AgentWorkPlanBid.
        :type: list[str]
        """
        

        self._work_plan_fields_visible_to_agents = work_plan_fields_visible_to_agents

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this AgentWorkPlanBid.
        The URI for this object

        :return: The self_uri of this AgentWorkPlanBid.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this AgentWorkPlanBid.
        The URI for this object

        :param self_uri: The self_uri of this AgentWorkPlanBid.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

