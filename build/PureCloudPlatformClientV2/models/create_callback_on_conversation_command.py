# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re
import json

from ..utils import sanitize_for_serialization

class CreateCallbackOnConversationCommand(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CreateCallbackOnConversationCommand - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'script_id': 'str',
            'queue_id': 'str',
            'routing_data': 'RoutingData',
            'callback_user_name': 'str',
            'callback_numbers': 'list[str]',
            'callback_scheduled_time': 'datetime',
            'country_code': 'str',
            'validate_callback_numbers': 'bool',
            'data': 'dict(str, str)'
        }

        self.attribute_map = {
            'script_id': 'scriptId',
            'queue_id': 'queueId',
            'routing_data': 'routingData',
            'callback_user_name': 'callbackUserName',
            'callback_numbers': 'callbackNumbers',
            'callback_scheduled_time': 'callbackScheduledTime',
            'country_code': 'countryCode',
            'validate_callback_numbers': 'validateCallbackNumbers',
            'data': 'data'
        }

        self._script_id = None
        self._queue_id = None
        self._routing_data = None
        self._callback_user_name = None
        self._callback_numbers = None
        self._callback_scheduled_time = None
        self._country_code = None
        self._validate_callback_numbers = None
        self._data = None

    @property
    def script_id(self):
        """
        Gets the script_id of this CreateCallbackOnConversationCommand.
        The identifier of the script to be used for the callback

        :return: The script_id of this CreateCallbackOnConversationCommand.
        :rtype: str
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """
        Sets the script_id of this CreateCallbackOnConversationCommand.
        The identifier of the script to be used for the callback

        :param script_id: The script_id of this CreateCallbackOnConversationCommand.
        :type: str
        """
        
        self._script_id = script_id

    @property
    def queue_id(self):
        """
        Gets the queue_id of this CreateCallbackOnConversationCommand.
        The identifier of the queue to be used for the callback. Either queueId or routingData is required.

        :return: The queue_id of this CreateCallbackOnConversationCommand.
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """
        Sets the queue_id of this CreateCallbackOnConversationCommand.
        The identifier of the queue to be used for the callback. Either queueId or routingData is required.

        :param queue_id: The queue_id of this CreateCallbackOnConversationCommand.
        :type: str
        """
        
        self._queue_id = queue_id

    @property
    def routing_data(self):
        """
        Gets the routing_data of this CreateCallbackOnConversationCommand.
        The routing data to be used for the callback. Either queueId or routingData is required.

        :return: The routing_data of this CreateCallbackOnConversationCommand.
        :rtype: RoutingData
        """
        return self._routing_data

    @routing_data.setter
    def routing_data(self, routing_data):
        """
        Sets the routing_data of this CreateCallbackOnConversationCommand.
        The routing data to be used for the callback. Either queueId or routingData is required.

        :param routing_data: The routing_data of this CreateCallbackOnConversationCommand.
        :type: RoutingData
        """
        
        self._routing_data = routing_data

    @property
    def callback_user_name(self):
        """
        Gets the callback_user_name of this CreateCallbackOnConversationCommand.
        The name of the party to be called back.

        :return: The callback_user_name of this CreateCallbackOnConversationCommand.
        :rtype: str
        """
        return self._callback_user_name

    @callback_user_name.setter
    def callback_user_name(self, callback_user_name):
        """
        Sets the callback_user_name of this CreateCallbackOnConversationCommand.
        The name of the party to be called back.

        :param callback_user_name: The callback_user_name of this CreateCallbackOnConversationCommand.
        :type: str
        """
        
        self._callback_user_name = callback_user_name

    @property
    def callback_numbers(self):
        """
        Gets the callback_numbers of this CreateCallbackOnConversationCommand.
        A list of phone numbers for the callback.

        :return: The callback_numbers of this CreateCallbackOnConversationCommand.
        :rtype: list[str]
        """
        return self._callback_numbers

    @callback_numbers.setter
    def callback_numbers(self, callback_numbers):
        """
        Sets the callback_numbers of this CreateCallbackOnConversationCommand.
        A list of phone numbers for the callback.

        :param callback_numbers: The callback_numbers of this CreateCallbackOnConversationCommand.
        :type: list[str]
        """
        
        self._callback_numbers = callback_numbers

    @property
    def callback_scheduled_time(self):
        """
        Gets the callback_scheduled_time of this CreateCallbackOnConversationCommand.
        The scheduled date-time for the callback as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The callback_scheduled_time of this CreateCallbackOnConversationCommand.
        :rtype: datetime
        """
        return self._callback_scheduled_time

    @callback_scheduled_time.setter
    def callback_scheduled_time(self, callback_scheduled_time):
        """
        Sets the callback_scheduled_time of this CreateCallbackOnConversationCommand.
        The scheduled date-time for the callback as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param callback_scheduled_time: The callback_scheduled_time of this CreateCallbackOnConversationCommand.
        :type: datetime
        """
        
        self._callback_scheduled_time = callback_scheduled_time

    @property
    def country_code(self):
        """
        Gets the country_code of this CreateCallbackOnConversationCommand.
        The country code to be associated with the callback numbers.

        :return: The country_code of this CreateCallbackOnConversationCommand.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this CreateCallbackOnConversationCommand.
        The country code to be associated with the callback numbers.

        :param country_code: The country_code of this CreateCallbackOnConversationCommand.
        :type: str
        """
        
        self._country_code = country_code

    @property
    def validate_callback_numbers(self):
        """
        Gets the validate_callback_numbers of this CreateCallbackOnConversationCommand.
        Whether or not to validate the callback numbers for phone number format.

        :return: The validate_callback_numbers of this CreateCallbackOnConversationCommand.
        :rtype: bool
        """
        return self._validate_callback_numbers

    @validate_callback_numbers.setter
    def validate_callback_numbers(self, validate_callback_numbers):
        """
        Sets the validate_callback_numbers of this CreateCallbackOnConversationCommand.
        Whether or not to validate the callback numbers for phone number format.

        :param validate_callback_numbers: The validate_callback_numbers of this CreateCallbackOnConversationCommand.
        :type: bool
        """
        
        self._validate_callback_numbers = validate_callback_numbers

    @property
    def data(self):
        """
        Gets the data of this CreateCallbackOnConversationCommand.
        A map of key-value pairs containing additional data that can be associated to the callback. These values will appear in the attributes property on the conversation participant. Example: { \"notes\": \"ready to close the deal!\", \"customerPreferredName\": \"Doc\" }

        :return: The data of this CreateCallbackOnConversationCommand.
        :rtype: dict(str, str)
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this CreateCallbackOnConversationCommand.
        A map of key-value pairs containing additional data that can be associated to the callback. These values will appear in the attributes property on the conversation participant. Example: { \"notes\": \"ready to close the deal!\", \"customerPreferredName\": \"Doc\" }

        :param data: The data of this CreateCallbackOnConversationCommand.
        :type: dict(str, str)
        """
        
        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

