# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict

if TYPE_CHECKING:
    from . import SummarySettingCustomEntity
    from . import SummarySettingPII
    from . import SummarySettingParticipantLabels

class SummarySetting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        SummarySetting - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'language': 'str',
            'summary_type': 'str',
            'format': 'str',
            'mask_pii': 'SummarySettingPII',
            'participant_labels': 'SummarySettingParticipantLabels',
            'predefined_insights': 'list[str]',
            'custom_entities': 'list[SummarySettingCustomEntity]',
            'setting_type': 'str',
            'prompt': 'str',
            'date_created': 'datetime',
            'date_modified': 'datetime',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'language': 'language',
            'summary_type': 'summaryType',
            'format': 'format',
            'mask_pii': 'maskPII',
            'participant_labels': 'participantLabels',
            'predefined_insights': 'predefinedInsights',
            'custom_entities': 'customEntities',
            'setting_type': 'settingType',
            'prompt': 'prompt',
            'date_created': 'dateCreated',
            'date_modified': 'dateModified',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._language = None
        self._summary_type = None
        self._format = None
        self._mask_pii = None
        self._participant_labels = None
        self._predefined_insights = None
        self._custom_entities = None
        self._setting_type = None
        self._prompt = None
        self._date_created = None
        self._date_modified = None
        self._self_uri = None

    @property
    def id(self) -> str:
        """
        Gets the id of this SummarySetting.
        The globally unique identifier for the object.

        :return: The id of this SummarySetting.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this SummarySetting.
        The globally unique identifier for the object.

        :param id: The id of this SummarySetting.
        :type: str
        """
        

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this SummarySetting.
        Name of the summary setting.

        :return: The name of this SummarySetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        """
        Sets the name of this SummarySetting.
        Name of the summary setting.

        :param name: The name of this SummarySetting.
        :type: str
        """
        

        self._name = name

    @property
    def language(self) -> str:
        """
        Gets the language of this SummarySetting.
        Language of the generated summary, e.g. en-US, it-IT.

        :return: The language of this SummarySetting.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str) -> None:
        """
        Sets the language of this SummarySetting.
        Language of the generated summary, e.g. en-US, it-IT.

        :param language: The language of this SummarySetting.
        :type: str
        """
        

        self._language = language

    @property
    def summary_type(self) -> str:
        """
        Gets the summary_type of this SummarySetting.
        Level of detail of the generated summary.

        :return: The summary_type of this SummarySetting.
        :rtype: str
        """
        return self._summary_type

    @summary_type.setter
    def summary_type(self, summary_type: str) -> None:
        """
        Sets the summary_type of this SummarySetting.
        Level of detail of the generated summary.

        :param summary_type: The summary_type of this SummarySetting.
        :type: str
        """
        if isinstance(summary_type, int):
            summary_type = str(summary_type)
        allowed_values = ["Concise", "Detailed"]
        if summary_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for summary_type -> " + summary_type)
            self._summary_type = "outdated_sdk_version"
        else:
            self._summary_type = summary_type

    @property
    def format(self) -> str:
        """
        Gets the format of this SummarySetting.
        Format of the generated summary.

        :return: The format of this SummarySetting.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str) -> None:
        """
        Sets the format of this SummarySetting.
        Format of the generated summary.

        :param format: The format of this SummarySetting.
        :type: str
        """
        if isinstance(format, int):
            format = str(format)
        allowed_values = ["TextBlock", "BulletPoints", "GroupedTextBlocks", "GroupedBulletPoints"]
        if format.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for format -> " + format)
            self._format = "outdated_sdk_version"
        else:
            self._format = format

    @property
    def mask_pii(self) -> 'SummarySettingPII':
        """
        Gets the mask_pii of this SummarySetting.
        Displaying PII in the generated summary.

        :return: The mask_pii of this SummarySetting.
        :rtype: SummarySettingPII
        """
        return self._mask_pii

    @mask_pii.setter
    def mask_pii(self, mask_pii: 'SummarySettingPII') -> None:
        """
        Sets the mask_pii of this SummarySetting.
        Displaying PII in the generated summary.

        :param mask_pii: The mask_pii of this SummarySetting.
        :type: SummarySettingPII
        """
        

        self._mask_pii = mask_pii

    @property
    def participant_labels(self) -> 'SummarySettingParticipantLabels':
        """
        Gets the participant_labels of this SummarySetting.
        How to refer to interaction participants in the generated summary.

        :return: The participant_labels of this SummarySetting.
        :rtype: SummarySettingParticipantLabels
        """
        return self._participant_labels

    @participant_labels.setter
    def participant_labels(self, participant_labels: 'SummarySettingParticipantLabels') -> None:
        """
        Sets the participant_labels of this SummarySetting.
        How to refer to interaction participants in the generated summary.

        :param participant_labels: The participant_labels of this SummarySetting.
        :type: SummarySettingParticipantLabels
        """
        

        self._participant_labels = participant_labels

    @property
    def predefined_insights(self) -> List[str]:
        """
        Gets the predefined_insights of this SummarySetting.
        Set which insights to include in the generated summary by default.

        :return: The predefined_insights of this SummarySetting.
        :rtype: list[str]
        """
        return self._predefined_insights

    @predefined_insights.setter
    def predefined_insights(self, predefined_insights: List[str]) -> None:
        """
        Sets the predefined_insights of this SummarySetting.
        Set which insights to include in the generated summary by default.

        :param predefined_insights: The predefined_insights of this SummarySetting.
        :type: list[str]
        """
        

        self._predefined_insights = predefined_insights

    @property
    def custom_entities(self) -> List['SummarySettingCustomEntity']:
        """
        Gets the custom_entities of this SummarySetting.
        Custom entity definition.

        :return: The custom_entities of this SummarySetting.
        :rtype: list[SummarySettingCustomEntity]
        """
        return self._custom_entities

    @custom_entities.setter
    def custom_entities(self, custom_entities: List['SummarySettingCustomEntity']) -> None:
        """
        Sets the custom_entities of this SummarySetting.
        Custom entity definition.

        :param custom_entities: The custom_entities of this SummarySetting.
        :type: list[SummarySettingCustomEntity]
        """
        

        self._custom_entities = custom_entities

    @property
    def setting_type(self) -> str:
        """
        Gets the setting_type of this SummarySetting.
        Type of the summary setting.

        :return: The setting_type of this SummarySetting.
        :rtype: str
        """
        return self._setting_type

    @setting_type.setter
    def setting_type(self, setting_type: str) -> None:
        """
        Sets the setting_type of this SummarySetting.
        Type of the summary setting.

        :param setting_type: The setting_type of this SummarySetting.
        :type: str
        """
        if isinstance(setting_type, int):
            setting_type = str(setting_type)
        allowed_values = ["Basic", "Prompt"]
        if setting_type.lower() not in map(str.lower, allowed_values):
            # print("Invalid value for setting_type -> " + setting_type)
            self._setting_type = "outdated_sdk_version"
        else:
            self._setting_type = setting_type

    @property
    def prompt(self) -> str:
        """
        Gets the prompt of this SummarySetting.
        Custom prompt of summary setting.

        :return: The prompt of this SummarySetting.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt: str) -> None:
        """
        Sets the prompt of this SummarySetting.
        Custom prompt of summary setting.

        :param prompt: The prompt of this SummarySetting.
        :type: str
        """
        

        self._prompt = prompt

    @property
    def date_created(self) -> datetime:
        """
        Gets the date_created of this SummarySetting.
        The date and time the setting was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_created of this SummarySetting.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime) -> None:
        """
        Sets the date_created of this SummarySetting.
        The date and time the setting was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_created: The date_created of this SummarySetting.
        :type: datetime
        """
        

        self._date_created = date_created

    @property
    def date_modified(self) -> datetime:
        """
        Gets the date_modified of this SummarySetting.
        The date and time the setting was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_modified of this SummarySetting.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified: datetime) -> None:
        """
        Sets the date_modified of this SummarySetting.
        The date and time the setting was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_modified: The date_modified of this SummarySetting.
        :type: datetime
        """
        

        self._date_modified = date_modified

    @property
    def self_uri(self) -> str:
        """
        Gets the self_uri of this SummarySetting.
        The URI for this object

        :return: The self_uri of this SummarySetting.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri: str) -> None:
        """
        Sets the self_uri of this SummarySetting.
        The URI for this object

        :param self_uri: The self_uri of this SummarySetting.
        :type: str
        """
        

        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

