# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from datetime import date
from pprint import pformat
import re
import json

from ..utils import sanitize_for_serialization

# type hinting support
from typing import TYPE_CHECKING
from typing import List
from typing import Dict


class DataExtractionFileSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self) -> None:
        """
        DataExtractionFileSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'data_schema': 'str',
            'date_created': 'datetime',
            'date_expires': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'data_schema': 'dataSchema',
            'date_created': 'dateCreated',
            'date_expires': 'dateExpires'
        }

        self._id = None
        self._data_schema = None
        self._date_created = None
        self._date_expires = None

    @property
    def id(self) -> str:
        """
        Gets the id of this DataExtractionFileSchema.
        The unique identifier for the file

        :return: The id of this DataExtractionFileSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str) -> None:
        """
        Sets the id of this DataExtractionFileSchema.
        The unique identifier for the file

        :param id: The id of this DataExtractionFileSchema.
        :type: str
        """
        

        self._id = id

    @property
    def data_schema(self) -> str:
        """
        Gets the data_schema of this DataExtractionFileSchema.
        The data schema the file belongs to

        :return: The data_schema of this DataExtractionFileSchema.
        :rtype: str
        """
        return self._data_schema

    @data_schema.setter
    def data_schema(self, data_schema: str) -> None:
        """
        Sets the data_schema of this DataExtractionFileSchema.
        The data schema the file belongs to

        :param data_schema: The data_schema of this DataExtractionFileSchema.
        :type: str
        """
        

        self._data_schema = data_schema

    @property
    def date_created(self) -> datetime:
        """
        Gets the date_created of this DataExtractionFileSchema.
        The date and time when this file was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_created of this DataExtractionFileSchema.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime) -> None:
        """
        Sets the date_created of this DataExtractionFileSchema.
        The date and time when this file was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_created: The date_created of this DataExtractionFileSchema.
        :type: datetime
        """
        

        self._date_created = date_created

    @property
    def date_expires(self) -> datetime:
        """
        Gets the date_expires of this DataExtractionFileSchema.
        The date and time when this file becomes unavailable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :return: The date_expires of this DataExtractionFileSchema.
        :rtype: datetime
        """
        return self._date_expires

    @date_expires.setter
    def date_expires(self, date_expires: datetime) -> None:
        """
        Sets the date_expires of this DataExtractionFileSchema.
        The date and time when this file becomes unavailable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z

        :param date_expires: The date_expires of this DataExtractionFileSchema.
        :type: datetime
        """
        

        self._date_expires = date_expires

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_json(self):
        """
        Returns the model as raw JSON
        """
        return json.dumps(sanitize_for_serialization(self.to_dict()))

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

