{
  "alerting": {
    "DELETE /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "functionName": "delete_alerting_interactionstats_alert",
      "signature": "delete_alerting_interactionstats_alert(alert_id)",
      "parameters": [
        {
          "name": "alert_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "functionName": "delete_alerting_interactionstats_rule",
      "signature": "delete_alerting_interactionstats_rule(rule_id)",
      "parameters": [
        {
          "name": "rule_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/alerting/alerts/active": {
      "functionName": "get_alerting_alerts_active",
      "signature": "get_alerting_alerts_active()",
      "return": "ActiveAlertCount"
    },
    "GET /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "functionName": "get_alerting_interactionstats_alert",
      "signature": "get_alerting_interactionstats_alert(alert_id, expand)",
      "parameters": [
        {
          "name": "alert_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "InteractionStatsAlert"
    },
    "GET /api/v2/alerting/interactionstats/alerts": {
      "functionName": "get_alerting_interactionstats_alerts",
      "signature": "get_alerting_interactionstats_alerts(expand)",
      "parameters": [
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "InteractionStatsAlertContainer"
    },
    "GET /api/v2/alerting/interactionstats/alerts/unread": {
      "functionName": "get_alerting_interactionstats_alerts_unread",
      "signature": "get_alerting_interactionstats_alerts_unread()",
      "return": "UnreadMetric"
    },
    "GET /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "functionName": "get_alerting_interactionstats_rule",
      "signature": "get_alerting_interactionstats_rule(rule_id, expand)",
      "parameters": [
        {
          "name": "rule_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "InteractionStatsRule"
    },
    "GET /api/v2/alerting/interactionstats/rules": {
      "functionName": "get_alerting_interactionstats_rules",
      "signature": "get_alerting_interactionstats_rules(expand)",
      "parameters": [
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "InteractionStatsRuleContainer"
    },
    "POST /api/v2/alerting/interactionstats/rules": {
      "functionName": "post_alerting_interactionstats_rules",
      "signature": "post_alerting_interactionstats_rules(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "InteractionStatsRule"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "InteractionStatsRule"
    },
    "PUT /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "functionName": "put_alerting_interactionstats_alert",
      "signature": "put_alerting_interactionstats_alert(alert_id, body, expand)",
      "parameters": [
        {
          "name": "alert_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UnreadStatus"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "UnreadStatus"
    },
    "PUT /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "functionName": "put_alerting_interactionstats_rule",
      "signature": "put_alerting_interactionstats_rule(rule_id, body, expand)",
      "parameters": [
        {
          "name": "rule_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "InteractionStatsRule"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "InteractionStatsRule"
    }
  },
  "analytics": {
    "DELETE /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "functionName": "delete_analytics_conversations_details_job",
      "signature": "delete_analytics_conversations_details_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "functionName": "delete_analytics_reporting_schedule",
      "signature": "delete_analytics_reporting_schedule(schedule_id)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/analytics/users/details/jobs/{jobId}": {
      "functionName": "delete_analytics_users_details_job",
      "signature": "delete_analytics_users_details_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/analytics/botflows/{botFlowId}/reportingturns": {
      "functionName": "get_analytics_botflow_reportingturns",
      "signature": "get_analytics_botflow_reportingturns(bot_flow_id, after, page_size, action_id, session_id)",
      "parameters": [
        {
          "name": "bot_flow_id",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "str"
        },
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "session_id",
          "type": "str"
        }
      ],
      "return": "ReportingTurnsResponse"
    },
    "GET /api/v2/analytics/conversations/{conversationId}/details": {
      "functionName": "get_analytics_conversation_details",
      "signature": "get_analytics_conversation_details(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributes"
    },
    "GET /api/v2/analytics/conversations/details": {
      "functionName": "get_analytics_conversations_details",
      "signature": "get_analytics_conversations_details(id)",
      "parameters": [
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "functionName": "get_analytics_conversations_details_job",
      "signature": "get_analytics_conversations_details_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}/results": {
      "functionName": "get_analytics_conversations_details_job_results",
      "signature": "get_analytics_conversations_details_job_results(job_id, cursor, page_size)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        },
        {
          "name": "cursor",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "AnalyticsConversationAsyncQueryResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/availability": {
      "functionName": "get_analytics_conversations_details_jobs_availability",
      "signature": "get_analytics_conversations_details_jobs_availability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/analytics/reporting/exports": {
      "functionName": "get_analytics_reporting_exports",
      "signature": "get_analytics_reporting_exports(page_number, page_size)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "ReportingExportJobListing"
    },
    "GET /api/v2/analytics/reporting/exports/metadata": {
      "functionName": "get_analytics_reporting_exports_metadata",
      "signature": "get_analytics_reporting_exports_metadata()",
      "return": "ReportingExportMetadataJobListing"
    },
    "GET /api/v2/analytics/reporting/metadata": {
      "functionName": "get_analytics_reporting_metadata",
      "signature": "get_analytics_reporting_metadata(page_number, page_size, locale)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "locale",
          "type": "str"
        }
      ],
      "return": "ReportMetaDataEntityListing"
    },
    "GET /api/v2/analytics/reporting/{reportId}/metadata": {
      "functionName": "get_analytics_reporting_report_id_metadata",
      "signature": "get_analytics_reporting_report_id_metadata(report_id, locale)",
      "parameters": [
        {
          "name": "report_id",
          "type": "str"
        },
        {
          "name": "locale",
          "type": "str"
        }
      ],
      "return": "ReportMetaData"
    },
    "GET /api/v2/analytics/reporting/reportformats": {
      "functionName": "get_analytics_reporting_reportformats",
      "signature": "get_analytics_reporting_reportformats()",
      "return": "list[str]"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "functionName": "get_analytics_reporting_schedule",
      "signature": "get_analytics_reporting_schedule(schedule_id)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        }
      ],
      "return": "ReportSchedule"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history": {
      "functionName": "get_analytics_reporting_schedule_history",
      "signature": "get_analytics_reporting_schedule_history(schedule_id, page_number, page_size)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "ReportRunEntryEntityDomainListing"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/latest": {
      "functionName": "get_analytics_reporting_schedule_history_latest",
      "signature": "get_analytics_reporting_schedule_history_latest(schedule_id)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        }
      ],
      "return": "ReportRunEntry"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}": {
      "functionName": "get_analytics_reporting_schedule_history_run_id",
      "signature": "get_analytics_reporting_schedule_history_run_id(run_id, schedule_id)",
      "parameters": [
        {
          "name": "run_id",
          "type": "str"
        },
        {
          "name": "schedule_id",
          "type": "str"
        }
      ],
      "return": "ReportRunEntry"
    },
    "GET /api/v2/analytics/reporting/schedules": {
      "functionName": "get_analytics_reporting_schedules",
      "signature": "get_analytics_reporting_schedules(page_number, page_size)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "ReportScheduleEntityListing"
    },
    "GET /api/v2/analytics/reporting/settings": {
      "functionName": "get_analytics_reporting_settings",
      "signature": "get_analytics_reporting_settings()",
      "return": "AnalyticsReportingSettings"
    },
    "GET /api/v2/analytics/reporting/timeperiods": {
      "functionName": "get_analytics_reporting_timeperiods",
      "signature": "get_analytics_reporting_timeperiods()",
      "return": "list[str]"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}": {
      "functionName": "get_analytics_users_details_job",
      "signature": "get_analytics_users_details_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}/results": {
      "functionName": "get_analytics_users_details_job_results",
      "signature": "get_analytics_users_details_job_results(job_id, cursor, page_size)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        },
        {
          "name": "cursor",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "AnalyticsUserDetailsAsyncQueryResponse"
    },
    "GET /api/v2/analytics/users/details/jobs/availability": {
      "functionName": "get_analytics_users_details_jobs_availability",
      "signature": "get_analytics_users_details_jobs_availability()",
      "return": "DataAvailabilityResponse"
    },
    "PATCH /api/v2/analytics/reporting/settings": {
      "functionName": "patch_analytics_reporting_settings",
      "signature": "patch_analytics_reporting_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AnalyticsReportingSettings"
        }
      ],
      "return": "AnalyticsReportingSettings"
    },
    "POST /api/v2/analytics/bots/aggregates/query": {
      "functionName": "post_analytics_bots_aggregates_query",
      "signature": "post_analytics_bots_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BotAggregationQuery"
        }
      ],
      "return": "BotAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/{conversationId}/details/properties": {
      "functionName": "post_analytics_conversation_details_properties",
      "signature": "post_analytics_conversation_details_properties(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PropertyIndexRequest"
        }
      ],
      "return": "PropertyIndexRequest"
    },
    "POST /api/v2/analytics/conversations/aggregates/query": {
      "functionName": "post_analytics_conversations_aggregates_query",
      "signature": "post_analytics_conversations_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationAggregationQuery"
        }
      ],
      "return": "ConversationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/jobs": {
      "functionName": "post_analytics_conversations_details_jobs",
      "signature": "post_analytics_conversations_details_jobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AsyncConversationQuery"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/query": {
      "functionName": "post_analytics_conversations_details_query",
      "signature": "post_analytics_conversations_details_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationQuery"
        }
      ],
      "return": "AnalyticsConversationQueryResponse"
    },
    "POST /api/v2/analytics/conversations/transcripts/query": {
      "functionName": "post_analytics_conversations_transcripts_query",
      "signature": "post_analytics_conversations_transcripts_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptConversationDetailSearchRequest"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "POST /api/v2/analytics/evaluations/aggregates/query": {
      "functionName": "post_analytics_evaluations_aggregates_query",
      "signature": "post_analytics_evaluations_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationAggregationQuery"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/aggregates/query": {
      "functionName": "post_analytics_flows_aggregates_query",
      "signature": "post_analytics_flows_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowAggregationQuery"
        }
      ],
      "return": "FlowAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/observations/query": {
      "functionName": "post_analytics_flows_observations_query",
      "signature": "post_analytics_flows_observations_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowObservationQuery"
        }
      ],
      "return": "FlowObservationQueryResponse"
    },
    "POST /api/v2/analytics/journeys/aggregates/query": {
      "functionName": "post_analytics_journeys_aggregates_query",
      "signature": "post_analytics_journeys_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "JourneyAggregationQuery"
        }
      ],
      "return": "JourneyAggregateQueryResponse"
    },
    "POST /api/v2/analytics/queues/observations/query": {
      "functionName": "post_analytics_queues_observations_query",
      "signature": "post_analytics_queues_observations_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "QueueObservationQuery"
        }
      ],
      "return": "QueueObservationQueryResponse"
    },
    "POST /api/v2/analytics/reporting/exports": {
      "functionName": "post_analytics_reporting_exports",
      "signature": "post_analytics_reporting_exports(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ReportingExportJobRequest"
        }
      ],
      "return": "ReportingExportJobResponse"
    },
    "POST /api/v2/analytics/reporting/schedules/{scheduleId}/runreport": {
      "functionName": "post_analytics_reporting_schedule_runreport",
      "signature": "post_analytics_reporting_schedule_runreport(schedule_id)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        }
      ],
      "return": "RunNowResponse"
    },
    "POST /api/v2/analytics/reporting/schedules": {
      "functionName": "post_analytics_reporting_schedules",
      "signature": "post_analytics_reporting_schedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ReportSchedule"
        }
      ],
      "return": "ReportSchedule"
    },
    "POST /api/v2/analytics/surveys/aggregates/query": {
      "functionName": "post_analytics_surveys_aggregates_query",
      "signature": "post_analytics_surveys_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SurveyAggregationQuery"
        }
      ],
      "return": "SurveyAggregateQueryResponse"
    },
    "POST /api/v2/analytics/transcripts/aggregates/query": {
      "functionName": "post_analytics_transcripts_aggregates_query",
      "signature": "post_analytics_transcripts_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptAggregationQuery"
        }
      ],
      "return": "TranscriptAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/aggregates/query": {
      "functionName": "post_analytics_users_aggregates_query",
      "signature": "post_analytics_users_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserAggregationQuery"
        }
      ],
      "return": "UserAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/details/jobs": {
      "functionName": "post_analytics_users_details_jobs",
      "signature": "post_analytics_users_details_jobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AsyncUserDetailsQuery"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/users/details/query": {
      "functionName": "post_analytics_users_details_query",
      "signature": "post_analytics_users_details_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserDetailsQuery"
        }
      ],
      "return": "AnalyticsUserDetailsQueryResponse"
    },
    "POST /api/v2/analytics/users/observations/query": {
      "functionName": "post_analytics_users_observations_query",
      "signature": "post_analytics_users_observations_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserObservationQuery"
        }
      ],
      "return": "UserObservationQueryResponse"
    },
    "PUT /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "functionName": "put_analytics_reporting_schedule",
      "signature": "put_analytics_reporting_schedule(schedule_id, body)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ReportSchedule"
        }
      ],
      "return": "ReportSchedule"
    }
  },
  "architect": {
    "DELETE /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "functionName": "delete_architect_emergencygroup",
      "signature": "delete_architect_emergencygroup(emergency_group_id)",
      "parameters": [
        {
          "name": "emergency_group_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/architect/ivrs/{ivrId}": {
      "functionName": "delete_architect_ivr",
      "signature": "delete_architect_ivr(ivr_id)",
      "parameters": [
        {
          "name": "ivr_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}": {
      "functionName": "delete_architect_prompt",
      "signature": "delete_architect_prompt(prompt_id, all_resources)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "all_resources",
          "type": "bool"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "functionName": "delete_architect_prompt_resource",
      "signature": "delete_architect_prompt_resource(prompt_id, language_code)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}/resources/{languageCode}/audio": {
      "functionName": "delete_architect_prompt_resource_audio",
      "signature": "delete_architect_prompt_resource_audio(prompt_id, language_code)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts": {
      "functionName": "delete_architect_prompts",
      "signature": "delete_architect_prompts(id)",
      "parameters": [
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "Operation"
    },
    "DELETE /api/v2/architect/schedules/{scheduleId}": {
      "functionName": "delete_architect_schedule",
      "signature": "delete_architect_schedule(schedule_id)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "functionName": "delete_architect_schedulegroup",
      "signature": "delete_architect_schedulegroup(schedule_group_id)",
      "parameters": [
        {
          "name": "schedule_group_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "functionName": "delete_architect_systemprompt_resource",
      "signature": "delete_architect_systemprompt_resource(prompt_id, language_code)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/flows/{flowId}": {
      "functionName": "delete_flow",
      "signature": "delete_flow(flow_id)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/flows": {
      "functionName": "delete_flows",
      "signature": "delete_flows(id)",
      "parameters": [
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "Operation"
    },
    "DELETE /api/v2/flows/datatables/{datatableId}": {
      "functionName": "delete_flows_datatable",
      "signature": "delete_flows_datatable(datatable_id, force)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "force",
          "type": "bool"
        }
      ]
    },
    "DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "functionName": "delete_flows_datatable_row",
      "signature": "delete_flows_datatable_row(datatable_id, row_id)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "row_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/flows/milestones/{milestoneId}": {
      "functionName": "delete_flows_milestone",
      "signature": "delete_flows_milestone(milestone_id)",
      "parameters": [
        {
          "name": "milestone_id",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/architect/dependencytracking": {
      "functionName": "get_architect_dependencytracking",
      "signature": "get_architect_dependencytracking(name, page_number, page_size, object_type, consumed_resources, consuming_resources, consumed_resource_type, consuming_resource_type)",
      "parameters": [
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "object_type",
          "type": "list[str]"
        },
        {
          "name": "consumed_resources",
          "type": "bool"
        },
        {
          "name": "consuming_resources",
          "type": "bool"
        },
        {
          "name": "consumed_resource_type",
          "type": "list[str]"
        },
        {
          "name": "consuming_resource_type",
          "type": "list[str]"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/build": {
      "functionName": "get_architect_dependencytracking_build",
      "signature": "get_architect_dependencytracking_build()",
      "return": "DependencyStatus"
    },
    "GET /api/v2/architect/dependencytracking/consumedresources": {
      "functionName": "get_architect_dependencytracking_consumedresources",
      "signature": "get_architect_dependencytracking_consumedresources(id, version, object_type, resource_type, page_number, page_size)",
      "parameters": [
        {
          "name": "id",
          "type": "str"
        },
        {
          "name": "version",
          "type": "str"
        },
        {
          "name": "object_type",
          "type": "str"
        },
        {
          "name": "resource_type",
          "type": "list[str]"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "ConsumedResourcesEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/consumingresources": {
      "functionName": "get_architect_dependencytracking_consumingresources",
      "signature": "get_architect_dependencytracking_consumingresources(id, object_type, resource_type, version, page_number, page_size, flow_filter)",
      "parameters": [
        {
          "name": "id",
          "type": "str"
        },
        {
          "name": "object_type",
          "type": "str"
        },
        {
          "name": "resource_type",
          "type": "list[str]"
        },
        {
          "name": "version",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "flow_filter",
          "type": "str"
        }
      ],
      "return": "ConsumingResourcesEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/deletedresourceconsumers": {
      "functionName": "get_architect_dependencytracking_deletedresourceconsumers",
      "signature": "get_architect_dependencytracking_deletedresourceconsumers(name, object_type, flow_filter, consumed_resources, consumed_resource_type, page_number, page_size)",
      "parameters": [
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "object_type",
          "type": "list[str]"
        },
        {
          "name": "flow_filter",
          "type": "str"
        },
        {
          "name": "consumed_resources",
          "type": "bool"
        },
        {
          "name": "consumed_resource_type",
          "type": "list[str]"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/object": {
      "functionName": "get_architect_dependencytracking_object",
      "signature": "get_architect_dependencytracking_object(id, version, object_type, consumed_resources, consuming_resources, consumed_resource_type, consuming_resource_type, consumed_resource_request)",
      "parameters": [
        {
          "name": "id",
          "type": "str"
        },
        {
          "name": "version",
          "type": "str"
        },
        {
          "name": "object_type",
          "type": "str"
        },
        {
          "name": "consumed_resources",
          "type": "bool"
        },
        {
          "name": "consuming_resources",
          "type": "bool"
        },
        {
          "name": "consumed_resource_type",
          "type": "list[str]"
        },
        {
          "name": "consuming_resource_type",
          "type": "list[str]"
        },
        {
          "name": "consumed_resource_request",
          "type": "bool"
        }
      ],
      "return": "DependencyObject"
    },
    "GET /api/v2/architect/dependencytracking/types/{typeId}": {
      "functionName": "get_architect_dependencytracking_type",
      "signature": "get_architect_dependencytracking_type(type_id)",
      "parameters": [
        {
          "name": "type_id",
          "type": "str"
        }
      ],
      "return": "DependencyType"
    },
    "GET /api/v2/architect/dependencytracking/types": {
      "functionName": "get_architect_dependencytracking_types",
      "signature": "get_architect_dependencytracking_types(page_number, page_size)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "DependencyTypeEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/updatedresourceconsumers": {
      "functionName": "get_architect_dependencytracking_updatedresourceconsumers",
      "signature": "get_architect_dependencytracking_updatedresourceconsumers(name, object_type, consumed_resources, consumed_resource_type, page_number, page_size)",
      "parameters": [
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "object_type",
          "type": "list[str]"
        },
        {
          "name": "consumed_resources",
          "type": "bool"
        },
        {
          "name": "consumed_resource_type",
          "type": "list[str]"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "functionName": "get_architect_emergencygroup",
      "signature": "get_architect_emergencygroup(emergency_group_id)",
      "parameters": [
        {
          "name": "emergency_group_id",
          "type": "str"
        }
      ],
      "return": "EmergencyGroup"
    },
    "GET /api/v2/architect/emergencygroups": {
      "functionName": "get_architect_emergencygroups",
      "signature": "get_architect_emergencygroups(page_number, page_size, sort_by, sort_order, name)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "EmergencyGroupListing"
    },
    "GET /api/v2/architect/ivrs/{ivrId}": {
      "functionName": "get_architect_ivr",
      "signature": "get_architect_ivr(ivr_id)",
      "parameters": [
        {
          "name": "ivr_id",
          "type": "str"
        }
      ],
      "return": "IVR"
    },
    "GET /api/v2/architect/ivrs": {
      "functionName": "get_architect_ivrs",
      "signature": "get_architect_ivrs(page_number, page_size, sort_by, sort_order, name)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "IVREntityListing"
    },
    "GET /api/v2/architect/prompts/{promptId}": {
      "functionName": "get_architect_prompt",
      "signature": "get_architect_prompt(prompt_id)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        }
      ],
      "return": "Prompt"
    },
    "GET /api/v2/architect/prompts/{promptId}/history/{historyId}": {
      "functionName": "get_architect_prompt_history_history_id",
      "signature": "get_architect_prompt_history_history_id(prompt_id, history_id, page_number, page_size, sort_order, sort_by, action)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "history_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "action",
          "type": "list[str]"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "functionName": "get_architect_prompt_resource",
      "signature": "get_architect_prompt_resource(prompt_id, language_code)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ],
      "return": "PromptAsset"
    },
    "GET /api/v2/architect/prompts/{promptId}/resources": {
      "functionName": "get_architect_prompt_resources",
      "signature": "get_architect_prompt_resources(prompt_id, page_number, page_size)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "PromptAssetEntityListing"
    },
    "GET /api/v2/architect/prompts": {
      "functionName": "get_architect_prompts",
      "signature": "get_architect_prompts(page_number, page_size, name, description, name_or_description, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "name",
          "type": "list[str]"
        },
        {
          "name": "description",
          "type": "str"
        },
        {
          "name": "name_or_description",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "PromptEntityListing"
    },
    "GET /api/v2/architect/schedules/{scheduleId}": {
      "functionName": "get_architect_schedule",
      "signature": "get_architect_schedule(schedule_id)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        }
      ],
      "return": "Schedule"
    },
    "GET /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "functionName": "get_architect_schedulegroup",
      "signature": "get_architect_schedulegroup(schedule_group_id)",
      "parameters": [
        {
          "name": "schedule_group_id",
          "type": "str"
        }
      ],
      "return": "ScheduleGroup"
    },
    "GET /api/v2/architect/schedulegroups": {
      "functionName": "get_architect_schedulegroups",
      "signature": "get_architect_schedulegroups(page_number, page_size, sort_by, sort_order, name, schedule_ids, division_id)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "schedule_ids",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "ScheduleGroupEntityListing"
    },
    "GET /api/v2/architect/schedules": {
      "functionName": "get_architect_schedules",
      "signature": "get_architect_schedules(page_number, page_size, sort_by, sort_order, name, division_id)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "ScheduleEntityListing"
    },
    "GET /api/v2/architect/systemprompts/{promptId}": {
      "functionName": "get_architect_systemprompt",
      "signature": "get_architect_systemprompt(prompt_id)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        }
      ],
      "return": "SystemPrompt"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/history/{historyId}": {
      "functionName": "get_architect_systemprompt_history_history_id",
      "signature": "get_architect_systemprompt_history_history_id(prompt_id, history_id, page_number, page_size, sort_order, sort_by, action)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "history_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "action",
          "type": "list[str]"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "functionName": "get_architect_systemprompt_resource",
      "signature": "get_architect_systemprompt_resource(prompt_id, language_code)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/resources": {
      "functionName": "get_architect_systemprompt_resources",
      "signature": "get_architect_systemprompt_resources(prompt_id, page_number, page_size, sort_by, sort_order)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "SystemPromptAssetEntityListing"
    },
    "GET /api/v2/architect/systemprompts": {
      "functionName": "get_architect_systemprompts",
      "signature": "get_architect_systemprompts(page_number, page_size, sort_by, sort_order, name, description, name_or_description)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "description",
          "type": "str"
        },
        {
          "name": "name_or_description",
          "type": "str"
        }
      ],
      "return": "SystemPromptEntityListing"
    },
    "GET /api/v2/flows/{flowId}": {
      "functionName": "get_flow",
      "signature": "get_flow(flow_id, deleted)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "deleted",
          "type": "bool"
        }
      ],
      "return": "Flow"
    },
    "GET /api/v2/flows/{flowId}/history/{historyId}": {
      "functionName": "get_flow_history_history_id",
      "signature": "get_flow_history_history_id(flow_id, history_id, page_number, page_size, sort_order, sort_by, action)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "history_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "action",
          "type": "list[str]"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/flows/{flowId}/latestconfiguration": {
      "functionName": "get_flow_latestconfiguration",
      "signature": "get_flow_latestconfiguration(flow_id, deleted)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "deleted",
          "type": "bool"
        }
      ],
      "return": "object"
    },
    "GET /api/v2/flows/{flowId}/versions/{versionId}": {
      "functionName": "get_flow_version",
      "signature": "get_flow_version(flow_id, version_id, deleted)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "version_id",
          "type": "str"
        },
        {
          "name": "deleted",
          "type": "str"
        }
      ],
      "return": "FlowVersion"
    },
    "GET /api/v2/flows/{flowId}/versions/{versionId}/configuration": {
      "functionName": "get_flow_version_configuration",
      "signature": "get_flow_version_configuration(flow_id, version_id, deleted)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "version_id",
          "type": "str"
        },
        {
          "name": "deleted",
          "type": "str"
        }
      ],
      "return": "object"
    },
    "GET /api/v2/flows/{flowId}/versions": {
      "functionName": "get_flow_versions",
      "signature": "get_flow_versions(flow_id, page_number, page_size, deleted)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "deleted",
          "type": "bool"
        }
      ],
      "return": "FlowVersionEntityListing"
    },
    "GET /api/v2/flows": {
      "functionName": "get_flows",
      "signature": "get_flows(type, page_number, page_size, sort_by, sort_order, id, name, description, name_or_description, publish_version_id, editable_by, locked_by, locked_by_client_id, secure, deleted, include_schemas, published_after, published_before, division_id)",
      "parameters": [
        {
          "name": "type",
          "type": "list[str]"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "description",
          "type": "str"
        },
        {
          "name": "name_or_description",
          "type": "str"
        },
        {
          "name": "publish_version_id",
          "type": "str"
        },
        {
          "name": "editable_by",
          "type": "str"
        },
        {
          "name": "locked_by",
          "type": "str"
        },
        {
          "name": "locked_by_client_id",
          "type": "str"
        },
        {
          "name": "secure",
          "type": "str"
        },
        {
          "name": "deleted",
          "type": "bool"
        },
        {
          "name": "include_schemas",
          "type": "bool"
        },
        {
          "name": "published_after",
          "type": "str"
        },
        {
          "name": "published_before",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "FlowEntityListing"
    },
    "GET /api/v2/flows/datatables/{datatableId}": {
      "functionName": "get_flows_datatable",
      "signature": "get_flows_datatable(datatable_id, expand)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "DataTable"
    },
    "GET /api/v2/flows/datatables/{datatableId}/export/jobs/{exportJobId}": {
      "functionName": "get_flows_datatable_export_job",
      "signature": "get_flows_datatable_export_job(datatable_id, export_job_id)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "export_job_id",
          "type": "str"
        }
      ],
      "return": "DataTableExportJob"
    },
    "GET /api/v2/flows/datatables/{datatableId}/import/jobs/{importJobId}": {
      "functionName": "get_flows_datatable_import_job",
      "signature": "get_flows_datatable_import_job(datatable_id, import_job_id)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "import_job_id",
          "type": "str"
        }
      ],
      "return": "DataTableImportJob"
    },
    "GET /api/v2/flows/datatables/{datatableId}/import/jobs": {
      "functionName": "get_flows_datatable_import_jobs",
      "signature": "get_flows_datatable_import_jobs(datatable_id, page_number, page_size)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "DataTableImportEntityListing"
    },
    "GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "functionName": "get_flows_datatable_row",
      "signature": "get_flows_datatable_row(datatable_id, row_id, showbrief)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "row_id",
          "type": "str"
        },
        {
          "name": "showbrief",
          "type": "bool"
        }
      ],
      "return": "dict(str, object)"
    },
    "GET /api/v2/flows/datatables/{datatableId}/rows": {
      "functionName": "get_flows_datatable_rows",
      "signature": "get_flows_datatable_rows(datatable_id, page_number, page_size, showbrief)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "showbrief",
          "type": "bool"
        }
      ],
      "return": "DataTableRowEntityListing"
    },
    "GET /api/v2/flows/datatables": {
      "functionName": "get_flows_datatables",
      "signature": "get_flows_datatables(expand, page_number, page_size, sort_by, sort_order, division_id, name)",
      "parameters": [
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "DataTablesDomainEntityListing"
    },
    "GET /api/v2/flows/datatables/divisionviews/{datatableId}": {
      "functionName": "get_flows_datatables_divisionview",
      "signature": "get_flows_datatables_divisionview(datatable_id, expand)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "DataTable"
    },
    "GET /api/v2/flows/datatables/divisionviews": {
      "functionName": "get_flows_datatables_divisionviews",
      "signature": "get_flows_datatables_divisionviews(expand, page_number, page_size, sort_by, sort_order, division_id, name)",
      "parameters": [
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "DataTablesDomainEntityListing"
    },
    "GET /api/v2/flows/divisionviews": {
      "functionName": "get_flows_divisionviews",
      "signature": "get_flows_divisionviews(type, page_number, page_size, sort_by, sort_order, id, name, publish_version_id, published_after, published_before, division_id, include_schemas)",
      "parameters": [
        {
          "name": "type",
          "type": "list[str]"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "publish_version_id",
          "type": "str"
        },
        {
          "name": "published_after",
          "type": "str"
        },
        {
          "name": "published_before",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "include_schemas",
          "type": "bool"
        }
      ],
      "return": "FlowDivisionViewEntityListing"
    },
    "GET /api/v2/flows/executions/{flowExecutionId}": {
      "functionName": "get_flows_execution",
      "signature": "get_flows_execution(flow_execution_id)",
      "parameters": [
        {
          "name": "flow_execution_id",
          "type": "str"
        }
      ],
      "return": "FlowRuntimeExecution"
    },
    "GET /api/v2/flows/milestones/{milestoneId}": {
      "functionName": "get_flows_milestone",
      "signature": "get_flows_milestone(milestone_id)",
      "parameters": [
        {
          "name": "milestone_id",
          "type": "str"
        }
      ],
      "return": "FlowMilestone"
    },
    "GET /api/v2/flows/milestones": {
      "functionName": "get_flows_milestones",
      "signature": "get_flows_milestones(page_number, page_size, sort_by, sort_order, id, name, description, name_or_description, division_id)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "description",
          "type": "str"
        },
        {
          "name": "name_or_description",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "FlowMilestoneListing"
    },
    "GET /api/v2/flows/milestones/divisionviews": {
      "functionName": "get_flows_milestones_divisionviews",
      "signature": "get_flows_milestones_divisionviews(page_number, page_size, sort_by, sort_order, id, name, division_id)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "FlowMilestoneDivisionViewEntityListing"
    },
    "GET /api/v2/flows/outcomes/{flowOutcomeId}": {
      "functionName": "get_flows_outcome",
      "signature": "get_flows_outcome(flow_outcome_id)",
      "parameters": [
        {
          "name": "flow_outcome_id",
          "type": "str"
        }
      ],
      "return": "FlowOutcome"
    },
    "GET /api/v2/flows/outcomes": {
      "functionName": "get_flows_outcomes",
      "signature": "get_flows_outcomes(page_number, page_size, sort_by, sort_order, id, name, description, name_or_description, division_id)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "description",
          "type": "str"
        },
        {
          "name": "name_or_description",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "FlowOutcomeListing"
    },
    "GET /api/v2/flows/outcomes/divisionviews": {
      "functionName": "get_flows_outcomes_divisionviews",
      "signature": "get_flows_outcomes_divisionviews(page_number, page_size, sort_by, sort_order, id, name, division_id)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "FlowOutcomeDivisionViewEntityListing"
    },
    "POST /api/v2/architect/dependencytracking/build": {
      "functionName": "post_architect_dependencytracking_build",
      "signature": "post_architect_dependencytracking_build()"
    },
    "POST /api/v2/architect/emergencygroups": {
      "functionName": "post_architect_emergencygroups",
      "signature": "post_architect_emergencygroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EmergencyGroup"
        }
      ],
      "return": "EmergencyGroup"
    },
    "POST /api/v2/architect/ivrs": {
      "functionName": "post_architect_ivrs",
      "signature": "post_architect_ivrs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "IVR"
        }
      ],
      "return": "IVR"
    },
    "POST /api/v2/architect/prompts/{promptId}/history": {
      "functionName": "post_architect_prompt_history",
      "signature": "post_architect_prompt_history(prompt_id)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/architect/prompts/{promptId}/resources": {
      "functionName": "post_architect_prompt_resources",
      "signature": "post_architect_prompt_resources(prompt_id, body)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PromptAssetCreate"
        }
      ],
      "return": "PromptAsset"
    },
    "POST /api/v2/architect/prompts": {
      "functionName": "post_architect_prompts",
      "signature": "post_architect_prompts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Prompt"
        }
      ],
      "return": "Prompt"
    },
    "POST /api/v2/architect/schedulegroups": {
      "functionName": "post_architect_schedulegroups",
      "signature": "post_architect_schedulegroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ScheduleGroup"
        }
      ],
      "return": "ScheduleGroup"
    },
    "POST /api/v2/architect/schedules": {
      "functionName": "post_architect_schedules",
      "signature": "post_architect_schedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Schedule"
        }
      ],
      "return": "Schedule"
    },
    "POST /api/v2/architect/systemprompts/{promptId}/history": {
      "functionName": "post_architect_systemprompt_history",
      "signature": "post_architect_systemprompt_history(prompt_id)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/architect/systemprompts/{promptId}/resources": {
      "functionName": "post_architect_systemprompt_resources",
      "signature": "post_architect_systemprompt_resources(prompt_id, body)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SystemPromptAsset"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "POST /api/v2/flows/{flowId}/history": {
      "functionName": "post_flow_history",
      "signature": "post_flow_history(flow_id)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/{flowId}/versions": {
      "functionName": "post_flow_versions",
      "signature": "post_flow_versions(flow_id, body)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "object"
        }
      ],
      "return": "FlowVersion"
    },
    "POST /api/v2/flows": {
      "functionName": "post_flows",
      "signature": "post_flows(body, language)",
      "parameters": [
        {
          "name": "body",
          "type": "Flow"
        },
        {
          "name": "language",
          "type": "str"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/checkin": {
      "functionName": "post_flows_actions_checkin",
      "signature": "post_flows_actions_checkin(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "str"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/actions/checkout": {
      "functionName": "post_flows_actions_checkout",
      "signature": "post_flows_actions_checkout(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "str"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/deactivate": {
      "functionName": "post_flows_actions_deactivate",
      "signature": "post_flows_actions_deactivate(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "str"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/publish": {
      "functionName": "post_flows_actions_publish",
      "signature": "post_flows_actions_publish(flow, version)",
      "parameters": [
        {
          "name": "flow",
          "type": "str"
        },
        {
          "name": "version",
          "type": "str"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/actions/revert": {
      "functionName": "post_flows_actions_revert",
      "signature": "post_flows_actions_revert(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "str"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/unlock": {
      "functionName": "post_flows_actions_unlock",
      "signature": "post_flows_actions_unlock(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "str"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/datatables/{datatableId}/export/jobs": {
      "functionName": "post_flows_datatable_export_jobs",
      "signature": "post_flows_datatable_export_jobs(datatable_id)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        }
      ],
      "return": "DataTableExportJob"
    },
    "POST /api/v2/flows/datatables/{datatableId}/import/jobs": {
      "functionName": "post_flows_datatable_import_jobs",
      "signature": "post_flows_datatable_import_jobs(datatable_id, body)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DataTableImportJob"
        }
      ],
      "return": "DataTableImportJob"
    },
    "POST /api/v2/flows/datatables/{datatableId}/rows": {
      "functionName": "post_flows_datatable_rows",
      "signature": "post_flows_datatable_rows(datatable_id, data_table_row)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "data_table_row",
          "type": "object"
        }
      ],
      "return": "dict(str, object)"
    },
    "POST /api/v2/flows/datatables": {
      "functionName": "post_flows_datatables",
      "signature": "post_flows_datatables(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DataTable"
        }
      ],
      "return": "DataTable"
    },
    "POST /api/v2/flows/executions": {
      "functionName": "post_flows_executions",
      "signature": "post_flows_executions(flow_launch_request)",
      "parameters": [
        {
          "name": "flow_launch_request",
          "type": "FlowExecutionLaunchRequest"
        }
      ],
      "return": "FlowExecutionLaunchResponse"
    },
    "POST /api/v2/flows/milestones": {
      "functionName": "post_flows_milestones",
      "signature": "post_flows_milestones(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowMilestone"
        }
      ],
      "return": "FlowMilestone"
    },
    "POST /api/v2/flows/outcomes": {
      "functionName": "post_flows_outcomes",
      "signature": "post_flows_outcomes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowOutcome"
        }
      ],
      "return": "FlowOutcome"
    },
    "PUT /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "functionName": "put_architect_emergencygroup",
      "signature": "put_architect_emergencygroup(emergency_group_id, body)",
      "parameters": [
        {
          "name": "emergency_group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EmergencyGroup"
        }
      ],
      "return": "EmergencyGroup"
    },
    "PUT /api/v2/architect/ivrs/{ivrId}": {
      "functionName": "put_architect_ivr",
      "signature": "put_architect_ivr(ivr_id, body)",
      "parameters": [
        {
          "name": "ivr_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "IVR"
        }
      ],
      "return": "IVR"
    },
    "PUT /api/v2/architect/prompts/{promptId}": {
      "functionName": "put_architect_prompt",
      "signature": "put_architect_prompt(prompt_id, body)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Prompt"
        }
      ],
      "return": "Prompt"
    },
    "PUT /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "functionName": "put_architect_prompt_resource",
      "signature": "put_architect_prompt_resource(prompt_id, language_code, body)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PromptAsset"
        }
      ],
      "return": "PromptAsset"
    },
    "PUT /api/v2/architect/schedules/{scheduleId}": {
      "functionName": "put_architect_schedule",
      "signature": "put_architect_schedule(schedule_id, body)",
      "parameters": [
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Schedule"
        }
      ],
      "return": "Schedule"
    },
    "PUT /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "functionName": "put_architect_schedulegroup",
      "signature": "put_architect_schedulegroup(schedule_group_id, body)",
      "parameters": [
        {
          "name": "schedule_group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScheduleGroup"
        }
      ],
      "return": "ScheduleGroup"
    },
    "PUT /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "functionName": "put_architect_systemprompt_resource",
      "signature": "put_architect_systemprompt_resource(prompt_id, language_code, body)",
      "parameters": [
        {
          "name": "prompt_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SystemPromptAsset"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "PUT /api/v2/flows/{flowId}": {
      "functionName": "put_flow",
      "signature": "put_flow(flow_id, body)",
      "parameters": [
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Flow"
        }
      ],
      "return": "Flow"
    },
    "PUT /api/v2/flows/datatables/{datatableId}": {
      "functionName": "put_flows_datatable",
      "signature": "put_flows_datatable(datatable_id, body, expand)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DataTable"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "DataTable"
    },
    "PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "functionName": "put_flows_datatable_row",
      "signature": "put_flows_datatable_row(datatable_id, row_id, body)",
      "parameters": [
        {
          "name": "datatable_id",
          "type": "str"
        },
        {
          "name": "row_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "object"
        }
      ],
      "return": "dict(str, object)"
    },
    "PUT /api/v2/flows/milestones/{milestoneId}": {
      "functionName": "put_flows_milestone",
      "signature": "put_flows_milestone(milestone_id, body)",
      "parameters": [
        {
          "name": "milestone_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "FlowMilestone"
        }
      ],
      "return": "FlowMilestone"
    },
    "PUT /api/v2/flows/outcomes/{flowOutcomeId}": {
      "functionName": "put_flows_outcome",
      "signature": "put_flows_outcome(flow_outcome_id, body)",
      "parameters": [
        {
          "name": "flow_outcome_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "FlowOutcome"
        }
      ],
      "return": "Operation"
    }
  },
  "audit": {
    "GET /api/v2/audits/query/realtime/servicemapping": {
      "functionName": "get_audits_query_realtime_servicemapping",
      "signature": "get_audits_query_realtime_servicemapping()",
      "return": "AuditQueryServiceMapping"
    },
    "GET /api/v2/audits/query/servicemapping": {
      "functionName": "get_audits_query_servicemapping",
      "signature": "get_audits_query_servicemapping()",
      "return": "AuditQueryServiceMapping"
    },
    "GET /api/v2/audits/query/{transactionId}": {
      "functionName": "get_audits_query_transaction_id",
      "signature": "get_audits_query_transaction_id(transaction_id)",
      "parameters": [
        {
          "name": "transaction_id",
          "type": "str"
        }
      ],
      "return": "AuditQueryExecutionStatusResponse"
    },
    "GET /api/v2/audits/query/{transactionId}/results": {
      "functionName": "get_audits_query_transaction_id_results",
      "signature": "get_audits_query_transaction_id_results(transaction_id, cursor, page_size, expand)",
      "parameters": [
        {
          "name": "transaction_id",
          "type": "str"
        },
        {
          "name": "cursor",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "AuditQueryExecutionResultsResponse"
    },
    "POST /api/v2/audits/query": {
      "functionName": "post_audits_query",
      "signature": "post_audits_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AuditQueryRequest"
        }
      ],
      "return": "AuditQueryExecutionStatusResponse"
    },
    "POST /api/v2/audits/query/realtime": {
      "functionName": "post_audits_query_realtime",
      "signature": "post_audits_query_realtime(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "AuditRealtimeQueryRequest"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "AuditRealtimeQueryResultsResponse"
    }
  },
  "authorization": {
    "DELETE /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "delete_authorization_division",
      "signature": "delete_authorization_division(division_id, force)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "force",
          "type": "bool"
        }
      ]
    },
    "DELETE /api/v2/authorization/roles/{roleId}": {
      "functionName": "delete_authorization_role",
      "signature": "delete_authorization_role(role_id)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "functionName": "delete_authorization_subject_division_role",
      "signature": "delete_authorization_subject_division_role(subject_id, division_id, role_id)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "role_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "get_authorization_division",
      "signature": "get_authorization_division(division_id, object_count)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "object_count",
          "type": "bool"
        }
      ],
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/{divisionId}/grants": {
      "functionName": "get_authorization_division_grants",
      "signature": "get_authorization_division_grants(division_id, page_number, page_size)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "AuthzDivisionGrantEntityListing"
    },
    "GET /api/v2/authorization/divisions": {
      "functionName": "get_authorization_divisions",
      "signature": "get_authorization_divisions(page_size, page_number, sort_by, expand, next_page, previous_page, object_count, id, name)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "object_count",
          "type": "bool"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "AuthzDivisionEntityListing"
    },
    "GET /api/v2/authorization/divisions/home": {
      "functionName": "get_authorization_divisions_home",
      "signature": "get_authorization_divisions_home()",
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/limit": {
      "functionName": "get_authorization_divisions_limit",
      "signature": "get_authorization_divisions_limit()",
      "return": "int"
    },
    "GET /api/v2/authorization/divisionspermitted/me": {
      "functionName": "get_authorization_divisionspermitted_me",
      "signature": "get_authorization_divisionspermitted_me(permission, name)",
      "parameters": [
        {
          "name": "permission",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "list[AuthzDivision]"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/me": {
      "functionName": "get_authorization_divisionspermitted_paged_me",
      "signature": "get_authorization_divisionspermitted_paged_me(permission, page_number, page_size)",
      "parameters": [
        {
          "name": "permission",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/{subjectId}": {
      "functionName": "get_authorization_divisionspermitted_paged_subject_id",
      "signature": "get_authorization_divisionspermitted_paged_subject_id(subject_id, permission, page_number, page_size)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "permission",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/permissions": {
      "functionName": "get_authorization_permissions",
      "signature": "get_authorization_permissions(page_size, page_number, query_type, query)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "query_type",
          "type": "str"
        },
        {
          "name": "query",
          "type": "str"
        }
      ],
      "return": "PermissionCollectionEntityListing"
    },
    "GET /api/v2/authorization/products": {
      "functionName": "get_authorization_products",
      "signature": "get_authorization_products()",
      "return": "OrganizationProductEntityListing"
    },
    "GET /api/v2/authorization/roles/{roleId}": {
      "functionName": "get_authorization_role",
      "signature": "get_authorization_role(role_id, expand)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}": {
      "functionName": "get_authorization_role_comparedefault_right_role_id",
      "signature": "get_authorization_role_comparedefault_right_role_id(left_role_id, right_role_id)",
      "parameters": [
        {
          "name": "left_role_id",
          "type": "str"
        },
        {
          "name": "right_role_id",
          "type": "str"
        }
      ],
      "return": "DomainOrgRoleDifference"
    },
    "GET /api/v2/authorization/roles/{roleId}/subjectgrants": {
      "functionName": "get_authorization_role_subjectgrants",
      "signature": "get_authorization_role_subjectgrants(role_id, page_size, page_number, sort_by, expand, next_page, previous_page)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        }
      ],
      "return": "SubjectDivisionGrantsEntityListing"
    },
    "GET /api/v2/authorization/roles/{roleId}/users": {
      "functionName": "get_authorization_role_users",
      "signature": "get_authorization_role_users(role_id, page_size, page_number)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/authorization/roles": {
      "functionName": "get_authorization_roles",
      "signature": "get_authorization_roles(page_size, page_number, sort_by, expand, next_page, previous_page, name, permission, default_role_id, user_count, id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "permission",
          "type": "list[str]"
        },
        {
          "name": "default_role_id",
          "type": "list[str]"
        },
        {
          "name": "user_count",
          "type": "bool"
        },
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "GET /api/v2/authorization/subjects/{subjectId}": {
      "functionName": "get_authorization_subject",
      "signature": "get_authorization_subject(subject_id)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        }
      ],
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/me": {
      "functionName": "get_authorization_subjects_me",
      "signature": "get_authorization_subjects_me()",
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/rolecounts": {
      "functionName": "get_authorization_subjects_rolecounts",
      "signature": "get_authorization_subjects_rolecounts(id)",
      "parameters": [
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "dict(str, object)"
    },
    "GET /api/v2/users/{userId}/roles": {
      "functionName": "get_user_roles",
      "signature": "get_user_roles(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "UserAuthorization"
    },
    "PATCH /api/v2/authorization/roles/{roleId}": {
      "functionName": "patch_authorization_role",
      "signature": "patch_authorization_role(role_id, body)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DomainOrganizationRole"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}": {
      "functionName": "post_authorization_division_object",
      "signature": "post_authorization_division_object(division_id, object_type, body)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "object_type",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ]
    },
    "POST /api/v2/authorization/divisions/{divisionId}/restore": {
      "functionName": "post_authorization_division_restore",
      "signature": "post_authorization_division_restore(division_id, body)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/divisions": {
      "functionName": "post_authorization_divisions",
      "signature": "post_authorization_divisions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/roles/{roleId}": {
      "functionName": "post_authorization_role",
      "signature": "post_authorization_role(role_id, body, subject_type)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SubjectDivisions"
        },
        {
          "name": "subject_type",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}": {
      "functionName": "post_authorization_role_comparedefault_right_role_id",
      "signature": "post_authorization_role_comparedefault_right_role_id(left_role_id, right_role_id, body)",
      "parameters": [
        {
          "name": "left_role_id",
          "type": "str"
        },
        {
          "name": "right_role_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DomainOrganizationRole"
        }
      ],
      "return": "DomainOrgRoleDifference"
    },
    "POST /api/v2/authorization/roles": {
      "functionName": "post_authorization_roles",
      "signature": "post_authorization_roles(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DomainOrganizationRoleCreate"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "POST /api/v2/authorization/roles/default": {
      "functionName": "post_authorization_roles_default",
      "signature": "post_authorization_roles_default(force)",
      "parameters": [
        {
          "name": "force",
          "type": "bool"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkadd": {
      "functionName": "post_authorization_subject_bulkadd",
      "signature": "post_authorization_subject_bulkadd(subject_id, body, subject_type)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        },
        {
          "name": "subject_type",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkremove": {
      "functionName": "post_authorization_subject_bulkremove",
      "signature": "post_authorization_subject_bulkremove(subject_id, body)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkreplace": {
      "functionName": "post_authorization_subject_bulkreplace",
      "signature": "post_authorization_subject_bulkreplace(subject_id, body, subject_type)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        },
        {
          "name": "subject_type",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "functionName": "post_authorization_subject_division_role",
      "signature": "post_authorization_subject_division_role(subject_id, division_id, role_id, subject_type)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "subject_type",
          "type": "str"
        }
      ]
    },
    "PUT /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "put_authorization_division",
      "signature": "put_authorization_division(division_id, body)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "PUT /api/v2/authorization/roles/{roleId}": {
      "functionName": "put_authorization_role",
      "signature": "put_authorization_role(role_id, body)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DomainOrganizationRoleUpdate"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "PUT /api/v2/authorization/roles/{roleId}/users/add": {
      "functionName": "put_authorization_role_users_add",
      "signature": "put_authorization_role_users_add(role_id, body)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "list[str]"
    },
    "PUT /api/v2/authorization/roles/{roleId}/users/remove": {
      "functionName": "put_authorization_role_users_remove",
      "signature": "put_authorization_role_users_remove(role_id, body)",
      "parameters": [
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "list[str]"
    },
    "PUT /api/v2/authorization/roles/default": {
      "functionName": "put_authorization_roles_default",
      "signature": "put_authorization_roles_default(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[DomainOrganizationRole]"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "PUT /api/v2/users/{userId}/roles": {
      "functionName": "put_user_roles",
      "signature": "put_user_roles(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "UserAuthorization"
    }
  },
  "billing": {
    "GET /api/v2/billing/reports/billableusage": {
      "functionName": "get_billing_reports_billableusage",
      "signature": "get_billing_reports_billableusage(start_date, end_date)",
      "parameters": [
        {
          "name": "start_date",
          "type": "datetime"
        },
        {
          "name": "end_date",
          "type": "datetime"
        }
      ],
      "return": "BillingUsageReport"
    },
    "GET /api/v2/billing/trusteebillingoverview/{trustorOrgId}": {
      "functionName": "get_billing_trusteebillingoverview_trustor_org_id",
      "signature": "get_billing_trusteebillingoverview_trustor_org_id(trustor_org_id, billing_period_index)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        },
        {
          "name": "billing_period_index",
          "type": "int"
        }
      ],
      "return": "TrusteeBillingOverview"
    }
  },
  "chat": {
    "GET /api/v2/chat/settings": {
      "functionName": "get_chat_settings",
      "signature": "get_chat_settings()",
      "return": "ChatSettings"
    },
    "PATCH /api/v2/chat/settings": {
      "functionName": "patch_chat_settings",
      "signature": "patch_chat_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ChatSettings"
        }
      ],
      "return": "ChatSettings"
    },
    "PUT /api/v2/chat/settings": {
      "functionName": "put_chat_settings",
      "signature": "put_chat_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ChatSettings"
        }
      ],
      "return": "ChatSettings"
    }
  },
  "coaching": {
    "DELETE /api/v2/coaching/appointments/{appointmentId}": {
      "functionName": "delete_coaching_appointment",
      "signature": "delete_coaching_appointment(appointment_id)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        }
      ],
      "return": "CoachingAppointmentReference"
    },
    "DELETE /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "functionName": "delete_coaching_appointment_annotation",
      "signature": "delete_coaching_appointment_annotation(appointment_id, annotation_id)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "annotation_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/coaching/appointments/{appointmentId}": {
      "functionName": "get_coaching_appointment",
      "signature": "get_coaching_appointment(appointment_id)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "functionName": "get_coaching_appointment_annotation",
      "signature": "get_coaching_appointment_annotation(appointment_id, annotation_id)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "annotation_id",
          "type": "str"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/annotations": {
      "functionName": "get_coaching_appointment_annotations",
      "signature": "get_coaching_appointment_annotations(appointment_id, page_number, page_size)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "CoachingAnnotationList"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/statuses": {
      "functionName": "get_coaching_appointment_statuses",
      "signature": "get_coaching_appointment_statuses(appointment_id, page_number, page_size)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "CoachingAppointmentStatusResponseList"
    },
    "GET /api/v2/coaching/appointments": {
      "functionName": "get_coaching_appointments",
      "signature": "get_coaching_appointments(user_ids, interval, page_number, page_size, statuses, facilitator_ids, sort_order, relationships, completion_interval, overdue, interval_condition)",
      "parameters": [
        {
          "name": "user_ids",
          "type": "list[str]"
        },
        {
          "name": "interval",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "statuses",
          "type": "list[str]"
        },
        {
          "name": "facilitator_ids",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "relationships",
          "type": "list[str]"
        },
        {
          "name": "completion_interval",
          "type": "str"
        },
        {
          "name": "overdue",
          "type": "str"
        },
        {
          "name": "interval_condition",
          "type": "str"
        }
      ],
      "return": "CoachingAppointmentResponseList"
    },
    "GET /api/v2/coaching/appointments/me": {
      "functionName": "get_coaching_appointments_me",
      "signature": "get_coaching_appointments_me(interval, page_number, page_size, statuses, facilitator_ids, sort_order, relationships, completion_interval, overdue, interval_condition)",
      "parameters": [
        {
          "name": "interval",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "statuses",
          "type": "list[str]"
        },
        {
          "name": "facilitator_ids",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "relationships",
          "type": "list[str]"
        },
        {
          "name": "completion_interval",
          "type": "str"
        },
        {
          "name": "overdue",
          "type": "str"
        },
        {
          "name": "interval_condition",
          "type": "str"
        }
      ],
      "return": "CoachingAppointmentResponseList"
    },
    "GET /api/v2/coaching/notifications/{notificationId}": {
      "functionName": "get_coaching_notification",
      "signature": "get_coaching_notification(notification_id, expand)",
      "parameters": [
        {
          "name": "notification_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "CoachingNotification"
    },
    "GET /api/v2/coaching/notifications": {
      "functionName": "get_coaching_notifications",
      "signature": "get_coaching_notifications(page_number, page_size, expand)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "CoachingNotificationList"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}": {
      "functionName": "patch_coaching_appointment",
      "signature": "patch_coaching_appointment(appointment_id, body)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateCoachingAppointmentRequest"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "functionName": "patch_coaching_appointment_annotation",
      "signature": "patch_coaching_appointment_annotation(appointment_id, annotation_id, body)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "annotation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CoachingAnnotation"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}/status": {
      "functionName": "patch_coaching_appointment_status",
      "signature": "patch_coaching_appointment_status(appointment_id, body)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CoachingAppointmentStatusRequest"
        }
      ],
      "return": "CoachingAppointmentStatusResponse"
    },
    "PATCH /api/v2/coaching/notifications/{notificationId}": {
      "functionName": "patch_coaching_notification",
      "signature": "patch_coaching_notification(notification_id, body)",
      "parameters": [
        {
          "name": "notification_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CoachingNotification"
        }
      ],
      "return": "CoachingNotification"
    },
    "POST /api/v2/coaching/appointments/{appointmentId}/annotations": {
      "functionName": "post_coaching_appointment_annotations",
      "signature": "post_coaching_appointment_annotations(appointment_id, body)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CoachingAnnotationCreateRequest"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "POST /api/v2/coaching/appointments/{appointmentId}/conversations": {
      "functionName": "post_coaching_appointment_conversations",
      "signature": "post_coaching_appointment_conversations(appointment_id, body)",
      "parameters": [
        {
          "name": "appointment_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AddConversationRequest"
        }
      ],
      "return": "AddConversationResponse"
    },
    "POST /api/v2/coaching/appointments": {
      "functionName": "post_coaching_appointments",
      "signature": "post_coaching_appointments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateCoachingAppointmentRequest"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "POST /api/v2/coaching/appointments/aggregates/query": {
      "functionName": "post_coaching_appointments_aggregates_query",
      "signature": "post_coaching_appointments_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CoachingAppointmentAggregateRequest"
        }
      ],
      "return": "CoachingAppointmentAggregateResponse"
    },
    "POST /api/v2/coaching/scheduleslots/query": {
      "functionName": "post_coaching_scheduleslots_query",
      "signature": "post_coaching_scheduleslots_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CoachingSlotsRequest"
        }
      ],
      "return": "CoachingSlotsResponse"
    }
  },
  "contentmanagement": {
    "DELETE /api/v2/contentmanagement/documents/{documentId}": {
      "functionName": "delete_contentmanagement_document",
      "signature": "delete_contentmanagement_document(document_id, override)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "override",
          "type": "bool"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/shares/{shareId}": {
      "functionName": "delete_contentmanagement_share",
      "signature": "delete_contentmanagement_share(share_id)",
      "parameters": [
        {
          "name": "share_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/status/{statusId}": {
      "functionName": "delete_contentmanagement_status_status_id",
      "signature": "delete_contentmanagement_status_status_id(status_id)",
      "parameters": [
        {
          "name": "status_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "functionName": "delete_contentmanagement_workspace",
      "signature": "delete_contentmanagement_workspace(workspace_id, move_children_to_workspace_id)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "move_children_to_workspace_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "functionName": "delete_contentmanagement_workspace_member",
      "signature": "delete_contentmanagement_workspace_member(workspace_id, member_id)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "functionName": "delete_contentmanagement_workspace_tagvalue",
      "signature": "delete_contentmanagement_workspace_tagvalue(workspace_id, tag_id)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "tag_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/contentmanagement/documents/{documentId}": {
      "functionName": "get_contentmanagement_document",
      "signature": "get_contentmanagement_document(document_id, expand)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "Document"
    },
    "GET /api/v2/contentmanagement/documents/{documentId}/audits": {
      "functionName": "get_contentmanagement_document_audits",
      "signature": "get_contentmanagement_document_audits(document_id, page_size, page_number, transaction_filter, level, sort_by, sort_order)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "transaction_filter",
          "type": "str"
        },
        {
          "name": "level",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "DocumentAuditEntityListing"
    },
    "GET /api/v2/contentmanagement/documents/{documentId}/content": {
      "functionName": "get_contentmanagement_document_content",
      "signature": "get_contentmanagement_document_content(document_id, disposition, content_type)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "disposition",
          "type": "str"
        },
        {
          "name": "content_type",
          "type": "str"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/contentmanagement/documents": {
      "functionName": "get_contentmanagement_documents",
      "signature": "get_contentmanagement_documents(workspace_id, name, expand, page_size, page_number, sort_by, sort_order)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "DocumentEntityListing"
    },
    "GET /api/v2/contentmanagement/query": {
      "functionName": "get_contentmanagement_query",
      "signature": "get_contentmanagement_query(query_phrase, page_size, page_number, sort_by, sort_order, expand)",
      "parameters": [
        {
          "name": "query_phrase",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "QueryResults"
    },
    "GET /api/v2/contentmanagement/securityprofiles/{securityProfileId}": {
      "functionName": "get_contentmanagement_securityprofile",
      "signature": "get_contentmanagement_securityprofile(security_profile_id)",
      "parameters": [
        {
          "name": "security_profile_id",
          "type": "str"
        }
      ],
      "return": "SecurityProfile"
    },
    "GET /api/v2/contentmanagement/securityprofiles": {
      "functionName": "get_contentmanagement_securityprofiles",
      "signature": "get_contentmanagement_securityprofiles()",
      "return": "SecurityProfileEntityListing"
    },
    "GET /api/v2/contentmanagement/shares/{shareId}": {
      "functionName": "get_contentmanagement_share",
      "signature": "get_contentmanagement_share(share_id, expand)",
      "parameters": [
        {
          "name": "share_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "Share"
    },
    "GET /api/v2/contentmanagement/shared/{sharedId}": {
      "functionName": "get_contentmanagement_shared_shared_id",
      "signature": "get_contentmanagement_shared_shared_id(shared_id, redirect, disposition, content_type, expand)",
      "parameters": [
        {
          "name": "shared_id",
          "type": "str"
        },
        {
          "name": "redirect",
          "type": "bool"
        },
        {
          "name": "disposition",
          "type": "str"
        },
        {
          "name": "content_type",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "SharedResponse"
    },
    "GET /api/v2/contentmanagement/shares": {
      "functionName": "get_contentmanagement_shares",
      "signature": "get_contentmanagement_shares(entity_id, expand, page_size, page_number)",
      "parameters": [
        {
          "name": "entity_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "ShareEntityListing"
    },
    "GET /api/v2/contentmanagement/status": {
      "functionName": "get_contentmanagement_status",
      "signature": "get_contentmanagement_status(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "CommandStatusEntityListing"
    },
    "GET /api/v2/contentmanagement/status/{statusId}": {
      "functionName": "get_contentmanagement_status_status_id",
      "signature": "get_contentmanagement_status_status_id(status_id)",
      "parameters": [
        {
          "name": "status_id",
          "type": "str"
        }
      ],
      "return": "CommandStatus"
    },
    "GET /api/v2/contentmanagement/usage": {
      "functionName": "get_contentmanagement_usage",
      "signature": "get_contentmanagement_usage()",
      "return": "Usage"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "functionName": "get_contentmanagement_workspace",
      "signature": "get_contentmanagement_workspace(workspace_id, expand)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "Workspace"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/documents": {
      "functionName": "get_contentmanagement_workspace_documents",
      "signature": "get_contentmanagement_workspace_documents(workspace_id, expand, page_size, page_number, sort_by, sort_order)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "DocumentEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "functionName": "get_contentmanagement_workspace_member",
      "signature": "get_contentmanagement_workspace_member(workspace_id, member_id, expand)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "WorkspaceMember"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/members": {
      "functionName": "get_contentmanagement_workspace_members",
      "signature": "get_contentmanagement_workspace_members(workspace_id, page_size, page_number, expand)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "WorkspaceMemberEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "functionName": "get_contentmanagement_workspace_tagvalue",
      "signature": "get_contentmanagement_workspace_tagvalue(workspace_id, tag_id, expand)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "tag_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "TagValue"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues": {
      "functionName": "get_contentmanagement_workspace_tagvalues",
      "signature": "get_contentmanagement_workspace_tagvalues(workspace_id, value, page_size, page_number, expand)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "value",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "TagValueEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces": {
      "functionName": "get_contentmanagement_workspaces",
      "signature": "get_contentmanagement_workspaces(page_size, page_number, access, expand)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "access",
          "type": "list[str]"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "WorkspaceEntityListing"
    },
    "POST /api/v2/contentmanagement/auditquery": {
      "functionName": "post_contentmanagement_auditquery",
      "signature": "post_contentmanagement_auditquery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContentQueryRequest"
        }
      ],
      "return": "QueryResults"
    },
    "POST /api/v2/contentmanagement/documents/{documentId}": {
      "functionName": "post_contentmanagement_document",
      "signature": "post_contentmanagement_document(document_id, body, expand, override)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DocumentUpdate"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "override",
          "type": "bool"
        }
      ],
      "return": "Document"
    },
    "POST /api/v2/contentmanagement/documents/{documentId}/content": {
      "functionName": "post_contentmanagement_document_content",
      "signature": "post_contentmanagement_document_content(document_id, body, override)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ReplaceRequest"
        },
        {
          "name": "override",
          "type": "bool"
        }
      ],
      "return": "ReplaceResponse"
    },
    "POST /api/v2/contentmanagement/documents": {
      "functionName": "post_contentmanagement_documents",
      "signature": "post_contentmanagement_documents(body, copy_source, move_source, override)",
      "parameters": [
        {
          "name": "body",
          "type": "DocumentUpload"
        },
        {
          "name": "copy_source",
          "type": "str"
        },
        {
          "name": "move_source",
          "type": "str"
        },
        {
          "name": "override",
          "type": "bool"
        }
      ],
      "return": "Document"
    },
    "POST /api/v2/contentmanagement/query": {
      "functionName": "post_contentmanagement_query",
      "signature": "post_contentmanagement_query(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "QueryRequest"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "QueryResults"
    },
    "POST /api/v2/contentmanagement/shares": {
      "functionName": "post_contentmanagement_shares",
      "signature": "post_contentmanagement_shares(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateShareRequest"
        }
      ],
      "return": "CreateShareResponse"
    },
    "POST /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues": {
      "functionName": "post_contentmanagement_workspace_tagvalues",
      "signature": "post_contentmanagement_workspace_tagvalues(workspace_id, body)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TagValue"
        }
      ],
      "return": "TagValue"
    },
    "POST /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/query": {
      "functionName": "post_contentmanagement_workspace_tagvalues_query",
      "signature": "post_contentmanagement_workspace_tagvalues_query(workspace_id, body, expand)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TagQueryRequest"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "TagValueEntityListing"
    },
    "POST /api/v2/contentmanagement/workspaces": {
      "functionName": "post_contentmanagement_workspaces",
      "signature": "post_contentmanagement_workspaces(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WorkspaceCreate"
        }
      ],
      "return": "Workspace"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "functionName": "put_contentmanagement_workspace",
      "signature": "put_contentmanagement_workspace(workspace_id, body)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Workspace"
        }
      ],
      "return": "Workspace"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "functionName": "put_contentmanagement_workspace_member",
      "signature": "put_contentmanagement_workspace_member(workspace_id, member_id, body)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WorkspaceMember"
        }
      ],
      "return": "WorkspaceMember"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "functionName": "put_contentmanagement_workspace_tagvalue",
      "signature": "put_contentmanagement_workspace_tagvalue(workspace_id, tag_id, body)",
      "parameters": [
        {
          "name": "workspace_id",
          "type": "str"
        },
        {
          "name": "tag_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TagValue"
        }
      ],
      "return": "TagValue"
    }
  },
  "conversations": {
    "DELETE /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "functionName": "delete_analytics_conversations_details_job",
      "signature": "delete_analytics_conversations_details_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}": {
      "functionName": "delete_conversation_participant_code",
      "signature": "delete_conversation_participant_code(conversation_id, participant_id, add_communication_code)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "add_communication_code",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason": {
      "functionName": "delete_conversation_participant_flaggedreason",
      "signature": "delete_conversation_participant_flaggedreason(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "functionName": "delete_conversations_call_participant_consult",
      "signature": "delete_conversations_call_participant_consult(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/emails/{conversationId}/messages/draft/attachments/{attachmentId}": {
      "functionName": "delete_conversations_email_messages_draft_attachment",
      "signature": "delete_conversations_email_messages_draft_attachment(conversation_id, attachment_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "attachment_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "functionName": "delete_conversations_messaging_integrations_facebook_integration_id",
      "signature": "delete_conversations_messaging_integrations_facebook_integration_id(integration_id)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "functionName": "delete_conversations_messaging_integrations_line_integration_id",
      "signature": "delete_conversations_messaging_integrations_line_integration_id(integration_id)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "functionName": "delete_conversations_messaging_integrations_open_integration_id",
      "signature": "delete_conversations_messaging_integrations_open_integration_id(integration_id)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "functionName": "delete_conversations_messaging_integrations_twitter_integration_id",
      "signature": "delete_conversations_messaging_integrations_twitter_integration_id(integration_id)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "functionName": "delete_conversations_messaging_integrations_whatsapp_integration_id",
      "signature": "delete_conversations_messaging_integrations_whatsapp_integration_id(integration_id)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "delete_conversations_messaging_supportedcontent_supported_content_id",
      "signature": "delete_conversations_messaging_supportedcontent_supported_content_id(supported_content_id)",
      "parameters": [
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/analytics/conversations/{conversationId}/details": {
      "functionName": "get_analytics_conversation_details",
      "signature": "get_analytics_conversation_details(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributes"
    },
    "GET /api/v2/analytics/conversations/details": {
      "functionName": "get_analytics_conversations_details",
      "signature": "get_analytics_conversations_details(id)",
      "parameters": [
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "functionName": "get_analytics_conversations_details_job",
      "signature": "get_analytics_conversations_details_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}/results": {
      "functionName": "get_analytics_conversations_details_job_results",
      "signature": "get_analytics_conversations_details_job_results(job_id, cursor, page_size)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        },
        {
          "name": "cursor",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "AnalyticsConversationAsyncQueryResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/availability": {
      "functionName": "get_analytics_conversations_details_jobs_availability",
      "signature": "get_analytics_conversations_details_jobs_availability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/conversations/{conversationId}": {
      "functionName": "get_conversation",
      "signature": "get_conversation(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "Conversation"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions/{secureSessionId}": {
      "functionName": "get_conversation_participant_secureivrsession",
      "signature": "get_conversation_participant_secureivrsession(conversation_id, participant_id, secure_session_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "secure_session_id",
          "type": "str"
        }
      ],
      "return": "SecureSession"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions": {
      "functionName": "get_conversation_participant_secureivrsessions",
      "signature": "get_conversation_participant_secureivrsessions(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ],
      "return": "SecureSessionEntityListing"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "get_conversation_participant_wrapup",
      "signature": "get_conversation_participant_wrapup(conversation_id, participant_id, provisional)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "provisional",
          "type": "bool"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "get_conversation_participant_wrapupcodes",
      "signature": "get_conversation_participant_wrapupcodes(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ],
      "return": "list[WrapupCode]"
    },
    "GET /api/v2/conversations": {
      "functionName": "get_conversations",
      "signature": "get_conversations(communication_type)",
      "parameters": [
        {
          "name": "communication_type",
          "type": "str"
        }
      ],
      "return": "ConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/{conversationId}": {
      "functionName": "get_conversations_call",
      "signature": "get_conversations_call(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "CallConversation"
    },
    "GET /api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "get_conversations_call_participant_wrapup",
      "signature": "get_conversations_call_participant_wrapup(conversation_id, participant_id, provisional)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "provisional",
          "type": "bool"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "get_conversations_call_participant_wrapupcodes",
      "signature": "get_conversations_call_participant_wrapupcodes(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ],
      "return": "list[WrapupCode]"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}": {
      "functionName": "get_conversations_callback",
      "signature": "get_conversations_callback(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "CallbackConversation"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "get_conversations_callback_participant_wrapup",
      "signature": "get_conversations_callback_participant_wrapup(conversation_id, participant_id, provisional)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "provisional",
          "type": "bool"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "get_conversations_callback_participant_wrapupcodes",
      "signature": "get_conversations_callback_participant_wrapupcodes(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ],
      "return": "list[WrapupCode]"
    },
    "GET /api/v2/conversations/callbacks": {
      "functionName": "get_conversations_callbacks",
      "signature": "get_conversations_callbacks()",
      "return": "CallbackConversationEntityListing"
    },
    "GET /api/v2/conversations/calls": {
      "functionName": "get_conversations_calls",
      "signature": "get_conversations_calls()",
      "return": "CallConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/history": {
      "functionName": "get_conversations_calls_history",
      "signature": "get_conversations_calls_history(page_size, page_number, interval, expand)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "interval",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "CallHistoryConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/maximumconferenceparties": {
      "functionName": "get_conversations_calls_maximumconferenceparties",
      "signature": "get_conversations_calls_maximumconferenceparties()",
      "return": "MaxParticipants"
    },
    "GET /api/v2/conversations/chats/{conversationId}": {
      "functionName": "get_conversations_chat",
      "signature": "get_conversations_chat(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "ChatConversation"
    },
    "GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}": {
      "functionName": "get_conversations_chat_message",
      "signature": "get_conversations_chat_message(conversation_id, message_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "message_id",
          "type": "str"
        }
      ],
      "return": "WebChatMessage"
    },
    "GET /api/v2/conversations/chats/{conversationId}/messages": {
      "functionName": "get_conversations_chat_messages",
      "signature": "get_conversations_chat_messages(conversation_id, after, before, sort_order, max_results)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "before",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "max_results",
          "type": "int"
        }
      ],
      "return": "WebChatMessageEntityList"
    },
    "GET /api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "get_conversations_chat_participant_wrapup",
      "signature": "get_conversations_chat_participant_wrapup(conversation_id, participant_id, provisional)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "provisional",
          "type": "bool"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "get_conversations_chat_participant_wrapupcodes",
      "signature": "get_conversations_chat_participant_wrapupcodes(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ],
      "return": "list[WrapupCode]"
    },
    "GET /api/v2/conversations/chats": {
      "functionName": "get_conversations_chats",
      "signature": "get_conversations_chats()",
      "return": "ChatConversationEntityListing"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}": {
      "functionName": "get_conversations_cobrowsesession",
      "signature": "get_conversations_cobrowsesession(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "CobrowseConversation"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "get_conversations_cobrowsesession_participant_wrapup",
      "signature": "get_conversations_cobrowsesession_participant_wrapup(conversation_id, participant_id, provisional)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "provisional",
          "type": "bool"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "get_conversations_cobrowsesession_participant_wrapupcodes",
      "signature": "get_conversations_cobrowsesession_participant_wrapupcodes(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ],
      "return": "list[WrapupCode]"
    },
    "GET /api/v2/conversations/cobrowsesessions": {
      "functionName": "get_conversations_cobrowsesessions",
      "signature": "get_conversations_cobrowsesessions()",
      "return": "CobrowseConversationEntityListing"
    },
    "GET /api/v2/conversations/emails/{conversationId}": {
      "functionName": "get_conversations_email",
      "signature": "get_conversations_email(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "EmailConversation"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages/{messageId}": {
      "functionName": "get_conversations_email_message",
      "signature": "get_conversations_email_message(conversation_id, message_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "message_id",
          "type": "str"
        }
      ],
      "return": "EmailMessage"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages": {
      "functionName": "get_conversations_email_messages",
      "signature": "get_conversations_email_messages(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "EmailMessageListing"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages/draft": {
      "functionName": "get_conversations_email_messages_draft",
      "signature": "get_conversations_email_messages_draft(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "EmailMessage"
    },
    "GET /api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "get_conversations_email_participant_wrapup",
      "signature": "get_conversations_email_participant_wrapup(conversation_id, participant_id, provisional)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "provisional",
          "type": "bool"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "get_conversations_email_participant_wrapupcodes",
      "signature": "get_conversations_email_participant_wrapupcodes(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ],
      "return": "list[WrapupCode]"
    },
    "GET /api/v2/conversations/emails/{conversationId}/settings": {
      "functionName": "get_conversations_email_settings",
      "signature": "get_conversations_email_settings(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "EmailsSettings"
    },
    "GET /api/v2/conversations/emails": {
      "functionName": "get_conversations_emails",
      "signature": "get_conversations_emails()",
      "return": "EmailConversationEntityListing"
    },
    "GET /api/v2/conversations/messages/{conversationId}": {
      "functionName": "get_conversations_message",
      "signature": "get_conversations_message(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "MessageConversation"
    },
    "GET /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media/{mediaId}": {
      "functionName": "get_conversations_message_communication_messages_media_media_id",
      "signature": "get_conversations_message_communication_messages_media_media_id(conversation_id, communication_id, media_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "media_id",
          "type": "str"
        }
      ],
      "return": "MessageMediaData"
    },
    "GET /api/v2/conversations/messages/{messageId}/details": {
      "functionName": "get_conversations_message_details",
      "signature": "get_conversations_message_details(message_id)",
      "parameters": [
        {
          "name": "message_id",
          "type": "str"
        }
      ],
      "return": "MessageData"
    },
    "GET /api/v2/conversations/messages/{conversationId}/messages/{messageId}": {
      "functionName": "get_conversations_message_message",
      "signature": "get_conversations_message_message(conversation_id, message_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "message_id",
          "type": "str"
        }
      ],
      "return": "MessageData"
    },
    "GET /api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "get_conversations_message_participant_wrapup",
      "signature": "get_conversations_message_participant_wrapup(conversation_id, participant_id, provisional)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "provisional",
          "type": "bool"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "get_conversations_message_participant_wrapupcodes",
      "signature": "get_conversations_message_participant_wrapupcodes(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ],
      "return": "list[WrapupCode]"
    },
    "GET /api/v2/conversations/messages": {
      "functionName": "get_conversations_messages",
      "signature": "get_conversations_messages()",
      "return": "MessageConversationEntityListing"
    },
    "GET /api/v2/conversations/messaging/facebook/app": {
      "functionName": "get_conversations_messaging_facebook_app",
      "signature": "get_conversations_messaging_facebook_app()",
      "return": "FacebookAppCredentials"
    },
    "GET /api/v2/conversations/messaging/integrations": {
      "functionName": "get_conversations_messaging_integrations",
      "signature": "get_conversations_messaging_integrations(page_size, page_number, expand, supported_content_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ],
      "return": "MessagingIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/facebook": {
      "functionName": "get_conversations_messaging_integrations_facebook",
      "signature": "get_conversations_messaging_integrations_facebook(page_size, page_number, expand, supported_content_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ],
      "return": "FacebookIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "functionName": "get_conversations_messaging_integrations_facebook_integration_id",
      "signature": "get_conversations_messaging_integrations_facebook_integration_id(integration_id, expand)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "FacebookIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/line": {
      "functionName": "get_conversations_messaging_integrations_line",
      "signature": "get_conversations_messaging_integrations_line(page_size, page_number, expand, supported_content_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ],
      "return": "LineIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "functionName": "get_conversations_messaging_integrations_line_integration_id",
      "signature": "get_conversations_messaging_integrations_line_integration_id(integration_id, expand)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "LineIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/open": {
      "functionName": "get_conversations_messaging_integrations_open",
      "signature": "get_conversations_messaging_integrations_open(page_size, page_number, expand, supported_content_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ],
      "return": "OpenIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "functionName": "get_conversations_messaging_integrations_open_integration_id",
      "signature": "get_conversations_messaging_integrations_open_integration_id(integration_id, expand)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "OpenIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/twitter": {
      "functionName": "get_conversations_messaging_integrations_twitter",
      "signature": "get_conversations_messaging_integrations_twitter(page_size, page_number, expand, supported_content_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ],
      "return": "TwitterIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "functionName": "get_conversations_messaging_integrations_twitter_integration_id",
      "signature": "get_conversations_messaging_integrations_twitter_integration_id(integration_id, expand)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "TwitterIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/whatsapp": {
      "functionName": "get_conversations_messaging_integrations_whatsapp",
      "signature": "get_conversations_messaging_integrations_whatsapp(page_size, page_number, expand, supported_content_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ],
      "return": "WhatsAppIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "functionName": "get_conversations_messaging_integrations_whatsapp_integration_id",
      "signature": "get_conversations_messaging_integrations_whatsapp_integration_id(integration_id, expand)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "GET /api/v2/conversations/messaging/stickers/{messengerType}": {
      "functionName": "get_conversations_messaging_sticker",
      "signature": "get_conversations_messaging_sticker(messenger_type, page_size, page_number)",
      "parameters": [
        {
          "name": "messenger_type",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "MessagingStickerEntityListing"
    },
    "GET /api/v2/conversations/messaging/supportedcontent": {
      "functionName": "get_conversations_messaging_supportedcontent",
      "signature": "get_conversations_messaging_supportedcontent(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "SupportedContentListing"
    },
    "GET /api/v2/conversations/messaging/supportedcontent/default": {
      "functionName": "get_conversations_messaging_supportedcontent_default",
      "signature": "get_conversations_messaging_supportedcontent_default()",
      "return": "SupportedContent"
    },
    "GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "get_conversations_messaging_supportedcontent_supported_content_id",
      "signature": "get_conversations_messaging_supportedcontent_supported_content_id(supported_content_id)",
      "parameters": [
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ],
      "return": "SupportedContent"
    },
    "GET /api/v2/conversations/messaging/threadingtimeline": {
      "functionName": "get_conversations_messaging_threadingtimeline",
      "signature": "get_conversations_messaging_threadingtimeline()",
      "return": "ConversationThreadingWindow"
    },
    "PATCH /api/v2/conversations/{conversationId}/participants/{participantId}": {
      "functionName": "patch_conversation_participant",
      "signature": "patch_conversation_participant(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "patch_conversation_participant_attributes",
      "signature": "patch_conversation_participant_attributes(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}": {
      "functionName": "patch_conversations_call",
      "signature": "patch_conversations_call(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}": {
      "functionName": "patch_conversations_call_participant",
      "signature": "patch_conversations_call_participant(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "patch_conversations_call_participant_attributes",
      "signature": "patch_conversations_call_participant_attributes(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "patch_conversations_call_participant_communication",
      "signature": "patch_conversations_call_participant_communication(conversation_id, participant_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "functionName": "patch_conversations_call_participant_consult",
      "signature": "patch_conversations_call_participant_consult(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ConsultTransferUpdate"
        }
      ],
      "return": "ConsultTransferResponse"
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}": {
      "functionName": "patch_conversations_callback",
      "signature": "patch_conversations_callback(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}": {
      "functionName": "patch_conversations_callback_participant",
      "signature": "patch_conversations_callback_participant(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "patch_conversations_callback_participant_attributes",
      "signature": "patch_conversations_callback_participant_attributes(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "patch_conversations_callback_participant_communication",
      "signature": "patch_conversations_callback_participant_communication(conversation_id, participant_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/chats/{conversationId}": {
      "functionName": "patch_conversations_chat",
      "signature": "patch_conversations_chat(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}": {
      "functionName": "patch_conversations_chat_participant",
      "signature": "patch_conversations_chat_participant(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "patch_conversations_chat_participant_attributes",
      "signature": "patch_conversations_chat_participant_attributes(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "patch_conversations_chat_participant_communication",
      "signature": "patch_conversations_chat_participant_communication(conversation_id, participant_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}": {
      "functionName": "patch_conversations_cobrowsesession",
      "signature": "patch_conversations_cobrowsesession(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}": {
      "functionName": "patch_conversations_cobrowsesession_participant",
      "signature": "patch_conversations_cobrowsesession_participant(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "patch_conversations_cobrowsesession_participant_attributes",
      "signature": "patch_conversations_cobrowsesession_participant_attributes(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "patch_conversations_cobrowsesession_participant_communication",
      "signature": "patch_conversations_cobrowsesession_participant_communication(conversation_id, participant_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/emails/{conversationId}": {
      "functionName": "patch_conversations_email",
      "signature": "patch_conversations_email(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}": {
      "functionName": "patch_conversations_email_participant",
      "signature": "patch_conversations_email_participant(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "patch_conversations_email_participant_attributes",
      "signature": "patch_conversations_email_participant_attributes(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "patch_conversations_email_participant_communication",
      "signature": "patch_conversations_email_participant_communication(conversation_id, participant_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/messages/{conversationId}": {
      "functionName": "patch_conversations_message",
      "signature": "patch_conversations_message(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}": {
      "functionName": "patch_conversations_message_participant",
      "signature": "patch_conversations_message_participant(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "patch_conversations_message_participant_attributes",
      "signature": "patch_conversations_message_participant_attributes(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "patch_conversations_message_participant_communication",
      "signature": "patch_conversations_message_participant_communication(conversation_id, participant_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "functionName": "patch_conversations_messaging_integrations_facebook_integration_id",
      "signature": "patch_conversations_messaging_integrations_facebook_integration_id(integration_id, body)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "FacebookIntegrationUpdateRequest"
        }
      ],
      "return": "FacebookIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "functionName": "patch_conversations_messaging_integrations_open_integration_id",
      "signature": "patch_conversations_messaging_integrations_open_integration_id(integration_id, body)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "OpenIntegrationUpdateRequest"
        }
      ],
      "return": "OpenIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "functionName": "patch_conversations_messaging_integrations_twitter_integration_id",
      "signature": "patch_conversations_messaging_integrations_twitter_integration_id(integration_id, body)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TwitterIntegrationRequest"
        }
      ],
      "return": "TwitterIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "functionName": "patch_conversations_messaging_integrations_whatsapp_integration_id",
      "signature": "patch_conversations_messaging_integrations_whatsapp_integration_id(integration_id, body)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WhatsAppIntegrationUpdateRequest"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "patch_conversations_messaging_supportedcontent_supported_content_id",
      "signature": "patch_conversations_messaging_supportedcontent_supported_content_id(supported_content_id, body)",
      "parameters": [
        {
          "name": "supported_content_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SupportedContent"
        }
      ],
      "return": "SupportedContent"
    },
    "POST /api/v2/analytics/conversations/{conversationId}/details/properties": {
      "functionName": "post_analytics_conversation_details_properties",
      "signature": "post_analytics_conversation_details_properties(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PropertyIndexRequest"
        }
      ],
      "return": "PropertyIndexRequest"
    },
    "POST /api/v2/analytics/conversations/aggregates/query": {
      "functionName": "post_analytics_conversations_aggregates_query",
      "signature": "post_analytics_conversations_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationAggregationQuery"
        }
      ],
      "return": "ConversationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/jobs": {
      "functionName": "post_analytics_conversations_details_jobs",
      "signature": "post_analytics_conversations_details_jobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AsyncConversationQuery"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/query": {
      "functionName": "post_analytics_conversations_details_query",
      "signature": "post_analytics_conversations_details_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationQuery"
        }
      ],
      "return": "AnalyticsConversationQueryResponse"
    },
    "POST /api/v2/conversations/{conversationId}/assign": {
      "functionName": "post_conversation_assign",
      "signature": "post_conversation_assign(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ConversationUser"
        }
      ],
      "return": "str"
    },
    "POST /api/v2/conversations/{conversationId}/disconnect": {
      "functionName": "post_conversation_disconnect",
      "signature": "post_conversation_disconnect(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "str"
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/callbacks": {
      "functionName": "post_conversation_participant_callbacks",
      "signature": "post_conversation_participant_callbacks(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateCallbackOnConversationCommand"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/digits": {
      "functionName": "post_conversation_participant_digits",
      "signature": "post_conversation_participant_digits(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Digits"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace": {
      "functionName": "post_conversation_participant_replace",
      "signature": "post_conversation_participant_replace(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions": {
      "functionName": "post_conversation_participant_secureivrsessions",
      "signature": "post_conversation_participant_secureivrsessions(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateSecureSession"
        }
      ],
      "return": "SecureSession"
    },
    "POST /api/v2/conversations/calls/{conversationId}": {
      "functionName": "post_conversations_call",
      "signature": "post_conversations_call(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CallCommand"
        }
      ],
      "return": "Conversation"
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/coach": {
      "functionName": "post_conversations_call_participant_coach",
      "signature": "post_conversations_call_participant_coach(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "functionName": "post_conversations_call_participant_consult",
      "signature": "post_conversations_call_participant_consult(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ConsultTransfer"
        }
      ],
      "return": "ConsultTransferResponse"
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/monitor": {
      "functionName": "post_conversations_call_participant_monitor",
      "signature": "post_conversations_call_participant_monitor(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/replace": {
      "functionName": "post_conversations_call_participant_replace",
      "signature": "post_conversations_call_participant_replace(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants": {
      "functionName": "post_conversations_call_participants",
      "signature": "post_conversations_call_participants(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "POST /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/replace": {
      "functionName": "post_conversations_callback_participant_replace",
      "signature": "post_conversations_callback_participant_replace(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/callbacks": {
      "functionName": "post_conversations_callbacks",
      "signature": "post_conversations_callbacks(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateCallbackCommand"
        }
      ],
      "return": "CreateCallbackResponse"
    },
    "POST /api/v2/conversations/calls": {
      "functionName": "post_conversations_calls",
      "signature": "post_conversations_calls(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateCallRequest"
        }
      ],
      "return": "CreateCallResponse"
    },
    "POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/messages": {
      "functionName": "post_conversations_chat_communication_messages",
      "signature": "post_conversations_chat_communication_messages(conversation_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateWebChatMessageRequest"
        }
      ],
      "return": "WebChatMessage"
    },
    "POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing": {
      "functionName": "post_conversations_chat_communication_typing",
      "signature": "post_conversations_chat_communication_typing(conversation_id, communication_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        }
      ],
      "return": "WebChatTyping"
    },
    "POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/replace": {
      "functionName": "post_conversations_chat_participant_replace",
      "signature": "post_conversations_chat_participant_replace(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/chats": {
      "functionName": "post_conversations_chats",
      "signature": "post_conversations_chats(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateWebChatRequest"
        }
      ],
      "return": "ChatConversation"
    },
    "POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace": {
      "functionName": "post_conversations_cobrowsesession_participant_replace",
      "signature": "post_conversations_cobrowsesession_participant_replace(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/emails/{conversationId}/inboundmessages": {
      "functionName": "post_conversations_email_inboundmessages",
      "signature": "post_conversations_email_inboundmessages(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "InboundMessageRequest"
        }
      ],
      "return": "EmailConversation"
    },
    "POST /api/v2/conversations/emails/{conversationId}/messages": {
      "functionName": "post_conversations_email_messages",
      "signature": "post_conversations_email_messages(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EmailMessage"
        }
      ],
      "return": "EmailMessage"
    },
    "POST /api/v2/conversations/emails/{conversationId}/messages/draft/attachments/copy": {
      "functionName": "post_conversations_email_messages_draft_attachments_copy",
      "signature": "post_conversations_email_messages_draft_attachments_copy(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CopyAttachmentsRequest"
        }
      ],
      "return": "EmailMessage"
    },
    "POST /api/v2/conversations/emails/{conversationId}/participants/{participantId}/replace": {
      "functionName": "post_conversations_email_participant_replace",
      "signature": "post_conversations_email_participant_replace(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/emails": {
      "functionName": "post_conversations_emails",
      "signature": "post_conversations_emails(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateEmailRequest"
        }
      ],
      "return": "EmailConversation"
    },
    "POST /api/v2/conversations/faxes": {
      "functionName": "post_conversations_faxes",
      "signature": "post_conversations_faxes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FaxSendRequest"
        }
      ],
      "return": "FaxSendResponse"
    },
    "POST /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages": {
      "functionName": "post_conversations_message_communication_messages",
      "signature": "post_conversations_message_communication_messages(conversation_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AdditionalMessage"
        }
      ],
      "return": "MessageData"
    },
    "POST /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media": {
      "functionName": "post_conversations_message_communication_messages_media",
      "signature": "post_conversations_message_communication_messages_media(conversation_id, communication_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        }
      ],
      "return": "MessageMediaData"
    },
    "POST /api/v2/conversations/messages/{conversationId}/messages/bulk": {
      "functionName": "post_conversations_message_messages_bulk",
      "signature": "post_conversations_message_messages_bulk(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "TextMessageListing"
    },
    "POST /api/v2/conversations/messages/{conversationId}/participants/{participantId}/replace": {
      "functionName": "post_conversations_message_participant_replace",
      "signature": "post_conversations_message_participant_replace(conversation_id, participant_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/messages": {
      "functionName": "post_conversations_messages",
      "signature": "post_conversations_messages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateOutboundMessagingConversationRequest"
        }
      ],
      "return": "MessageConversation"
    },
    "POST /api/v2/conversations/messages/agentless": {
      "functionName": "post_conversations_messages_agentless",
      "signature": "post_conversations_messages_agentless(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SendAgentlessOutboundMessageRequest"
        }
      ],
      "return": "SendAgentlessOutboundMessageResponse"
    },
    "POST /api/v2/conversations/messages/inbound/open": {
      "functionName": "post_conversations_messages_inbound_open",
      "signature": "post_conversations_messages_inbound_open(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OpenNormalizedMessage"
        }
      ],
      "return": "OpenNormalizedMessage"
    },
    "POST /api/v2/conversations/messaging/integrations/facebook": {
      "functionName": "post_conversations_messaging_integrations_facebook",
      "signature": "post_conversations_messaging_integrations_facebook(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FacebookIntegrationRequest"
        }
      ],
      "return": "FacebookIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/line": {
      "functionName": "post_conversations_messaging_integrations_line",
      "signature": "post_conversations_messaging_integrations_line(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LineIntegrationRequest"
        }
      ],
      "return": "LineIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/open": {
      "functionName": "post_conversations_messaging_integrations_open",
      "signature": "post_conversations_messaging_integrations_open(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OpenIntegrationRequest"
        }
      ],
      "return": "OpenIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/twitter": {
      "functionName": "post_conversations_messaging_integrations_twitter",
      "signature": "post_conversations_messaging_integrations_twitter(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TwitterIntegrationRequest"
        }
      ],
      "return": "TwitterIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/whatsapp": {
      "functionName": "post_conversations_messaging_integrations_whatsapp",
      "signature": "post_conversations_messaging_integrations_whatsapp(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WhatsAppIntegrationRequest"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "POST /api/v2/conversations/messaging/supportedcontent": {
      "functionName": "post_conversations_messaging_supportedcontent",
      "signature": "post_conversations_messaging_supportedcontent(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SupportedContent"
        }
      ],
      "return": "SupportedContent"
    },
    "PUT /api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason": {
      "functionName": "put_conversation_participant_flaggedreason",
      "signature": "put_conversation_participant_flaggedreason(conversation_id, participant_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        }
      ]
    },
    "PUT /api/v2/conversations/{conversationId}/tags": {
      "functionName": "put_conversation_tags",
      "signature": "put_conversation_tags(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ConversationTagsUpdate"
        }
      ],
      "return": "str"
    },
    "PUT /api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}/uuidata": {
      "functionName": "put_conversations_call_participant_communication_uuidata",
      "signature": "put_conversations_call_participant_communication_uuidata(conversation_id, participant_id, communication_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "participant_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SetUuiDataRequest"
        }
      ],
      "return": "Empty"
    },
    "PUT /api/v2/conversations/emails/{conversationId}/messages/draft": {
      "functionName": "put_conversations_email_messages_draft",
      "signature": "put_conversations_email_messages_draft(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EmailMessage"
        }
      ],
      "return": "EmailMessage"
    },
    "PUT /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "functionName": "put_conversations_messaging_integrations_line_integration_id",
      "signature": "put_conversations_messaging_integrations_line_integration_id(integration_id, body)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "LineIntegrationRequest"
        }
      ],
      "return": "LineIntegration"
    },
    "PUT /api/v2/conversations/messaging/supportedcontent/default": {
      "functionName": "put_conversations_messaging_supportedcontent_default",
      "signature": "put_conversations_messaging_supportedcontent_default(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SupportedContentReference"
        }
      ],
      "return": "SupportedContent"
    },
    "PUT /api/v2/conversations/messaging/threadingtimeline": {
      "functionName": "put_conversations_messaging_threadingtimeline",
      "signature": "put_conversations_messaging_threadingtimeline(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationThreadingWindow"
        }
      ],
      "return": "ConversationThreadingWindow"
    }
  },
  "dataextensions": {
    "GET /api/v2/dataextensions/coretypes/{coretypeName}": {
      "functionName": "get_dataextensions_coretype",
      "signature": "get_dataextensions_coretype(coretype_name)",
      "parameters": [
        {
          "name": "coretype_name",
          "type": "str"
        }
      ],
      "return": "Coretype"
    },
    "GET /api/v2/dataextensions/coretypes": {
      "functionName": "get_dataextensions_coretypes",
      "signature": "get_dataextensions_coretypes()",
      "return": "CoretypeListing"
    },
    "GET /api/v2/dataextensions/limits": {
      "functionName": "get_dataextensions_limits",
      "signature": "get_dataextensions_limits()",
      "return": "SchemaQuantityLimits"
    }
  },
  "externalcontacts": {
    "DELETE /api/v2/externalcontacts/contacts/{contactId}": {
      "functionName": "delete_externalcontacts_contact",
      "signature": "delete_externalcontacts_contact(contact_id)",
      "parameters": [
        {
          "name": "contact_id",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "functionName": "delete_externalcontacts_contact_note",
      "signature": "delete_externalcontacts_contact_note(contact_id, note_id)",
      "parameters": [
        {
          "name": "contact_id",
          "type": "str"
        },
        {
          "name": "note_id",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "functionName": "delete_externalcontacts_contacts_schema",
      "signature": "delete_externalcontacts_contacts_schema(schema_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "functionName": "delete_externalcontacts_organization",
      "signature": "delete_externalcontacts_organization(external_organization_id)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "functionName": "delete_externalcontacts_organization_note",
      "signature": "delete_externalcontacts_organization_note(external_organization_id, note_id)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "note_id",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor": {
      "functionName": "delete_externalcontacts_organization_trustor",
      "signature": "delete_externalcontacts_organization_trustor(external_organization_id)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/externalcontacts/relationships/{relationshipId}": {
      "functionName": "delete_externalcontacts_relationship",
      "signature": "delete_externalcontacts_relationship(relationship_id)",
      "parameters": [
        {
          "name": "relationship_id",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}": {
      "functionName": "get_externalcontacts_contact",
      "signature": "get_externalcontacts_contact(contact_id, expand)",
      "parameters": [
        {
          "name": "contact_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "ExternalContact"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "functionName": "get_externalcontacts_contact_note",
      "signature": "get_externalcontacts_contact_note(contact_id, note_id, expand)",
      "parameters": [
        {
          "name": "contact_id",
          "type": "str"
        },
        {
          "name": "note_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "Note"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}/notes": {
      "functionName": "get_externalcontacts_contact_notes",
      "signature": "get_externalcontacts_contact_notes(contact_id, page_size, page_number, sort_order, expand)",
      "parameters": [
        {
          "name": "contact_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "NoteListing"
    },
    "GET /api/v2/externalcontacts/contacts": {
      "functionName": "get_externalcontacts_contacts",
      "signature": "get_externalcontacts_contacts(page_size, page_number, q, sort_order, expand)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "q",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "ContactListing"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "functionName": "get_externalcontacts_contacts_schema",
      "signature": "get_externalcontacts_contacts_schema(schema_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}/versions/{versionId}": {
      "functionName": "get_externalcontacts_contacts_schema_version",
      "signature": "get_externalcontacts_contacts_schema_version(schema_id, version_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        },
        {
          "name": "version_id",
          "type": "str"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}/versions": {
      "functionName": "get_externalcontacts_contacts_schema_versions",
      "signature": "get_externalcontacts_contacts_schema_versions(schema_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas": {
      "functionName": "get_externalcontacts_contacts_schemas",
      "signature": "get_externalcontacts_contacts_schemas()",
      "return": "DataSchemaListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "functionName": "get_externalcontacts_organization",
      "signature": "get_externalcontacts_organization(external_organization_id, expand, include_trustors)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "include_trustors",
          "type": "bool"
        }
      ],
      "return": "ExternalOrganization"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts": {
      "functionName": "get_externalcontacts_organization_contacts",
      "signature": "get_externalcontacts_organization_contacts(external_organization_id, page_size, page_number, q, sort_order, expand)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "q",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "ContactListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "functionName": "get_externalcontacts_organization_note",
      "signature": "get_externalcontacts_organization_note(external_organization_id, note_id, expand)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "note_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "Note"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes": {
      "functionName": "get_externalcontacts_organization_notes",
      "signature": "get_externalcontacts_organization_notes(external_organization_id, page_size, page_number, sort_order, expand)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "NoteListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships": {
      "functionName": "get_externalcontacts_organization_relationships",
      "signature": "get_externalcontacts_organization_relationships(external_organization_id, page_size, page_number, expand, sort_order)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "RelationshipListing"
    },
    "GET /api/v2/externalcontacts/organizations": {
      "functionName": "get_externalcontacts_organizations",
      "signature": "get_externalcontacts_organizations(page_size, page_number, q, trustor_id, sort_order, expand, include_trustors)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "q",
          "type": "str"
        },
        {
          "name": "trustor_id",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "include_trustors",
          "type": "bool"
        }
      ],
      "return": "ExternalOrganizationListing"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}": {
      "functionName": "get_externalcontacts_organizations_schema",
      "signature": "get_externalcontacts_organizations_schema(schema_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}/versions/{versionId}": {
      "functionName": "get_externalcontacts_organizations_schema_version",
      "signature": "get_externalcontacts_organizations_schema_version(schema_id, version_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        },
        {
          "name": "version_id",
          "type": "str"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}/versions": {
      "functionName": "get_externalcontacts_organizations_schema_versions",
      "signature": "get_externalcontacts_organizations_schema_versions(schema_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas": {
      "functionName": "get_externalcontacts_organizations_schemas",
      "signature": "get_externalcontacts_organizations_schemas()",
      "return": "DataSchemaListing"
    },
    "GET /api/v2/externalcontacts/relationships/{relationshipId}": {
      "functionName": "get_externalcontacts_relationship",
      "signature": "get_externalcontacts_relationship(relationship_id, expand)",
      "parameters": [
        {
          "name": "relationship_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Relationship"
    },
    "GET /api/v2/externalcontacts/reversewhitepageslookup": {
      "functionName": "get_externalcontacts_reversewhitepageslookup",
      "signature": "get_externalcontacts_reversewhitepageslookup(lookup_val, expand)",
      "parameters": [
        {
          "name": "lookup_val",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "ReverseWhitepagesLookupResult"
    },
    "GET /api/v2/externalcontacts/scan/contacts": {
      "functionName": "get_externalcontacts_scan_contacts",
      "signature": "get_externalcontacts_scan_contacts(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "int"
        },
        {
          "name": "cursor",
          "type": "str"
        }
      ],
      "return": "CursorContactListing"
    },
    "GET /api/v2/externalcontacts/scan/notes": {
      "functionName": "get_externalcontacts_scan_notes",
      "signature": "get_externalcontacts_scan_notes(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "int"
        },
        {
          "name": "cursor",
          "type": "str"
        }
      ],
      "return": "CursorNoteListing"
    },
    "GET /api/v2/externalcontacts/scan/organizations": {
      "functionName": "get_externalcontacts_scan_organizations",
      "signature": "get_externalcontacts_scan_organizations(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "int"
        },
        {
          "name": "cursor",
          "type": "str"
        }
      ],
      "return": "CursorOrganizationListing"
    },
    "GET /api/v2/externalcontacts/scan/relationships": {
      "functionName": "get_externalcontacts_scan_relationships",
      "signature": "get_externalcontacts_scan_relationships(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "int"
        },
        {
          "name": "cursor",
          "type": "str"
        }
      ],
      "return": "CursorRelationshipListing"
    },
    "POST /api/v2/externalcontacts/bulk/contacts": {
      "functionName": "post_externalcontacts_bulk_contacts",
      "signature": "post_externalcontacts_bulk_contacts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkFetchContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/add": {
      "functionName": "post_externalcontacts_bulk_contacts_add",
      "signature": "post_externalcontacts_bulk_contacts_add(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkContactsRequest"
        }
      ],
      "return": "BulkContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/remove": {
      "functionName": "post_externalcontacts_bulk_contacts_remove",
      "signature": "post_externalcontacts_bulk_contacts_remove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/update": {
      "functionName": "post_externalcontacts_bulk_contacts_update",
      "signature": "post_externalcontacts_bulk_contacts_update(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkContactsRequest"
        }
      ],
      "return": "BulkContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes": {
      "functionName": "post_externalcontacts_bulk_notes",
      "signature": "post_externalcontacts_bulk_notes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkFetchNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/add": {
      "functionName": "post_externalcontacts_bulk_notes_add",
      "signature": "post_externalcontacts_bulk_notes_add(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkNotesRequest"
        }
      ],
      "return": "BulkNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/remove": {
      "functionName": "post_externalcontacts_bulk_notes_remove",
      "signature": "post_externalcontacts_bulk_notes_remove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/update": {
      "functionName": "post_externalcontacts_bulk_notes_update",
      "signature": "post_externalcontacts_bulk_notes_update(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkNotesRequest"
        }
      ],
      "return": "BulkNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations": {
      "functionName": "post_externalcontacts_bulk_organizations",
      "signature": "post_externalcontacts_bulk_organizations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkFetchOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/add": {
      "functionName": "post_externalcontacts_bulk_organizations_add",
      "signature": "post_externalcontacts_bulk_organizations_add(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkOrganizationsRequest"
        }
      ],
      "return": "BulkOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/remove": {
      "functionName": "post_externalcontacts_bulk_organizations_remove",
      "signature": "post_externalcontacts_bulk_organizations_remove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/update": {
      "functionName": "post_externalcontacts_bulk_organizations_update",
      "signature": "post_externalcontacts_bulk_organizations_update(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkOrganizationsRequest"
        }
      ],
      "return": "BulkOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships": {
      "functionName": "post_externalcontacts_bulk_relationships",
      "signature": "post_externalcontacts_bulk_relationships(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkFetchRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/add": {
      "functionName": "post_externalcontacts_bulk_relationships_add",
      "signature": "post_externalcontacts_bulk_relationships_add(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkRelationshipsRequest"
        }
      ],
      "return": "BulkRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/remove": {
      "functionName": "post_externalcontacts_bulk_relationships_remove",
      "signature": "post_externalcontacts_bulk_relationships_remove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/update": {
      "functionName": "post_externalcontacts_bulk_relationships_update",
      "signature": "post_externalcontacts_bulk_relationships_update(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkRelationshipsRequest"
        }
      ],
      "return": "BulkRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/contacts/{contactId}/notes": {
      "functionName": "post_externalcontacts_contact_notes",
      "signature": "post_externalcontacts_contact_notes(contact_id, body)",
      "parameters": [
        {
          "name": "contact_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Note"
        }
      ],
      "return": "Note"
    },
    "POST /api/v2/externalcontacts/contacts": {
      "functionName": "post_externalcontacts_contacts",
      "signature": "post_externalcontacts_contacts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ExternalContact"
        }
      ],
      "return": "ExternalContact"
    },
    "POST /api/v2/externalcontacts/contacts/schemas": {
      "functionName": "post_externalcontacts_contacts_schemas",
      "signature": "post_externalcontacts_contacts_schemas(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DataSchema"
        }
      ],
      "return": "DataSchema"
    },
    "POST /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes": {
      "functionName": "post_externalcontacts_organization_notes",
      "signature": "post_externalcontacts_organization_notes(external_organization_id, body)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Note"
        }
      ],
      "return": "Note"
    },
    "POST /api/v2/externalcontacts/organizations": {
      "functionName": "post_externalcontacts_organizations",
      "signature": "post_externalcontacts_organizations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ExternalOrganization"
        }
      ],
      "return": "ExternalOrganization"
    },
    "POST /api/v2/externalcontacts/organizations/schemas": {
      "functionName": "post_externalcontacts_organizations_schemas",
      "signature": "post_externalcontacts_organizations_schemas(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DataSchema"
        }
      ],
      "return": "DataSchema"
    },
    "POST /api/v2/externalcontacts/relationships": {
      "functionName": "post_externalcontacts_relationships",
      "signature": "post_externalcontacts_relationships(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Relationship"
        }
      ],
      "return": "Relationship"
    },
    "PUT /api/v2/externalcontacts/contacts/{contactId}": {
      "functionName": "put_externalcontacts_contact",
      "signature": "put_externalcontacts_contact(contact_id, body)",
      "parameters": [
        {
          "name": "contact_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ExternalContact"
        }
      ],
      "return": "ExternalContact"
    },
    "PUT /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "functionName": "put_externalcontacts_contact_note",
      "signature": "put_externalcontacts_contact_note(contact_id, note_id, body)",
      "parameters": [
        {
          "name": "contact_id",
          "type": "str"
        },
        {
          "name": "note_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Note"
        }
      ],
      "return": "Note"
    },
    "PUT /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "functionName": "put_externalcontacts_contacts_schema",
      "signature": "put_externalcontacts_contacts_schema(schema_id, body)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DataSchema"
        }
      ],
      "return": "DataSchema"
    },
    "PUT /api/v2/externalcontacts/conversations/{conversationId}": {
      "functionName": "put_externalcontacts_conversation",
      "signature": "put_externalcontacts_conversation(body, conversation_id)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationAssociation"
        },
        {
          "name": "conversation_id",
          "type": "str"
        }
      ]
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "functionName": "put_externalcontacts_organization",
      "signature": "put_externalcontacts_organization(external_organization_id, body)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ExternalOrganization"
        }
      ],
      "return": "ExternalOrganization"
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "functionName": "put_externalcontacts_organization_note",
      "signature": "put_externalcontacts_organization_note(external_organization_id, note_id, body)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "note_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Note"
        }
      ],
      "return": "Note"
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}": {
      "functionName": "put_externalcontacts_organization_trustor_trustor_id",
      "signature": "put_externalcontacts_organization_trustor_trustor_id(external_organization_id, trustor_id)",
      "parameters": [
        {
          "name": "external_organization_id",
          "type": "str"
        },
        {
          "name": "trustor_id",
          "type": "str"
        }
      ],
      "return": "ExternalOrganizationTrustorLink"
    },
    "PUT /api/v2/externalcontacts/organizations/schemas/{schemaId}": {
      "functionName": "put_externalcontacts_organizations_schema",
      "signature": "put_externalcontacts_organizations_schema(schema_id, body)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DataSchema"
        }
      ],
      "return": "DataSchema"
    },
    "PUT /api/v2/externalcontacts/relationships/{relationshipId}": {
      "functionName": "put_externalcontacts_relationship",
      "signature": "put_externalcontacts_relationship(relationship_id, body)",
      "parameters": [
        {
          "name": "relationship_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Relationship"
        }
      ],
      "return": "Relationship"
    }
  },
  "fax": {
    "DELETE /api/v2/fax/documents/{documentId}": {
      "functionName": "delete_fax_document",
      "signature": "delete_fax_document(document_id)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/fax/documents/{documentId}": {
      "functionName": "get_fax_document",
      "signature": "get_fax_document(document_id)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        }
      ],
      "return": "FaxDocument"
    },
    "GET /api/v2/fax/documents/{documentId}/content": {
      "functionName": "get_fax_document_content",
      "signature": "get_fax_document_content(document_id)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/fax/documents": {
      "functionName": "get_fax_documents",
      "signature": "get_fax_documents(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "FaxDocumentEntityListing"
    },
    "GET /api/v2/fax/summary": {
      "functionName": "get_fax_summary",
      "signature": "get_fax_summary()",
      "return": "FaxSummary"
    },
    "PUT /api/v2/fax/documents/{documentId}": {
      "functionName": "put_fax_document",
      "signature": "put_fax_document(document_id, body)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "FaxDocument"
        }
      ],
      "return": "FaxDocument"
    }
  },
  "flows": {
    "POST /api/v2/analytics/flows/aggregates/query": {
      "functionName": "post_analytics_flows_aggregates_query",
      "signature": "post_analytics_flows_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowAggregationQuery"
        }
      ],
      "return": "FlowAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/observations/query": {
      "functionName": "post_analytics_flows_observations_query",
      "signature": "post_analytics_flows_observations_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowObservationQuery"
        }
      ],
      "return": "FlowObservationQueryResponse"
    }
  },
  "gamification": {
    "GET /api/v2/gamification/leaderboard": {
      "functionName": "get_gamification_leaderboard",
      "signature": "get_gamification_leaderboard(start_workday, end_workday, metric_id)",
      "parameters": [
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        },
        {
          "name": "metric_id",
          "type": "str"
        }
      ],
      "return": "Leaderboard"
    },
    "GET /api/v2/gamification/leaderboard/all": {
      "functionName": "get_gamification_leaderboard_all",
      "signature": "get_gamification_leaderboard_all(filter_type, filter_id, start_workday, end_workday, metric_id)",
      "parameters": [
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "filter_id",
          "type": "str"
        },
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        },
        {
          "name": "metric_id",
          "type": "str"
        }
      ],
      "return": "Leaderboard"
    },
    "GET /api/v2/gamification/leaderboard/all/bestpoints": {
      "functionName": "get_gamification_leaderboard_all_bestpoints",
      "signature": "get_gamification_leaderboard_all_bestpoints(filter_type, filter_id)",
      "parameters": [
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "filter_id",
          "type": "str"
        }
      ],
      "return": "OverallBestPoints"
    },
    "GET /api/v2/gamification/leaderboard/bestpoints": {
      "functionName": "get_gamification_leaderboard_bestpoints",
      "signature": "get_gamification_leaderboard_bestpoints()",
      "return": "OverallBestPoints"
    },
    "GET /api/v2/gamification/metrics/{metricId}": {
      "functionName": "get_gamification_metric",
      "signature": "get_gamification_metric(metric_id, workday, performance_profile_id)",
      "parameters": [
        {
          "name": "metric_id",
          "type": "str"
        },
        {
          "name": "workday",
          "type": "date"
        },
        {
          "name": "performance_profile_id",
          "type": "str"
        }
      ],
      "return": "Metric"
    },
    "GET /api/v2/gamification/metricdefinitions/{metricDefinitionId}": {
      "functionName": "get_gamification_metricdefinition",
      "signature": "get_gamification_metricdefinition(metric_definition_id)",
      "parameters": [
        {
          "name": "metric_definition_id",
          "type": "str"
        }
      ],
      "return": "MetricDefinition"
    },
    "GET /api/v2/gamification/metricdefinitions": {
      "functionName": "get_gamification_metricdefinitions",
      "signature": "get_gamification_metricdefinitions()",
      "return": "GetMetricDefinitionsResponse"
    },
    "GET /api/v2/gamification/metrics": {
      "functionName": "get_gamification_metrics",
      "signature": "get_gamification_metrics(performance_profile_id, workday)",
      "parameters": [
        {
          "name": "performance_profile_id",
          "type": "str"
        },
        {
          "name": "workday",
          "type": "date"
        }
      ],
      "return": "GetMetricsResponse"
    },
    "GET /api/v2/gamification/profiles/{performanceProfileId}": {
      "functionName": "get_gamification_profile",
      "signature": "get_gamification_profile(performance_profile_id)",
      "parameters": [
        {
          "name": "performance_profile_id",
          "type": "str"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/profiles/{performanceProfileId}/members": {
      "functionName": "get_gamification_profile_members",
      "signature": "get_gamification_profile_members(performance_profile_id)",
      "parameters": [
        {
          "name": "performance_profile_id",
          "type": "str"
        }
      ],
      "return": "MemberListing"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics/{metricId}": {
      "functionName": "get_gamification_profile_metric",
      "signature": "get_gamification_profile_metric(profile_id, metric_id, workday)",
      "parameters": [
        {
          "name": "profile_id",
          "type": "str"
        },
        {
          "name": "metric_id",
          "type": "str"
        },
        {
          "name": "workday",
          "type": "date"
        }
      ],
      "return": "Metric"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics": {
      "functionName": "get_gamification_profile_metrics",
      "signature": "get_gamification_profile_metrics(profile_id, expand, workday)",
      "parameters": [
        {
          "name": "profile_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "workday",
          "type": "date"
        }
      ],
      "return": "GetMetricResponse"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics/objectivedetails": {
      "functionName": "get_gamification_profile_metrics_objectivedetails",
      "signature": "get_gamification_profile_metrics_objectivedetails(profile_id, workday)",
      "parameters": [
        {
          "name": "profile_id",
          "type": "str"
        },
        {
          "name": "workday",
          "type": "date"
        }
      ],
      "return": "GetMetricsResponse"
    },
    "GET /api/v2/gamification/profiles": {
      "functionName": "get_gamification_profiles",
      "signature": "get_gamification_profiles()",
      "return": "GetProfilesResponse"
    },
    "GET /api/v2/gamification/profiles/users/{userId}": {
      "functionName": "get_gamification_profiles_user",
      "signature": "get_gamification_profiles_user(user_id, workday)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "workday",
          "type": "date"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/profiles/users/me": {
      "functionName": "get_gamification_profiles_users_me",
      "signature": "get_gamification_profiles_users_me(workday)",
      "parameters": [
        {
          "name": "workday",
          "type": "date"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/scorecards": {
      "functionName": "get_gamification_scorecards",
      "signature": "get_gamification_scorecards(workday, expand)",
      "parameters": [
        {
          "name": "workday",
          "type": "date"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "WorkdayMetricListing"
    },
    "GET /api/v2/gamification/scorecards/attendance": {
      "functionName": "get_gamification_scorecards_attendance",
      "signature": "get_gamification_scorecards_attendance(start_workday, end_workday)",
      "parameters": [
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        }
      ],
      "return": "AttendanceStatusListing"
    },
    "GET /api/v2/gamification/scorecards/bestpoints": {
      "functionName": "get_gamification_scorecards_bestpoints",
      "signature": "get_gamification_scorecards_bestpoints()",
      "return": "UserBestPoints"
    },
    "GET /api/v2/gamification/scorecards/points/alltime": {
      "functionName": "get_gamification_scorecards_points_alltime",
      "signature": "get_gamification_scorecards_points_alltime(end_workday)",
      "parameters": [
        {
          "name": "end_workday",
          "type": "date"
        }
      ],
      "return": "AllTimePoints"
    },
    "GET /api/v2/gamification/scorecards/points/average": {
      "functionName": "get_gamification_scorecards_points_average",
      "signature": "get_gamification_scorecards_points_average(workday)",
      "parameters": [
        {
          "name": "workday",
          "type": "date"
        }
      ],
      "return": "SingleWorkdayAveragePoints"
    },
    "GET /api/v2/gamification/scorecards/points/trends": {
      "functionName": "get_gamification_scorecards_points_trends",
      "signature": "get_gamification_scorecards_points_trends(start_workday, end_workday, day_of_week)",
      "parameters": [
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        },
        {
          "name": "day_of_week",
          "type": "str"
        }
      ],
      "return": "WorkdayPointsTrend"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}": {
      "functionName": "get_gamification_scorecards_user",
      "signature": "get_gamification_scorecards_user(user_id, workday, expand)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "workday",
          "type": "date"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "WorkdayMetricListing"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/attendance": {
      "functionName": "get_gamification_scorecards_user_attendance",
      "signature": "get_gamification_scorecards_user_attendance(user_id, start_workday, end_workday)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        }
      ],
      "return": "AttendanceStatusListing"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/bestpoints": {
      "functionName": "get_gamification_scorecards_user_bestpoints",
      "signature": "get_gamification_scorecards_user_bestpoints(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "UserBestPoints"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/points/alltime": {
      "functionName": "get_gamification_scorecards_user_points_alltime",
      "signature": "get_gamification_scorecards_user_points_alltime(user_id, end_workday)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "end_workday",
          "type": "date"
        }
      ],
      "return": "AllTimePoints"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/points/trends": {
      "functionName": "get_gamification_scorecards_user_points_trends",
      "signature": "get_gamification_scorecards_user_points_trends(user_id, start_workday, end_workday, day_of_week)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        },
        {
          "name": "day_of_week",
          "type": "str"
        }
      ],
      "return": "WorkdayPointsTrend"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/values/trends": {
      "functionName": "get_gamification_scorecards_user_values_trends",
      "signature": "get_gamification_scorecards_user_values_trends(user_id, start_workday, end_workday, time_zone)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        },
        {
          "name": "time_zone",
          "type": "str"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/scorecards/users/points/average": {
      "functionName": "get_gamification_scorecards_users_points_average",
      "signature": "get_gamification_scorecards_users_points_average(filter_type, filter_id, workday)",
      "parameters": [
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "filter_id",
          "type": "str"
        },
        {
          "name": "workday",
          "type": "date"
        }
      ],
      "return": "SingleWorkdayAveragePoints"
    },
    "GET /api/v2/gamification/scorecards/users/values/average": {
      "functionName": "get_gamification_scorecards_users_values_average",
      "signature": "get_gamification_scorecards_users_values_average(filter_type, filter_id, workday, time_zone)",
      "parameters": [
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "filter_id",
          "type": "str"
        },
        {
          "name": "workday",
          "type": "date"
        },
        {
          "name": "time_zone",
          "type": "str"
        }
      ],
      "return": "SingleWorkdayAverageValues"
    },
    "GET /api/v2/gamification/scorecards/users/values/trends": {
      "functionName": "get_gamification_scorecards_users_values_trends",
      "signature": "get_gamification_scorecards_users_values_trends(filter_type, filter_id, start_workday, end_workday, time_zone)",
      "parameters": [
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "filter_id",
          "type": "str"
        },
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        },
        {
          "name": "time_zone",
          "type": "str"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/scorecards/values/average": {
      "functionName": "get_gamification_scorecards_values_average",
      "signature": "get_gamification_scorecards_values_average(workday, time_zone)",
      "parameters": [
        {
          "name": "workday",
          "type": "date"
        },
        {
          "name": "time_zone",
          "type": "str"
        }
      ],
      "return": "SingleWorkdayAverageValues"
    },
    "GET /api/v2/gamification/scorecards/values/trends": {
      "functionName": "get_gamification_scorecards_values_trends",
      "signature": "get_gamification_scorecards_values_trends(start_workday, end_workday, filter_type, reference_workday, time_zone)",
      "parameters": [
        {
          "name": "start_workday",
          "type": "date"
        },
        {
          "name": "end_workday",
          "type": "date"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "reference_workday",
          "type": "date"
        },
        {
          "name": "time_zone",
          "type": "str"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/status": {
      "functionName": "get_gamification_status",
      "signature": "get_gamification_status()",
      "return": "GamificationStatus"
    },
    "GET /api/v2/gamification/templates/{templateId}": {
      "functionName": "get_gamification_template",
      "signature": "get_gamification_template(template_id)",
      "parameters": [
        {
          "name": "template_id",
          "type": "str"
        }
      ],
      "return": "ObjectiveTemplate"
    },
    "GET /api/v2/gamification/templates": {
      "functionName": "get_gamification_templates",
      "signature": "get_gamification_templates()",
      "return": "GetTemplatesResponse"
    },
    "POST /api/v2/gamification/metrics": {
      "functionName": "post_gamification_metrics",
      "signature": "post_gamification_metrics(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateMetric"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/activate": {
      "functionName": "post_gamification_profile_activate",
      "signature": "post_gamification_profile_activate(performance_profile_id)",
      "parameters": [
        {
          "name": "performance_profile_id",
          "type": "str"
        }
      ],
      "return": "PerformanceProfile"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/deactivate": {
      "functionName": "post_gamification_profile_deactivate",
      "signature": "post_gamification_profile_deactivate(performance_profile_id)",
      "parameters": [
        {
          "name": "performance_profile_id",
          "type": "str"
        }
      ],
      "return": "PerformanceProfile"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/members": {
      "functionName": "post_gamification_profile_members",
      "signature": "post_gamification_profile_members(performance_profile_id, body)",
      "parameters": [
        {
          "name": "performance_profile_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AssignUsers"
        }
      ],
      "return": "Assignment"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/members/validate": {
      "functionName": "post_gamification_profile_members_validate",
      "signature": "post_gamification_profile_members_validate(performance_profile_id, body)",
      "parameters": [
        {
          "name": "performance_profile_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ValidateAssignUsers"
        }
      ],
      "return": "AssignmentValidation"
    },
    "POST /api/v2/gamification/profiles/{sourceProfileId}/metrics/{sourceMetricId}/link": {
      "functionName": "post_gamification_profile_metric_link",
      "signature": "post_gamification_profile_metric_link(source_profile_id, source_metric_id, body)",
      "parameters": [
        {
          "name": "source_profile_id",
          "type": "str"
        },
        {
          "name": "source_metric_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TargetPerformanceProfile"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles/{profileId}/metrics": {
      "functionName": "post_gamification_profile_metrics",
      "signature": "post_gamification_profile_metrics(profile_id, body)",
      "parameters": [
        {
          "name": "profile_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateMetric"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles": {
      "functionName": "post_gamification_profiles",
      "signature": "post_gamification_profiles(body, copy_metrics)",
      "parameters": [
        {
          "name": "body",
          "type": "CreatePerformanceProfile"
        },
        {
          "name": "copy_metrics",
          "type": "bool"
        }
      ],
      "return": "PerformanceProfile"
    },
    "PUT /api/v2/gamification/metrics/{metricId}": {
      "functionName": "put_gamification_metric",
      "signature": "put_gamification_metric(metric_id, body, performance_profile_id)",
      "parameters": [
        {
          "name": "metric_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateMetric"
        },
        {
          "name": "performance_profile_id",
          "type": "str"
        }
      ],
      "return": "Metric"
    },
    "PUT /api/v2/gamification/profiles/{performanceProfileId}": {
      "functionName": "put_gamification_profile",
      "signature": "put_gamification_profile(performance_profile_id, body)",
      "parameters": [
        {
          "name": "performance_profile_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PerformanceProfile"
        }
      ],
      "return": "PerformanceProfile"
    },
    "PUT /api/v2/gamification/profiles/{profileId}/metrics/{metricId}": {
      "functionName": "put_gamification_profile_metric",
      "signature": "put_gamification_profile_metric(profile_id, metric_id, body)",
      "parameters": [
        {
          "name": "profile_id",
          "type": "str"
        },
        {
          "name": "metric_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateMetric"
        }
      ],
      "return": "Metric"
    },
    "PUT /api/v2/gamification/status": {
      "functionName": "put_gamification_status",
      "signature": "put_gamification_status(status)",
      "parameters": [
        {
          "name": "status",
          "type": "GamificationStatus"
        }
      ],
      "return": "GamificationStatus"
    }
  },
  "generaldataprotectionregulation": {
    "GET /api/v2/gdpr/requests/{requestId}": {
      "functionName": "get_gdpr_request",
      "signature": "get_gdpr_request(request_id)",
      "parameters": [
        {
          "name": "request_id",
          "type": "str"
        }
      ],
      "return": "GDPRRequest"
    },
    "GET /api/v2/gdpr/requests": {
      "functionName": "get_gdpr_requests",
      "signature": "get_gdpr_requests(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "GDPRRequestEntityListing"
    },
    "GET /api/v2/gdpr/subjects": {
      "functionName": "get_gdpr_subjects",
      "signature": "get_gdpr_subjects(search_type, search_value)",
      "parameters": [
        {
          "name": "search_type",
          "type": "str"
        },
        {
          "name": "search_value",
          "type": "str"
        }
      ],
      "return": "GDPRSubjectEntityListing"
    },
    "POST /api/v2/gdpr/requests": {
      "functionName": "post_gdpr_requests",
      "signature": "post_gdpr_requests(body, delete_confirmed)",
      "parameters": [
        {
          "name": "body",
          "type": "GDPRRequest"
        },
        {
          "name": "delete_confirmed",
          "type": "bool"
        }
      ],
      "return": "GDPRRequest"
    }
  },
  "geolocation": {
    "GET /api/v2/geolocations/settings": {
      "functionName": "get_geolocations_settings",
      "signature": "get_geolocations_settings()",
      "return": "GeolocationSettings"
    },
    "GET /api/v2/users/{userId}/geolocations/{clientId}": {
      "functionName": "get_user_geolocation",
      "signature": "get_user_geolocation(user_id, client_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "client_id",
          "type": "str"
        }
      ],
      "return": "Geolocation"
    },
    "PATCH /api/v2/geolocations/settings": {
      "functionName": "patch_geolocations_settings",
      "signature": "patch_geolocations_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GeolocationSettings"
        }
      ],
      "return": "GeolocationSettings"
    },
    "PATCH /api/v2/users/{userId}/geolocations/{clientId}": {
      "functionName": "patch_user_geolocation",
      "signature": "patch_user_geolocation(user_id, client_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "client_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Geolocation"
        }
      ],
      "return": "Geolocation"
    }
  },
  "greetings": {
    "DELETE /api/v2/greetings/{greetingId}": {
      "functionName": "delete_greeting",
      "signature": "delete_greeting(greeting_id)",
      "parameters": [
        {
          "name": "greeting_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/greetings/{greetingId}": {
      "functionName": "get_greeting",
      "signature": "get_greeting(greeting_id)",
      "parameters": [
        {
          "name": "greeting_id",
          "type": "str"
        }
      ],
      "return": "Greeting"
    },
    "GET /api/v2/greetings/{greetingId}/media": {
      "functionName": "get_greeting_media",
      "signature": "get_greeting_media(greeting_id, format_id)",
      "parameters": [
        {
          "name": "greeting_id",
          "type": "str"
        },
        {
          "name": "format_id",
          "type": "str"
        }
      ],
      "return": "GreetingMediaInfo"
    },
    "GET /api/v2/greetings": {
      "functionName": "get_greetings",
      "signature": "get_greetings(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "DomainEntityListing"
    },
    "GET /api/v2/greetings/defaults": {
      "functionName": "get_greetings_defaults",
      "signature": "get_greetings_defaults()",
      "return": "DefaultGreetingList"
    },
    "GET /api/v2/groups/{groupId}/greetings": {
      "functionName": "get_group_greetings",
      "signature": "get_group_greetings(group_id, page_size, page_number)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "GreetingListing"
    },
    "GET /api/v2/groups/{groupId}/greetings/defaults": {
      "functionName": "get_group_greetings_defaults",
      "signature": "get_group_greetings_defaults(group_id)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "GET /api/v2/users/{userId}/greetings": {
      "functionName": "get_user_greetings",
      "signature": "get_user_greetings(user_id, page_size, page_number)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "DomainEntityListing"
    },
    "GET /api/v2/users/{userId}/greetings/defaults": {
      "functionName": "get_user_greetings_defaults",
      "signature": "get_user_greetings_defaults(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "POST /api/v2/greetings": {
      "functionName": "post_greetings",
      "signature": "post_greetings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Greeting"
        }
      ],
      "return": "Greeting"
    },
    "POST /api/v2/groups/{groupId}/greetings": {
      "functionName": "post_group_greetings",
      "signature": "post_group_greetings(group_id, body)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Greeting"
        }
      ],
      "return": "Greeting"
    },
    "POST /api/v2/users/{userId}/greetings": {
      "functionName": "post_user_greetings",
      "signature": "post_user_greetings(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Greeting"
        }
      ],
      "return": "Greeting"
    },
    "PUT /api/v2/greetings/{greetingId}": {
      "functionName": "put_greeting",
      "signature": "put_greeting(greeting_id, body)",
      "parameters": [
        {
          "name": "greeting_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Greeting"
        }
      ],
      "return": "Greeting"
    },
    "PUT /api/v2/greetings/defaults": {
      "functionName": "put_greetings_defaults",
      "signature": "put_greetings_defaults(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DefaultGreetingList"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "PUT /api/v2/groups/{groupId}/greetings/defaults": {
      "functionName": "put_group_greetings_defaults",
      "signature": "put_group_greetings_defaults(group_id, body)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DefaultGreetingList"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "PUT /api/v2/users/{userId}/greetings/defaults": {
      "functionName": "put_user_greetings_defaults",
      "signature": "put_user_greetings_defaults(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DefaultGreetingList"
        }
      ],
      "return": "DefaultGreetingList"
    }
  },
  "groups": {
    "DELETE /api/v2/groups/{groupId}": {
      "functionName": "delete_group",
      "signature": "delete_group(group_id)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/groups/{groupId}/members": {
      "functionName": "delete_group_members",
      "signature": "delete_group_members(group_id, ids)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "ids",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/fieldconfig": {
      "functionName": "get_fieldconfig",
      "signature": "get_fieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "str"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/groups/{groupId}": {
      "functionName": "get_group",
      "signature": "get_group(group_id)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        }
      ],
      "return": "Group"
    },
    "GET /api/v2/groups/{groupId}/individuals": {
      "functionName": "get_group_individuals",
      "signature": "get_group_individuals(group_id)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/groups/{groupId}/members": {
      "functionName": "get_group_members",
      "signature": "get_group_members(group_id, page_size, page_number, sort_order, expand)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/groups/{groupId}/profile": {
      "functionName": "get_group_profile",
      "signature": "get_group_profile(group_id, fields)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "fields",
          "type": "str"
        }
      ],
      "return": "GroupProfile"
    },
    "GET /api/v2/groups": {
      "functionName": "get_groups",
      "signature": "get_groups(page_size, page_number, id, jabber_id, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "jabber_id",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "GroupEntityListing"
    },
    "GET /api/v2/groups/search": {
      "functionName": "get_groups_search",
      "signature": "get_groups_search(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "GET /api/v2/profiles/groups": {
      "functionName": "get_profiles_groups",
      "signature": "get_profiles_groups(page_size, page_number, id, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "GroupProfileEntityListing"
    },
    "POST /api/v2/groups/{groupId}/members": {
      "functionName": "post_group_members",
      "signature": "post_group_members(group_id, body)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "GroupMembersUpdate"
        }
      ],
      "return": "Empty"
    },
    "POST /api/v2/groups": {
      "functionName": "post_groups",
      "signature": "post_groups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GroupCreate"
        }
      ],
      "return": "Group"
    },
    "POST /api/v2/groups/search": {
      "functionName": "post_groups_search",
      "signature": "post_groups_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GroupSearchRequest"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "PUT /api/v2/groups/{groupId}": {
      "functionName": "put_group",
      "signature": "put_group(group_id, body)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "GroupUpdate"
        }
      ],
      "return": "Group"
    }
  },
  "identityprovider": {
    "DELETE /api/v2/identityproviders/adfs": {
      "functionName": "delete_identityproviders_adfs",
      "signature": "delete_identityproviders_adfs()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/cic": {
      "functionName": "delete_identityproviders_cic",
      "signature": "delete_identityproviders_cic()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/generic": {
      "functionName": "delete_identityproviders_generic",
      "signature": "delete_identityproviders_generic()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/gsuite": {
      "functionName": "delete_identityproviders_gsuite",
      "signature": "delete_identityproviders_gsuite()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/identitynow": {
      "functionName": "delete_identityproviders_identitynow",
      "signature": "delete_identityproviders_identitynow()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/okta": {
      "functionName": "delete_identityproviders_okta",
      "signature": "delete_identityproviders_okta()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/onelogin": {
      "functionName": "delete_identityproviders_onelogin",
      "signature": "delete_identityproviders_onelogin()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/ping": {
      "functionName": "delete_identityproviders_ping",
      "signature": "delete_identityproviders_ping()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/purecloud": {
      "functionName": "delete_identityproviders_purecloud",
      "signature": "delete_identityproviders_purecloud()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/pureengage": {
      "functionName": "delete_identityproviders_pureengage",
      "signature": "delete_identityproviders_pureengage()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/salesforce": {
      "functionName": "delete_identityproviders_salesforce",
      "signature": "delete_identityproviders_salesforce()",
      "return": "Empty"
    },
    "GET /api/v2/identityproviders": {
      "functionName": "get_identityproviders",
      "signature": "get_identityproviders()",
      "return": "OAuthProviderEntityListing"
    },
    "GET /api/v2/identityproviders/adfs": {
      "functionName": "get_identityproviders_adfs",
      "signature": "get_identityproviders_adfs()",
      "return": "ADFS"
    },
    "GET /api/v2/identityproviders/cic": {
      "functionName": "get_identityproviders_cic",
      "signature": "get_identityproviders_cic()",
      "return": "CustomerInteractionCenter"
    },
    "GET /api/v2/identityproviders/generic": {
      "functionName": "get_identityproviders_generic",
      "signature": "get_identityproviders_generic()",
      "return": "GenericSAML"
    },
    "GET /api/v2/identityproviders/gsuite": {
      "functionName": "get_identityproviders_gsuite",
      "signature": "get_identityproviders_gsuite()",
      "return": "GSuite"
    },
    "GET /api/v2/identityproviders/identitynow": {
      "functionName": "get_identityproviders_identitynow",
      "signature": "get_identityproviders_identitynow()",
      "return": "IdentityNow"
    },
    "GET /api/v2/identityproviders/okta": {
      "functionName": "get_identityproviders_okta",
      "signature": "get_identityproviders_okta()",
      "return": "Okta"
    },
    "GET /api/v2/identityproviders/onelogin": {
      "functionName": "get_identityproviders_onelogin",
      "signature": "get_identityproviders_onelogin()",
      "return": "OneLogin"
    },
    "GET /api/v2/identityproviders/ping": {
      "functionName": "get_identityproviders_ping",
      "signature": "get_identityproviders_ping()",
      "return": "PingIdentity"
    },
    "GET /api/v2/identityproviders/purecloud": {
      "functionName": "get_identityproviders_purecloud",
      "signature": "get_identityproviders_purecloud()",
      "return": "PureCloud"
    },
    "GET /api/v2/identityproviders/pureengage": {
      "functionName": "get_identityproviders_pureengage",
      "signature": "get_identityproviders_pureengage()",
      "return": "PureEngage"
    },
    "GET /api/v2/identityproviders/salesforce": {
      "functionName": "get_identityproviders_salesforce",
      "signature": "get_identityproviders_salesforce()",
      "return": "Salesforce"
    },
    "PUT /api/v2/identityproviders/adfs": {
      "functionName": "put_identityproviders_adfs",
      "signature": "put_identityproviders_adfs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ADFS"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/cic": {
      "functionName": "put_identityproviders_cic",
      "signature": "put_identityproviders_cic(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CustomerInteractionCenter"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/generic": {
      "functionName": "put_identityproviders_generic",
      "signature": "put_identityproviders_generic(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GenericSAML"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/gsuite": {
      "functionName": "put_identityproviders_gsuite",
      "signature": "put_identityproviders_gsuite(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GSuite"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/identitynow": {
      "functionName": "put_identityproviders_identitynow",
      "signature": "put_identityproviders_identitynow(body)",
      "parameters": [
        {
          "name": "body",
          "type": "IdentityNow"
        }
      ],
      "return": "IdentityNow"
    },
    "PUT /api/v2/identityproviders/okta": {
      "functionName": "put_identityproviders_okta",
      "signature": "put_identityproviders_okta(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Okta"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/onelogin": {
      "functionName": "put_identityproviders_onelogin",
      "signature": "put_identityproviders_onelogin(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OneLogin"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/ping": {
      "functionName": "put_identityproviders_ping",
      "signature": "put_identityproviders_ping(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PingIdentity"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/purecloud": {
      "functionName": "put_identityproviders_purecloud",
      "signature": "put_identityproviders_purecloud(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PureCloud"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/pureengage": {
      "functionName": "put_identityproviders_pureengage",
      "signature": "put_identityproviders_pureengage(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PureEngage"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/salesforce": {
      "functionName": "put_identityproviders_salesforce",
      "signature": "put_identityproviders_salesforce(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Salesforce"
        }
      ],
      "return": "OAuthProvider"
    }
  },
  "integrations": {
    "DELETE /api/v2/integrations/{integrationId}": {
      "functionName": "delete_integration",
      "signature": "delete_integration(integration_id)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        }
      ],
      "return": "Integration"
    },
    "DELETE /api/v2/integrations/actions/{actionId}": {
      "functionName": "delete_integrations_action",
      "signature": "delete_integrations_action(action_id)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/integrations/actions/{actionId}/draft": {
      "functionName": "delete_integrations_action_draft",
      "signature": "delete_integrations_action_draft(action_id)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/integrations/credentials/{credentialId}": {
      "functionName": "delete_integrations_credential",
      "signature": "delete_integrations_credential(credential_id)",
      "parameters": [
        {
          "name": "credential_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/integrations/{integrationId}": {
      "functionName": "get_integration",
      "signature": "get_integration(integration_id, page_size, page_number, sort_by, expand, next_page, previous_page)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        }
      ],
      "return": "Integration"
    },
    "GET /api/v2/integrations/{integrationId}/config/current": {
      "functionName": "get_integration_config_current",
      "signature": "get_integration_config_current(integration_id)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        }
      ],
      "return": "IntegrationConfiguration"
    },
    "GET /api/v2/integrations": {
      "functionName": "get_integrations",
      "signature": "get_integrations(page_size, page_number, sort_by, expand, next_page, previous_page)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        }
      ],
      "return": "IntegrationEntityListing"
    },
    "GET /api/v2/integrations/actions/{actionId}": {
      "functionName": "get_integrations_action",
      "signature": "get_integrations_action(action_id, expand, include_config)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "include_config",
          "type": "bool"
        }
      ],
      "return": "Action"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft": {
      "functionName": "get_integrations_action_draft",
      "signature": "get_integrations_action_draft(action_id, expand, include_config)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "include_config",
          "type": "bool"
        }
      ],
      "return": "Action"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}": {
      "functionName": "get_integrations_action_draft_schema",
      "signature": "get_integrations_action_draft_schema(action_id, file_name)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "file_name",
          "type": "str"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/templates/{fileName}": {
      "functionName": "get_integrations_action_draft_template",
      "signature": "get_integrations_action_draft_template(action_id, file_name)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "file_name",
          "type": "str"
        }
      ],
      "return": "str"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/validation": {
      "functionName": "get_integrations_action_draft_validation",
      "signature": "get_integrations_action_draft_validation(action_id)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        }
      ],
      "return": "DraftValidationResult"
    },
    "GET /api/v2/integrations/actions/{actionId}/schemas/{fileName}": {
      "functionName": "get_integrations_action_schema",
      "signature": "get_integrations_action_schema(action_id, file_name)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "file_name",
          "type": "str"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/actions/{actionId}/templates/{fileName}": {
      "functionName": "get_integrations_action_template",
      "signature": "get_integrations_action_template(action_id, file_name)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "file_name",
          "type": "str"
        }
      ],
      "return": "str"
    },
    "GET /api/v2/integrations/actions": {
      "functionName": "get_integrations_actions",
      "signature": "get_integrations_actions(page_size, page_number, next_page, previous_page, sort_by, sort_order, category, name, secure, include_auth_actions)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "category",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "secure",
          "type": "str"
        },
        {
          "name": "include_auth_actions",
          "type": "str"
        }
      ],
      "return": "ActionEntityListing"
    },
    "GET /api/v2/integrations/actions/categories": {
      "functionName": "get_integrations_actions_categories",
      "signature": "get_integrations_actions_categories(page_size, page_number, next_page, previous_page, sort_by, sort_order, secure)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "secure",
          "type": "str"
        }
      ],
      "return": "CategoryEntityListing"
    },
    "GET /api/v2/integrations/actions/drafts": {
      "functionName": "get_integrations_actions_drafts",
      "signature": "get_integrations_actions_drafts(page_size, page_number, next_page, previous_page, sort_by, sort_order, category, name, secure, include_auth_actions)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "category",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "secure",
          "type": "str"
        },
        {
          "name": "include_auth_actions",
          "type": "str"
        }
      ],
      "return": "ActionEntityListing"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/{botId}": {
      "functionName": "get_integrations_botconnector_integration_id_bot",
      "signature": "get_integrations_botconnector_integration_id_bot(integration_id, bot_id, version)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "bot_id",
          "type": "str"
        },
        {
          "name": "version",
          "type": "str"
        }
      ],
      "return": "BotConnectorBot"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/{botId}/versions": {
      "functionName": "get_integrations_botconnector_integration_id_bot_versions",
      "signature": "get_integrations_botconnector_integration_id_bot_versions(integration_id, bot_id, page_number, page_size)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "bot_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "BotConnectorBotVersionSummaryEntityListing"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots": {
      "functionName": "get_integrations_botconnector_integration_id_bots",
      "signature": "get_integrations_botconnector_integration_id_bots(integration_id)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        }
      ],
      "return": "BotList"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/summaries": {
      "functionName": "get_integrations_botconnector_integration_id_bots_summaries",
      "signature": "get_integrations_botconnector_integration_id_bots_summaries(integration_id, page_number, page_size)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "BotConnectorBotSummaryEntityListing"
    },
    "GET /api/v2/integrations/clientapps": {
      "functionName": "get_integrations_clientapps",
      "signature": "get_integrations_clientapps(page_size, page_number, sort_by, expand, next_page, previous_page)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        }
      ],
      "return": "ClientAppEntityListing"
    },
    "GET /api/v2/integrations/clientapps/unifiedcommunications": {
      "functionName": "get_integrations_clientapps_unifiedcommunications",
      "signature": "get_integrations_clientapps_unifiedcommunications(page_size, page_number, sort_by, expand, next_page, previous_page)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        }
      ],
      "return": "UCIntegrationListing"
    },
    "GET /api/v2/integrations/credentials/{credentialId}": {
      "functionName": "get_integrations_credential",
      "signature": "get_integrations_credential(credential_id)",
      "parameters": [
        {
          "name": "credential_id",
          "type": "str"
        }
      ],
      "return": "Credential"
    },
    "GET /api/v2/integrations/credentials": {
      "functionName": "get_integrations_credentials",
      "signature": "get_integrations_credentials(page_number, page_size)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "CredentialInfoListing"
    },
    "GET /api/v2/integrations/credentials/types": {
      "functionName": "get_integrations_credentials_types",
      "signature": "get_integrations_credentials_types()",
      "return": "CredentialTypeListing"
    },
    "GET /api/v2/integrations/eventlog": {
      "functionName": "get_integrations_eventlog",
      "signature": "get_integrations_eventlog(page_size, page_number, sort_by, sort_order, entity_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "entity_id",
          "type": "str"
        }
      ],
      "return": "IntegrationEventEntityListing"
    },
    "GET /api/v2/integrations/eventlog/{eventId}": {
      "functionName": "get_integrations_eventlog_event_id",
      "signature": "get_integrations_eventlog_event_id(event_id)",
      "parameters": [
        {
          "name": "event_id",
          "type": "str"
        }
      ],
      "return": "IntegrationEvent"
    },
    "GET /api/v2/integrations/speech/dialogflow/agents/{agentId}": {
      "functionName": "get_integrations_speech_dialogflow_agent",
      "signature": "get_integrations_speech_dialogflow_agent(agent_id)",
      "parameters": [
        {
          "name": "agent_id",
          "type": "str"
        }
      ],
      "return": "DialogflowAgent"
    },
    "GET /api/v2/integrations/speech/dialogflow/agents": {
      "functionName": "get_integrations_speech_dialogflow_agents",
      "signature": "get_integrations_speech_dialogflow_agents(page_number, page_size, name)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "DialogflowAgentSummaryEntityListing"
    },
    "GET /api/v2/integrations/speech/lex/bot/alias/{aliasId}": {
      "functionName": "get_integrations_speech_lex_bot_alias",
      "signature": "get_integrations_speech_lex_bot_alias(alias_id)",
      "parameters": [
        {
          "name": "alias_id",
          "type": "str"
        }
      ],
      "return": "LexBotAlias"
    },
    "GET /api/v2/integrations/speech/lex/bot/{botId}/aliases": {
      "functionName": "get_integrations_speech_lex_bot_bot_id_aliases",
      "signature": "get_integrations_speech_lex_bot_bot_id_aliases(bot_id, page_number, page_size, status, name)",
      "parameters": [
        {
          "name": "bot_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "status",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "LexBotAliasEntityListing"
    },
    "GET /api/v2/integrations/speech/lex/bots": {
      "functionName": "get_integrations_speech_lex_bots",
      "signature": "get_integrations_speech_lex_bots(page_number, page_size, name)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "LexBotEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}": {
      "functionName": "get_integrations_speech_tts_engine",
      "signature": "get_integrations_speech_tts_engine(engine_id, include_voices)",
      "parameters": [
        {
          "name": "engine_id",
          "type": "str"
        },
        {
          "name": "include_voices",
          "type": "bool"
        }
      ],
      "return": "TtsEngineEntity"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}": {
      "functionName": "get_integrations_speech_tts_engine_voice",
      "signature": "get_integrations_speech_tts_engine_voice(engine_id, voice_id)",
      "parameters": [
        {
          "name": "engine_id",
          "type": "str"
        },
        {
          "name": "voice_id",
          "type": "str"
        }
      ],
      "return": "TtsVoiceEntity"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}/voices": {
      "functionName": "get_integrations_speech_tts_engine_voices",
      "signature": "get_integrations_speech_tts_engine_voices(engine_id, page_number, page_size)",
      "parameters": [
        {
          "name": "engine_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "TtsVoiceEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/engines": {
      "functionName": "get_integrations_speech_tts_engines",
      "signature": "get_integrations_speech_tts_engines(page_number, page_size, include_voices, name, language)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "include_voices",
          "type": "bool"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "language",
          "type": "str"
        }
      ],
      "return": "TtsEngineEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/settings": {
      "functionName": "get_integrations_speech_tts_settings",
      "signature": "get_integrations_speech_tts_settings()",
      "return": "TtsSettings"
    },
    "GET /api/v2/integrations/types/{typeId}": {
      "functionName": "get_integrations_type",
      "signature": "get_integrations_type(type_id)",
      "parameters": [
        {
          "name": "type_id",
          "type": "str"
        }
      ],
      "return": "IntegrationType"
    },
    "GET /api/v2/integrations/types/{typeId}/configschemas/{configType}": {
      "functionName": "get_integrations_type_configschema",
      "signature": "get_integrations_type_configschema(type_id, config_type)",
      "parameters": [
        {
          "name": "type_id",
          "type": "str"
        },
        {
          "name": "config_type",
          "type": "str"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/types": {
      "functionName": "get_integrations_types",
      "signature": "get_integrations_types(page_size, page_number, sort_by, expand, next_page, previous_page)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        }
      ],
      "return": "IntegrationTypeEntityListing"
    },
    "GET /api/v2/integrations/userapps": {
      "functionName": "get_integrations_userapps",
      "signature": "get_integrations_userapps(page_size, page_number, sort_by, expand, next_page, previous_page, app_host)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "app_host",
          "type": "str"
        }
      ],
      "return": "UserAppEntityListing"
    },
    "PATCH /api/v2/integrations/{integrationId}": {
      "functionName": "patch_integration",
      "signature": "patch_integration(integration_id, body, page_size, page_number, sort_by, expand, next_page, previous_page)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Integration"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        }
      ],
      "return": "Integration"
    },
    "PATCH /api/v2/integrations/actions/{actionId}": {
      "functionName": "patch_integrations_action",
      "signature": "patch_integrations_action(action_id, body)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateActionInput"
        }
      ],
      "return": "Action"
    },
    "PATCH /api/v2/integrations/actions/{actionId}/draft": {
      "functionName": "patch_integrations_action_draft",
      "signature": "patch_integrations_action_draft(action_id, body)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateDraftInput"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations": {
      "functionName": "post_integrations",
      "signature": "post_integrations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateIntegrationRequest"
        }
      ],
      "return": "Integration"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft": {
      "functionName": "post_integrations_action_draft",
      "signature": "post_integrations_action_draft(action_id)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft/publish": {
      "functionName": "post_integrations_action_draft_publish",
      "signature": "post_integrations_action_draft_publish(action_id, body)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PublishDraftInput"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft/test": {
      "functionName": "post_integrations_action_draft_test",
      "signature": "post_integrations_action_draft_test(action_id, body)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "object"
        }
      ],
      "return": "TestExecutionResult"
    },
    "POST /api/v2/integrations/actions/{actionId}/execute": {
      "functionName": "post_integrations_action_execute",
      "signature": "post_integrations_action_execute(action_id, body)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "object"
        }
      ],
      "return": "object"
    },
    "POST /api/v2/integrations/actions/{actionId}/test": {
      "functionName": "post_integrations_action_test",
      "signature": "post_integrations_action_test(action_id, body)",
      "parameters": [
        {
          "name": "action_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "object"
        }
      ],
      "return": "TestExecutionResult"
    },
    "POST /api/v2/integrations/actions": {
      "functionName": "post_integrations_actions",
      "signature": "post_integrations_actions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PostActionInput"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations/actions/drafts": {
      "functionName": "post_integrations_actions_drafts",
      "signature": "post_integrations_actions_drafts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PostActionInput"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations/credentials": {
      "functionName": "post_integrations_credentials",
      "signature": "post_integrations_credentials(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Credential"
        }
      ],
      "return": "CredentialInfo"
    },
    "POST /api/v2/integrations/workforcemanagement/vendorconnection": {
      "functionName": "post_integrations_workforcemanagement_vendorconnection",
      "signature": "post_integrations_workforcemanagement_vendorconnection(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VendorConnectionRequest"
        }
      ],
      "return": "UserActionCategoryEntityListing"
    },
    "PUT /api/v2/integrations/{integrationId}/config/current": {
      "functionName": "put_integration_config_current",
      "signature": "put_integration_config_current(integration_id, body)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "IntegrationConfiguration"
        }
      ],
      "return": "IntegrationConfiguration"
    },
    "PUT /api/v2/integrations/botconnector/{integrationId}/bots": {
      "functionName": "put_integrations_botconnector_integration_id_bots",
      "signature": "put_integrations_botconnector_integration_id_bots(integration_id, bot_list)",
      "parameters": [
        {
          "name": "integration_id",
          "type": "str"
        },
        {
          "name": "bot_list",
          "type": "BotList"
        }
      ]
    },
    "PUT /api/v2/integrations/credentials/{credentialId}": {
      "functionName": "put_integrations_credential",
      "signature": "put_integrations_credential(credential_id, body)",
      "parameters": [
        {
          "name": "credential_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Credential"
        }
      ],
      "return": "CredentialInfo"
    },
    "PUT /api/v2/integrations/speech/tts/settings": {
      "functionName": "put_integrations_speech_tts_settings",
      "signature": "put_integrations_speech_tts_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TtsSettings"
        }
      ],
      "return": "TtsSettings"
    }
  },
  "journey": {
    "DELETE /api/v2/journey/actionmaps/{actionMapId}": {
      "functionName": "delete_journey_actionmap",
      "signature": "delete_journey_actionmap(action_map_id)",
      "parameters": [
        {
          "name": "action_map_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "functionName": "delete_journey_actiontemplate",
      "signature": "delete_journey_actiontemplate(action_template_id, hard_delete)",
      "parameters": [
        {
          "name": "action_template_id",
          "type": "str"
        },
        {
          "name": "hard_delete",
          "type": "bool"
        }
      ]
    },
    "DELETE /api/v2/journey/outcomes/{outcomeId}": {
      "functionName": "delete_journey_outcome",
      "signature": "delete_journey_outcome(outcome_id)",
      "parameters": [
        {
          "name": "outcome_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/journey/segments/{segmentId}": {
      "functionName": "delete_journey_segment",
      "signature": "delete_journey_segment(segment_id)",
      "parameters": [
        {
          "name": "segment_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/journey/actionmaps/{actionMapId}": {
      "functionName": "get_journey_actionmap",
      "signature": "get_journey_actionmap(action_map_id)",
      "parameters": [
        {
          "name": "action_map_id",
          "type": "str"
        }
      ],
      "return": "ActionMap"
    },
    "GET /api/v2/journey/actionmaps": {
      "functionName": "get_journey_actionmaps",
      "signature": "get_journey_actionmaps(page_number, page_size, sort_by, filter_field, filter_value, action_map_ids, query_fields, query_value)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "filter_field",
          "type": "str"
        },
        {
          "name": "filter_value",
          "type": "str"
        },
        {
          "name": "action_map_ids",
          "type": "list[str]"
        },
        {
          "name": "query_fields",
          "type": "list[str]"
        },
        {
          "name": "query_value",
          "type": "str"
        }
      ],
      "return": "ActionMapListing"
    },
    "GET /api/v2/journey/actiontargets/{actionTargetId}": {
      "functionName": "get_journey_actiontarget",
      "signature": "get_journey_actiontarget(action_target_id)",
      "parameters": [
        {
          "name": "action_target_id",
          "type": "str"
        }
      ],
      "return": "ActionTarget"
    },
    "GET /api/v2/journey/actiontargets": {
      "functionName": "get_journey_actiontargets",
      "signature": "get_journey_actiontargets(page_number, page_size)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "ActionTargetListing"
    },
    "GET /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "functionName": "get_journey_actiontemplate",
      "signature": "get_journey_actiontemplate(action_template_id)",
      "parameters": [
        {
          "name": "action_template_id",
          "type": "str"
        }
      ],
      "return": "ActionTemplate"
    },
    "GET /api/v2/journey/actiontemplates": {
      "functionName": "get_journey_actiontemplates",
      "signature": "get_journey_actiontemplates(page_number, page_size, sort_by, media_type, state, query_fields, query_value)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "media_type",
          "type": "str"
        },
        {
          "name": "state",
          "type": "str"
        },
        {
          "name": "query_fields",
          "type": "list[str]"
        },
        {
          "name": "query_value",
          "type": "str"
        }
      ],
      "return": "ActionTemplateListing"
    },
    "GET /api/v2/journey/outcomes/{outcomeId}": {
      "functionName": "get_journey_outcome",
      "signature": "get_journey_outcome(outcome_id)",
      "parameters": [
        {
          "name": "outcome_id",
          "type": "str"
        }
      ],
      "return": "Outcome"
    },
    "GET /api/v2/journey/outcomes": {
      "functionName": "get_journey_outcomes",
      "signature": "get_journey_outcomes(page_number, page_size, sort_by, outcome_ids, query_fields, query_value)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "outcome_ids",
          "type": "list[str]"
        },
        {
          "name": "query_fields",
          "type": "list[str]"
        },
        {
          "name": "query_value",
          "type": "str"
        }
      ],
      "return": "OutcomeListing"
    },
    "GET /api/v2/journey/segments/{segmentId}": {
      "functionName": "get_journey_segment",
      "signature": "get_journey_segment(segment_id)",
      "parameters": [
        {
          "name": "segment_id",
          "type": "str"
        }
      ],
      "return": "JourneySegment"
    },
    "GET /api/v2/journey/segments": {
      "functionName": "get_journey_segments",
      "signature": "get_journey_segments(sort_by, page_size, page_number, is_active, segment_ids, query_fields, query_value)",
      "parameters": [
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "is_active",
          "type": "bool"
        },
        {
          "name": "segment_ids",
          "type": "list[str]"
        },
        {
          "name": "query_fields",
          "type": "list[str]"
        },
        {
          "name": "query_value",
          "type": "str"
        }
      ],
      "return": "SegmentListing"
    },
    "GET /api/v2/journey/sessions/{sessionId}": {
      "functionName": "get_journey_session",
      "signature": "get_journey_session(session_id)",
      "parameters": [
        {
          "name": "session_id",
          "type": "str"
        }
      ],
      "return": "Session"
    },
    "GET /api/v2/journey/sessions/{sessionId}/outcomescores": {
      "functionName": "get_journey_session_outcomescores",
      "signature": "get_journey_session_outcomescores(session_id)",
      "parameters": [
        {
          "name": "session_id",
          "type": "str"
        }
      ],
      "return": "OutcomeScoresResult"
    },
    "PATCH /api/v2/journey/actionmaps/{actionMapId}": {
      "functionName": "patch_journey_actionmap",
      "signature": "patch_journey_actionmap(action_map_id, body)",
      "parameters": [
        {
          "name": "action_map_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PatchActionMap"
        }
      ],
      "return": "ActionMap"
    },
    "PATCH /api/v2/journey/actiontargets/{actionTargetId}": {
      "functionName": "patch_journey_actiontarget",
      "signature": "patch_journey_actiontarget(action_target_id, body)",
      "parameters": [
        {
          "name": "action_target_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PatchActionTarget"
        }
      ],
      "return": "ActionTarget"
    },
    "PATCH /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "functionName": "patch_journey_actiontemplate",
      "signature": "patch_journey_actiontemplate(action_template_id, body)",
      "parameters": [
        {
          "name": "action_template_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PatchActionTemplate"
        }
      ],
      "return": "ActionTemplate"
    },
    "PATCH /api/v2/journey/outcomes/{outcomeId}": {
      "functionName": "patch_journey_outcome",
      "signature": "patch_journey_outcome(outcome_id, body)",
      "parameters": [
        {
          "name": "outcome_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PatchOutcome"
        }
      ],
      "return": "Outcome"
    },
    "PATCH /api/v2/journey/segments/{segmentId}": {
      "functionName": "patch_journey_segment",
      "signature": "patch_journey_segment(segment_id, body)",
      "parameters": [
        {
          "name": "segment_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PatchSegment"
        }
      ],
      "return": "JourneySegment"
    },
    "POST /api/v2/analytics/journeys/aggregates/query": {
      "functionName": "post_analytics_journeys_aggregates_query",
      "signature": "post_analytics_journeys_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "JourneyAggregationQuery"
        }
      ],
      "return": "JourneyAggregateQueryResponse"
    },
    "POST /api/v2/journey/actionmaps": {
      "functionName": "post_journey_actionmaps",
      "signature": "post_journey_actionmaps(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ActionMap"
        }
      ],
      "return": "ActionMap"
    },
    "POST /api/v2/journey/actiontemplates": {
      "functionName": "post_journey_actiontemplates",
      "signature": "post_journey_actiontemplates(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ActionTemplate"
        }
      ],
      "return": "ActionTemplate"
    },
    "POST /api/v2/journey/outcomes": {
      "functionName": "post_journey_outcomes",
      "signature": "post_journey_outcomes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Outcome"
        }
      ],
      "return": "Outcome"
    },
    "POST /api/v2/journey/segments": {
      "functionName": "post_journey_segments",
      "signature": "post_journey_segments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "JourneySegment"
        }
      ],
      "return": "JourneySegment"
    }
  },
  "knowledge": {
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "functionName": "delete_knowledge_knowledgebase",
      "signature": "delete_knowledge_knowledgebase(knowledge_base_id)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        }
      ],
      "return": "KnowledgeBase"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "functionName": "delete_knowledge_knowledgebase_language_category",
      "signature": "delete_knowledge_knowledgebase_language_category(category_id, knowledge_base_id, language_code)",
      "parameters": [
        {
          "name": "category_id",
          "type": "str"
        },
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ],
      "return": "KnowledgeCategory"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "functionName": "delete_knowledge_knowledgebase_language_document",
      "signature": "delete_knowledge_knowledgebase_language_document(document_id, knowledge_base_id, language_code)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "functionName": "delete_knowledge_knowledgebase_language_documents_import",
      "signature": "delete_knowledge_knowledgebase_language_documents_import(knowledge_base_id, language_code, import_id)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "import_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "functionName": "get_knowledge_knowledgebase",
      "signature": "get_knowledge_knowledgebase(knowledge_base_id)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        }
      ],
      "return": "KnowledgeBase"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories": {
      "functionName": "get_knowledge_knowledgebase_language_categories",
      "signature": "get_knowledge_knowledgebase_language_categories(knowledge_base_id, language_code, before, after, limit, page_size, name)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "before",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "limit",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "CategoryListing"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "functionName": "get_knowledge_knowledgebase_language_category",
      "signature": "get_knowledge_knowledgebase_language_category(category_id, knowledge_base_id, language_code)",
      "parameters": [
        {
          "name": "category_id",
          "type": "str"
        },
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "functionName": "get_knowledge_knowledgebase_language_document",
      "signature": "get_knowledge_knowledgebase_language_document(document_id, knowledge_base_id, language_code)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "functionName": "get_knowledge_knowledgebase_language_documents",
      "signature": "get_knowledge_knowledgebase_language_documents(knowledge_base_id, language_code, before, after, limit, page_size, categories, title, sort_by, sort_order, document_ids)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "before",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "limit",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "str"
        },
        {
          "name": "categories",
          "type": "str"
        },
        {
          "name": "title",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "document_ids",
          "type": "list[str]"
        }
      ],
      "return": "DocumentListing"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "functionName": "get_knowledge_knowledgebase_language_documents_import",
      "signature": "get_knowledge_knowledgebase_language_documents_import(knowledge_base_id, language_code, import_id)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "import_id",
          "type": "str"
        }
      ],
      "return": "KnowledgeImport"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}": {
      "functionName": "get_knowledge_knowledgebase_language_training",
      "signature": "get_knowledge_knowledgebase_language_training(knowledge_base_id, language_code, training_id)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "training_id",
          "type": "str"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings": {
      "functionName": "get_knowledge_knowledgebase_language_trainings",
      "signature": "get_knowledge_knowledgebase_language_trainings(knowledge_base_id, language_code, before, after, limit, page_size, knowledge_documents_state)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "before",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "limit",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "str"
        },
        {
          "name": "knowledge_documents_state",
          "type": "str"
        }
      ],
      "return": "TrainingListing"
    },
    "GET /api/v2/knowledge/knowledgebases": {
      "functionName": "get_knowledge_knowledgebases",
      "signature": "get_knowledge_knowledgebases(before, after, limit, page_size, name, core_language, published, sort_by, sort_order)",
      "parameters": [
        {
          "name": "before",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "limit",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "core_language",
          "type": "str"
        },
        {
          "name": "published",
          "type": "bool"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "KnowledgeBaseListing"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "functionName": "patch_knowledge_knowledgebase",
      "signature": "patch_knowledge_knowledgebase(knowledge_base_id, body)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "KnowledgeBase"
        }
      ],
      "return": "KnowledgeBase"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "functionName": "patch_knowledge_knowledgebase_language_category",
      "signature": "patch_knowledge_knowledgebase_language_category(category_id, knowledge_base_id, language_code, body)",
      "parameters": [
        {
          "name": "category_id",
          "type": "str"
        },
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "body",
          "type": "KnowledgeCategoryRequest"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "functionName": "patch_knowledge_knowledgebase_language_document",
      "signature": "patch_knowledge_knowledgebase_language_document(document_id, knowledge_base_id, language_code, body)",
      "parameters": [
        {
          "name": "document_id",
          "type": "str"
        },
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "body",
          "type": "KnowledgeDocumentRequest"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "functionName": "patch_knowledge_knowledgebase_language_documents",
      "signature": "patch_knowledge_knowledgebase_language_documents(knowledge_base_id, language_code, body)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[KnowledgeDocumentBulkRequest]"
        }
      ],
      "return": "DocumentListing"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "functionName": "patch_knowledge_knowledgebase_language_documents_import",
      "signature": "patch_knowledge_knowledgebase_language_documents_import(knowledge_base_id, language_code, import_id, body)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "import_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ImportStatusRequest"
        }
      ],
      "return": "KnowledgeImport"
    },
    "POST /api/v2/knowledge/documentuploads": {
      "functionName": "post_knowledge_documentuploads",
      "signature": "post_knowledge_documentuploads(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories": {
      "functionName": "post_knowledge_knowledgebase_language_categories",
      "signature": "post_knowledge_knowledgebase_language_categories(knowledge_base_id, language_code, body)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "body",
          "type": "KnowledgeCategoryRequest"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "functionName": "post_knowledge_knowledgebase_language_documents",
      "signature": "post_knowledge_knowledgebase_language_documents(knowledge_base_id, language_code, body)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "body",
          "type": "KnowledgeDocumentRequest"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports": {
      "functionName": "post_knowledge_knowledgebase_language_documents_imports",
      "signature": "post_knowledge_knowledgebase_language_documents_imports(knowledge_base_id, language_code, body)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "body",
          "type": "KnowledgeImport"
        }
      ],
      "return": "KnowledgeImport"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote": {
      "functionName": "post_knowledge_knowledgebase_language_training_promote",
      "signature": "post_knowledge_knowledgebase_language_training_promote(knowledge_base_id, language_code, training_id)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        },
        {
          "name": "training_id",
          "type": "str"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings": {
      "functionName": "post_knowledge_knowledgebase_language_trainings",
      "signature": "post_knowledge_knowledgebase_language_trainings(knowledge_base_id, language_code)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "language_code",
          "type": "str"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search": {
      "functionName": "post_knowledge_knowledgebase_search",
      "signature": "post_knowledge_knowledgebase_search(knowledge_base_id, body)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "KnowledgeSearchRequest"
        }
      ],
      "return": "KnowledgeSearchResponse"
    },
    "POST /api/v2/knowledge/knowledgebases": {
      "functionName": "post_knowledge_knowledgebases",
      "signature": "post_knowledge_knowledgebases(body)",
      "parameters": [
        {
          "name": "body",
          "type": "KnowledgeBase"
        }
      ],
      "return": "KnowledgeBase"
    }
  },
  "languageunderstanding": {
    "DELETE /api/v2/languageunderstanding/domains/{domainId}": {
      "functionName": "delete_languageunderstanding_domain",
      "signature": "delete_languageunderstanding_domain(domain_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}": {
      "functionName": "delete_languageunderstanding_domain_feedback_feedback_id",
      "signature": "delete_languageunderstanding_domain_feedback_feedback_id(domain_id, feedback_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "feedback_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "functionName": "delete_languageunderstanding_domain_version",
      "signature": "delete_languageunderstanding_domain_version(domain_id, domain_version_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "domain_version_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/miners/{minerId}": {
      "functionName": "delete_languageunderstanding_miner",
      "signature": "delete_languageunderstanding_miner(miner_id)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "functionName": "delete_languageunderstanding_miner_draft",
      "signature": "delete_languageunderstanding_miner_draft(miner_id, draft_id)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        },
        {
          "name": "draft_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}": {
      "functionName": "get_languageunderstanding_domain",
      "signature": "get_languageunderstanding_domain(domain_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        }
      ],
      "return": "NluDomain"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/feedback": {
      "functionName": "get_languageunderstanding_domain_feedback",
      "signature": "get_languageunderstanding_domain_feedback(domain_id, intent_name, assessment, date_start, date_end, include_deleted, page_number, page_size, enable_cursor_pagination, after, fields)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "intent_name",
          "type": "str"
        },
        {
          "name": "assessment",
          "type": "str"
        },
        {
          "name": "date_start",
          "type": "date"
        },
        {
          "name": "date_end",
          "type": "date"
        },
        {
          "name": "include_deleted",
          "type": "bool"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "enable_cursor_pagination",
          "type": "bool"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "fields",
          "type": "list[str]"
        }
      ],
      "return": "NluFeedbackListing"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}": {
      "functionName": "get_languageunderstanding_domain_feedback_feedback_id",
      "signature": "get_languageunderstanding_domain_feedback_feedback_id(domain_id, feedback_id, fields)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "feedback_id",
          "type": "str"
        },
        {
          "name": "fields",
          "type": "list[str]"
        }
      ],
      "return": "NluFeedbackResponse"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "functionName": "get_languageunderstanding_domain_version",
      "signature": "get_languageunderstanding_domain_version(domain_id, domain_version_id, include_utterances)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "domain_version_id",
          "type": "str"
        },
        {
          "name": "include_utterances",
          "type": "bool"
        }
      ],
      "return": "NluDomainVersion"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/report": {
      "functionName": "get_languageunderstanding_domain_version_report",
      "signature": "get_languageunderstanding_domain_version_report(domain_id, domain_version_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "domain_version_id",
          "type": "str"
        }
      ],
      "return": "NluDomainVersionQualityReport"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions": {
      "functionName": "get_languageunderstanding_domain_versions",
      "signature": "get_languageunderstanding_domain_versions(domain_id, include_utterances, page_number, page_size)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "include_utterances",
          "type": "bool"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "NluDomainVersionListing"
    },
    "GET /api/v2/languageunderstanding/domains": {
      "functionName": "get_languageunderstanding_domains",
      "signature": "get_languageunderstanding_domains(page_number, page_size)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "NluDomainListing"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}": {
      "functionName": "get_languageunderstanding_miner",
      "signature": "get_languageunderstanding_miner(miner_id)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        }
      ],
      "return": "Miner"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "functionName": "get_languageunderstanding_miner_draft",
      "signature": "get_languageunderstanding_miner_draft(miner_id, draft_id)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        },
        {
          "name": "draft_id",
          "type": "str"
        }
      ],
      "return": "Draft"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/drafts": {
      "functionName": "get_languageunderstanding_miner_drafts",
      "signature": "get_languageunderstanding_miner_drafts(miner_id)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        }
      ],
      "return": "DraftListing"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/intents/{intentId}": {
      "functionName": "get_languageunderstanding_miner_intent",
      "signature": "get_languageunderstanding_miner_intent(miner_id, intent_id, expand)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        },
        {
          "name": "intent_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "MinerIntent"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/intents": {
      "functionName": "get_languageunderstanding_miner_intents",
      "signature": "get_languageunderstanding_miner_intents(miner_id, expand)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "MinedIntentsListing"
    },
    "GET /api/v2/languageunderstanding/miners": {
      "functionName": "get_languageunderstanding_miners",
      "signature": "get_languageunderstanding_miners()",
      "return": "MinerListing"
    },
    "PATCH /api/v2/languageunderstanding/domains/{domainId}": {
      "functionName": "patch_languageunderstanding_domain",
      "signature": "patch_languageunderstanding_domain(domain_id, body)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "NluDomain"
        }
      ],
      "return": "NluDomain"
    },
    "PATCH /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "functionName": "patch_languageunderstanding_miner_draft",
      "signature": "patch_languageunderstanding_miner_draft(miner_id, draft_id, body)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        },
        {
          "name": "draft_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DraftRequest"
        }
      ],
      "return": "Draft"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/feedback": {
      "functionName": "post_languageunderstanding_domain_feedback",
      "signature": "post_languageunderstanding_domain_feedback(domain_id, body)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "NluFeedbackRequest"
        }
      ],
      "return": "NluFeedbackResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/detect": {
      "functionName": "post_languageunderstanding_domain_version_detect",
      "signature": "post_languageunderstanding_domain_version_detect(domain_id, domain_version_id, body)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "domain_version_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "NluDetectionRequest"
        }
      ],
      "return": "NluDetectionResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/publish": {
      "functionName": "post_languageunderstanding_domain_version_publish",
      "signature": "post_languageunderstanding_domain_version_publish(domain_id, domain_version_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "domain_version_id",
          "type": "str"
        }
      ],
      "return": "NluDomainVersion"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/train": {
      "functionName": "post_languageunderstanding_domain_version_train",
      "signature": "post_languageunderstanding_domain_version_train(domain_id, domain_version_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "domain_version_id",
          "type": "str"
        }
      ],
      "return": "NluDomainVersionTrainingResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions": {
      "functionName": "post_languageunderstanding_domain_versions",
      "signature": "post_languageunderstanding_domain_versions(domain_id, body)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "NluDomainVersion"
        }
      ],
      "return": "NluDomainVersion"
    },
    "POST /api/v2/languageunderstanding/domains": {
      "functionName": "post_languageunderstanding_domains",
      "signature": "post_languageunderstanding_domains(body)",
      "parameters": [
        {
          "name": "body",
          "type": "NluDomain"
        }
      ],
      "return": "NluDomain"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/drafts": {
      "functionName": "post_languageunderstanding_miner_drafts",
      "signature": "post_languageunderstanding_miner_drafts(miner_id, body)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Draft"
        }
      ],
      "return": "Draft"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/execute": {
      "functionName": "post_languageunderstanding_miner_execute",
      "signature": "post_languageunderstanding_miner_execute(miner_id, body)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MinerExecuteRequest"
        }
      ],
      "return": "Miner"
    },
    "POST /api/v2/languageunderstanding/miners": {
      "functionName": "post_languageunderstanding_miners",
      "signature": "post_languageunderstanding_miners(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Miner"
        }
      ],
      "return": "Miner"
    },
    "PUT /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "functionName": "put_languageunderstanding_domain_version",
      "signature": "put_languageunderstanding_domain_version(domain_id, domain_version_id, body)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "domain_version_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "NluDomainVersion"
        }
      ],
      "return": "NluDomainVersion"
    }
  },
  "languages": {
    "DELETE /api/v2/languages/{languageId}": {
      "functionName": "delete_language",
      "signature": "delete_language(language_id)",
      "parameters": [
        {
          "name": "language_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/languages/{languageId}": {
      "functionName": "delete_routing_language",
      "signature": "delete_routing_language(language_id)",
      "parameters": [
        {
          "name": "language_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/languages/{languageId}": {
      "functionName": "get_language",
      "signature": "get_language(language_id)",
      "parameters": [
        {
          "name": "language_id",
          "type": "str"
        }
      ],
      "return": "Language"
    },
    "GET /api/v2/languages": {
      "functionName": "get_languages",
      "signature": "get_languages(page_size, page_number, sort_order, name)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "LanguageEntityListing"
    },
    "GET /api/v2/languages/translations": {
      "functionName": "get_languages_translations",
      "signature": "get_languages_translations()",
      "return": "AvailableTranslations"
    },
    "GET /api/v2/languages/translations/builtin": {
      "functionName": "get_languages_translations_builtin",
      "signature": "get_languages_translations_builtin(language)",
      "parameters": [
        {
          "name": "language",
          "type": "str"
        }
      ],
      "return": "dict(str, object)"
    },
    "GET /api/v2/languages/translations/organization": {
      "functionName": "get_languages_translations_organization",
      "signature": "get_languages_translations_organization(language)",
      "parameters": [
        {
          "name": "language",
          "type": "str"
        }
      ],
      "return": "dict(str, object)"
    },
    "GET /api/v2/languages/translations/users/{userId}": {
      "functionName": "get_languages_translations_user",
      "signature": "get_languages_translations_user(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "dict(str, object)"
    },
    "GET /api/v2/routing/languages/{languageId}": {
      "functionName": "get_routing_language",
      "signature": "get_routing_language(language_id)",
      "parameters": [
        {
          "name": "language_id",
          "type": "str"
        }
      ],
      "return": "Language"
    },
    "POST /api/v2/languages": {
      "functionName": "post_languages",
      "signature": "post_languages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Language"
        }
      ],
      "return": "Language"
    }
  },
  "learning": {
    "DELETE /api/v2/learning/assignments/{assignmentId}": {
      "functionName": "delete_learning_assignment",
      "signature": "delete_learning_assignment(assignment_id)",
      "parameters": [
        {
          "name": "assignment_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/learning/modules/{moduleId}": {
      "functionName": "delete_learning_module",
      "signature": "delete_learning_module(module_id)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/learning/assignments/{assignmentId}": {
      "functionName": "get_learning_assignment",
      "signature": "get_learning_assignment(assignment_id, expand)",
      "parameters": [
        {
          "name": "assignment_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LearningAssignment"
    },
    "GET /api/v2/learning/assignments": {
      "functionName": "get_learning_assignments",
      "signature": "get_learning_assignments(module_id, interval, completion_interval, overdue, page_size, page_number, pcPass, min_percentage_score, max_percentage_score, sort_order, sort_by, user_id, types, states, expand)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        },
        {
          "name": "interval",
          "type": "str"
        },
        {
          "name": "completion_interval",
          "type": "str"
        },
        {
          "name": "overdue",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "pcPass",
          "type": "str"
        },
        {
          "name": "min_percentage_score",
          "type": "float"
        },
        {
          "name": "max_percentage_score",
          "type": "float"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "user_id",
          "type": "list[str]"
        },
        {
          "name": "types",
          "type": "list[str]"
        },
        {
          "name": "states",
          "type": "list[str]"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LearningAssignmentsDomainEntity"
    },
    "GET /api/v2/learning/assignments/me": {
      "functionName": "get_learning_assignments_me",
      "signature": "get_learning_assignments_me(module_id, interval, completion_interval, overdue, page_size, page_number, pcPass, min_percentage_score, max_percentage_score, sort_order, sort_by, types, states, expand)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        },
        {
          "name": "interval",
          "type": "str"
        },
        {
          "name": "completion_interval",
          "type": "str"
        },
        {
          "name": "overdue",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "pcPass",
          "type": "str"
        },
        {
          "name": "min_percentage_score",
          "type": "float"
        },
        {
          "name": "max_percentage_score",
          "type": "float"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "types",
          "type": "list[str]"
        },
        {
          "name": "states",
          "type": "list[str]"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LearningAssignmentsDomainEntity"
    },
    "GET /api/v2/learning/modules/{moduleId}": {
      "functionName": "get_learning_module",
      "signature": "get_learning_module(module_id, expand)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LearningModule"
    },
    "GET /api/v2/learning/modules/{moduleId}/rule": {
      "functionName": "get_learning_module_rule",
      "signature": "get_learning_module_rule(module_id)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        }
      ],
      "return": "LearningModuleRule"
    },
    "GET /api/v2/learning/modules/{moduleId}/versions/{versionId}": {
      "functionName": "get_learning_module_version",
      "signature": "get_learning_module_version(module_id, version_id, expand)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        },
        {
          "name": "version_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LearningModule"
    },
    "GET /api/v2/learning/modules": {
      "functionName": "get_learning_modules",
      "signature": "get_learning_modules(is_archived, types, page_size, page_number, sort_order, sort_by, search_term, expand, is_published)",
      "parameters": [
        {
          "name": "is_archived",
          "type": "bool"
        },
        {
          "name": "types",
          "type": "list[str]"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "search_term",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "is_published",
          "type": "str"
        }
      ],
      "return": "LearningModulesDomainEntityListing"
    },
    "PATCH /api/v2/learning/assignments/{assignmentId}": {
      "functionName": "patch_learning_assignment",
      "signature": "patch_learning_assignment(assignment_id, body)",
      "parameters": [
        {
          "name": "assignment_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "LearningAssignmentUpdate"
        }
      ],
      "return": "LearningAssignment"
    },
    "POST /api/v2/learning/assessments/scoring": {
      "functionName": "post_learning_assessments_scoring",
      "signature": "post_learning_assessments_scoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LearningAssessmentScoringRequest"
        }
      ],
      "return": "AssessmentScoringSet"
    },
    "POST /api/v2/learning/assignments": {
      "functionName": "post_learning_assignments",
      "signature": "post_learning_assignments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LearningAssignmentCreate"
        }
      ],
      "return": "LearningAssignment"
    },
    "POST /api/v2/learning/assignments/aggregates/query": {
      "functionName": "post_learning_assignments_aggregates_query",
      "signature": "post_learning_assignments_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LearningAssignmentAggregateParam"
        }
      ],
      "return": "LearningAssignmentAggregateResponse"
    },
    "POST /api/v2/learning/assignments/bulkadd": {
      "functionName": "post_learning_assignments_bulkadd",
      "signature": "post_learning_assignments_bulkadd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[LearningAssignmentItem]"
        }
      ],
      "return": "LearningAssignmentBulkAddResponse"
    },
    "POST /api/v2/learning/assignments/bulkremove": {
      "functionName": "post_learning_assignments_bulkremove",
      "signature": "post_learning_assignments_bulkremove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "LearningAssignmentBulkRemoveResponse"
    },
    "POST /api/v2/learning/modules/{moduleId}/publish": {
      "functionName": "post_learning_module_publish",
      "signature": "post_learning_module_publish(module_id)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        }
      ],
      "return": "LearningModulePublishResponse"
    },
    "POST /api/v2/learning/modules": {
      "functionName": "post_learning_modules",
      "signature": "post_learning_modules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LearningModuleRequest"
        }
      ],
      "return": "LearningModule"
    },
    "POST /api/v2/learning/rules/query": {
      "functionName": "post_learning_rules_query",
      "signature": "post_learning_rules_query(page_size, page_number, body)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "body",
          "type": "LearningAssignmentUserQuery"
        }
      ],
      "return": "LearningAssignmentUserListing"
    },
    "PUT /api/v2/learning/modules/{moduleId}": {
      "functionName": "put_learning_module",
      "signature": "put_learning_module(module_id, body)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "LearningModuleRequest"
        }
      ],
      "return": "LearningModule"
    },
    "PUT /api/v2/learning/modules/{moduleId}/rule": {
      "functionName": "put_learning_module_rule",
      "signature": "put_learning_module_rule(module_id, body)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "LearningModuleRule"
        }
      ],
      "return": "LearningModuleRule"
    }
  },
  "license": {
    "GET /api/v2/license/definitions/{licenseId}": {
      "functionName": "get_license_definition",
      "signature": "get_license_definition(license_id)",
      "parameters": [
        {
          "name": "license_id",
          "type": "str"
        }
      ],
      "return": "LicenseDefinition"
    },
    "GET /api/v2/license/definitions": {
      "functionName": "get_license_definitions",
      "signature": "get_license_definitions()",
      "return": "list[LicenseDefinition]"
    },
    "GET /api/v2/license/toggles/{featureName}": {
      "functionName": "get_license_toggle",
      "signature": "get_license_toggle(feature_name)",
      "parameters": [
        {
          "name": "feature_name",
          "type": "str"
        }
      ],
      "return": "LicenseOrgToggle"
    },
    "GET /api/v2/license/users/{userId}": {
      "functionName": "get_license_user",
      "signature": "get_license_user(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "LicenseUser"
    },
    "GET /api/v2/license/users": {
      "functionName": "get_license_users",
      "signature": "get_license_users(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "UserLicensesEntityListing"
    },
    "POST /api/v2/license/infer": {
      "functionName": "post_license_infer",
      "signature": "post_license_infer(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "list[str]"
    },
    "POST /api/v2/license/organization": {
      "functionName": "post_license_organization",
      "signature": "post_license_organization(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LicenseBatchAssignmentRequest"
        }
      ],
      "return": "list[LicenseUpdateStatus]"
    },
    "POST /api/v2/license/toggles/{featureName}": {
      "functionName": "post_license_toggle",
      "signature": "post_license_toggle(feature_name)",
      "parameters": [
        {
          "name": "feature_name",
          "type": "str"
        }
      ],
      "return": "LicenseOrgToggle"
    },
    "POST /api/v2/license/users": {
      "functionName": "post_license_users",
      "signature": "post_license_users(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "dict(str, object)"
    }
  },
  "locations": {
    "DELETE /api/v2/locations/{locationId}": {
      "functionName": "delete_location",
      "signature": "delete_location(location_id)",
      "parameters": [
        {
          "name": "location_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/locations/{locationId}": {
      "functionName": "get_location",
      "signature": "get_location(location_id, expand)",
      "parameters": [
        {
          "name": "location_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LocationDefinition"
    },
    "GET /api/v2/locations/{locationId}/sublocations": {
      "functionName": "get_location_sublocations",
      "signature": "get_location_sublocations(location_id)",
      "parameters": [
        {
          "name": "location_id",
          "type": "str"
        }
      ],
      "return": "LocationEntityListing"
    },
    "GET /api/v2/locations": {
      "functionName": "get_locations",
      "signature": "get_locations(page_size, page_number, id, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "LocationEntityListing"
    },
    "GET /api/v2/locations/search": {
      "functionName": "get_locations_search",
      "signature": "get_locations_search(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "PATCH /api/v2/locations/{locationId}": {
      "functionName": "patch_location",
      "signature": "patch_location(location_id, body)",
      "parameters": [
        {
          "name": "location_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "LocationUpdateDefinition"
        }
      ],
      "return": "LocationDefinition"
    },
    "POST /api/v2/locations": {
      "functionName": "post_locations",
      "signature": "post_locations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocationCreateDefinition"
        }
      ],
      "return": "LocationDefinition"
    },
    "POST /api/v2/locations/search": {
      "functionName": "post_locations_search",
      "signature": "post_locations_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocationSearchRequest"
        }
      ],
      "return": "LocationsSearchResponse"
    }
  },
  "messaging": {
    "DELETE /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "delete_messaging_supportedcontent_supported_content_id",
      "signature": "delete_messaging_supportedcontent_supported_content_id(supported_content_id)",
      "parameters": [
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/messaging/supportedcontent": {
      "functionName": "get_messaging_supportedcontent",
      "signature": "get_messaging_supportedcontent(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "SupportedContentListing"
    },
    "GET /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "get_messaging_supportedcontent_supported_content_id",
      "signature": "get_messaging_supportedcontent_supported_content_id(supported_content_id)",
      "parameters": [
        {
          "name": "supported_content_id",
          "type": "str"
        }
      ],
      "return": "SupportedContent"
    },
    "PATCH /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "patch_messaging_supportedcontent_supported_content_id",
      "signature": "patch_messaging_supportedcontent_supported_content_id(supported_content_id, body)",
      "parameters": [
        {
          "name": "supported_content_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SupportedContent"
        }
      ],
      "return": "SupportedContent"
    },
    "POST /api/v2/messaging/supportedcontent": {
      "functionName": "post_messaging_supportedcontent",
      "signature": "post_messaging_supportedcontent(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SupportedContent"
        }
      ],
      "return": "SupportedContent"
    }
  },
  "mobiledevices": {
    "DELETE /api/v2/mobiledevices/{deviceId}": {
      "functionName": "delete_mobiledevice",
      "signature": "delete_mobiledevice(device_id)",
      "parameters": [
        {
          "name": "device_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/mobiledevices/{deviceId}": {
      "functionName": "get_mobiledevice",
      "signature": "get_mobiledevice(device_id)",
      "parameters": [
        {
          "name": "device_id",
          "type": "str"
        }
      ],
      "return": "UserDevice"
    },
    "GET /api/v2/mobiledevices": {
      "functionName": "get_mobiledevices",
      "signature": "get_mobiledevices(page_size, page_number, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "DirectoryUserDevicesListing"
    },
    "POST /api/v2/mobiledevices": {
      "functionName": "post_mobiledevices",
      "signature": "post_mobiledevices(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserDevice"
        }
      ],
      "return": "UserDevice"
    },
    "PUT /api/v2/mobiledevices/{deviceId}": {
      "functionName": "put_mobiledevice",
      "signature": "put_mobiledevice(device_id, body)",
      "parameters": [
        {
          "name": "device_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserDevice"
        }
      ],
      "return": "UserDevice"
    }
  },
  "notifications": {
    "DELETE /api/v2/notifications/channels/{channelId}/subscriptions": {
      "functionName": "delete_notifications_channel_subscriptions",
      "signature": "delete_notifications_channel_subscriptions(channel_id)",
      "parameters": [
        {
          "name": "channel_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/notifications/availabletopics": {
      "functionName": "get_notifications_availabletopics",
      "signature": "get_notifications_availabletopics(expand, include_preview)",
      "parameters": [
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "include_preview",
          "type": "bool"
        }
      ],
      "return": "AvailableTopicEntityListing"
    },
    "GET /api/v2/notifications/channels/{channelId}/subscriptions": {
      "functionName": "get_notifications_channel_subscriptions",
      "signature": "get_notifications_channel_subscriptions(channel_id)",
      "parameters": [
        {
          "name": "channel_id",
          "type": "str"
        }
      ],
      "return": "ChannelTopicEntityListing"
    },
    "GET /api/v2/notifications/channels": {
      "functionName": "get_notifications_channels",
      "signature": "get_notifications_channels(includechannels)",
      "parameters": [
        {
          "name": "includechannels",
          "type": "str"
        }
      ],
      "return": "ChannelEntityListing"
    },
    "HEAD /api/v2/notifications/channels/{channelId}": {
      "functionName": "head_notifications_channel",
      "signature": "head_notifications_channel(channel_id)",
      "parameters": [
        {
          "name": "channel_id",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/notifications/channels/{channelId}/subscriptions": {
      "functionName": "post_notifications_channel_subscriptions",
      "signature": "post_notifications_channel_subscriptions(channel_id, body)",
      "parameters": [
        {
          "name": "channel_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[ChannelTopic]"
        }
      ],
      "return": "ChannelTopicEntityListing"
    },
    "POST /api/v2/notifications/channels": {
      "functionName": "post_notifications_channels",
      "signature": "post_notifications_channels()",
      "return": "Channel"
    },
    "PUT /api/v2/notifications/channels/{channelId}/subscriptions": {
      "functionName": "put_notifications_channel_subscriptions",
      "signature": "put_notifications_channel_subscriptions(channel_id, body)",
      "parameters": [
        {
          "name": "channel_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[ChannelTopic]"
        }
      ],
      "return": "ChannelTopicEntityListing"
    }
  },
  "oauth": {
    "DELETE /api/v2/oauth/clients/{clientId}": {
      "functionName": "delete_oauth_client",
      "signature": "delete_oauth_client(client_id)",
      "parameters": [
        {
          "name": "client_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/oauth/authorizations/{clientId}": {
      "functionName": "get_oauth_authorization",
      "signature": "get_oauth_authorization(client_id)",
      "parameters": [
        {
          "name": "client_id",
          "type": "str"
        }
      ],
      "return": "OAuthAuthorization"
    },
    "GET /api/v2/oauth/authorizations": {
      "functionName": "get_oauth_authorizations",
      "signature": "get_oauth_authorizations()",
      "return": "OAuthAuthorizationListing"
    },
    "GET /api/v2/oauth/clients/{clientId}": {
      "functionName": "get_oauth_client",
      "signature": "get_oauth_client(client_id)",
      "parameters": [
        {
          "name": "client_id",
          "type": "str"
        }
      ],
      "return": "OAuthClient"
    },
    "GET /api/v2/oauth/clients/{clientId}/usage/query/results/{executionId}": {
      "functionName": "get_oauth_client_usage_query_result",
      "signature": "get_oauth_client_usage_query_result(execution_id, client_id)",
      "parameters": [
        {
          "name": "execution_id",
          "type": "str"
        },
        {
          "name": "client_id",
          "type": "str"
        }
      ],
      "return": "ApiUsageQueryResult"
    },
    "GET /api/v2/oauth/clients/{clientId}/usage/summary": {
      "functionName": "get_oauth_client_usage_summary",
      "signature": "get_oauth_client_usage_summary(client_id, days)",
      "parameters": [
        {
          "name": "client_id",
          "type": "str"
        },
        {
          "name": "days",
          "type": "str"
        }
      ],
      "return": "UsageExecutionResult"
    },
    "GET /api/v2/oauth/clients": {
      "functionName": "get_oauth_clients",
      "signature": "get_oauth_clients()",
      "return": "OAuthClientEntityListing"
    },
    "GET /api/v2/oauth/scopes/{scopeId}": {
      "functionName": "get_oauth_scope",
      "signature": "get_oauth_scope(scope_id, accept_language)",
      "parameters": [
        {
          "name": "scope_id",
          "type": "str"
        },
        {
          "name": "accept_language",
          "type": "str"
        }
      ],
      "return": "OAuthScope"
    },
    "GET /api/v2/oauth/scopes": {
      "functionName": "get_oauth_scopes",
      "signature": "get_oauth_scopes(accept_language)",
      "parameters": [
        {
          "name": "accept_language",
          "type": "str"
        }
      ],
      "return": "OAuthScopeListing"
    },
    "POST /api/v2/oauth/clients/{clientId}/secret": {
      "functionName": "post_oauth_client_secret",
      "signature": "post_oauth_client_secret(client_id)",
      "parameters": [
        {
          "name": "client_id",
          "type": "str"
        }
      ],
      "return": "OAuthClient"
    },
    "POST /api/v2/oauth/clients/{clientId}/usage/query": {
      "functionName": "post_oauth_client_usage_query",
      "signature": "post_oauth_client_usage_query(client_id, body)",
      "parameters": [
        {
          "name": "client_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ApiUsageQuery"
        }
      ],
      "return": "UsageExecutionResult"
    },
    "POST /api/v2/oauth/clients": {
      "functionName": "post_oauth_clients",
      "signature": "post_oauth_clients(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OAuthClientRequest"
        }
      ],
      "return": "OAuthClient"
    },
    "PUT /api/v2/oauth/clients/{clientId}": {
      "functionName": "put_oauth_client",
      "signature": "put_oauth_client(client_id, body)",
      "parameters": [
        {
          "name": "client_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "OAuthClientRequest"
        }
      ],
      "return": "OAuthClient"
    }
  },
  "objects": {
    "DELETE /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "delete_authorization_division",
      "signature": "delete_authorization_division(division_id, force)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "force",
          "type": "bool"
        }
      ]
    },
    "GET /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "get_authorization_division",
      "signature": "get_authorization_division(division_id, object_count)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "object_count",
          "type": "bool"
        }
      ],
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions": {
      "functionName": "get_authorization_divisions",
      "signature": "get_authorization_divisions(page_size, page_number, sort_by, expand, next_page, previous_page, object_count, id, name)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "object_count",
          "type": "bool"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "AuthzDivisionEntityListing"
    },
    "GET /api/v2/authorization/divisions/home": {
      "functionName": "get_authorization_divisions_home",
      "signature": "get_authorization_divisions_home()",
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/limit": {
      "functionName": "get_authorization_divisions_limit",
      "signature": "get_authorization_divisions_limit()",
      "return": "int"
    },
    "POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}": {
      "functionName": "post_authorization_division_object",
      "signature": "post_authorization_division_object(division_id, object_type, body)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "object_type",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ]
    },
    "POST /api/v2/authorization/divisions/{divisionId}/restore": {
      "functionName": "post_authorization_division_restore",
      "signature": "post_authorization_division_restore(division_id, body)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/divisions": {
      "functionName": "post_authorization_divisions",
      "signature": "post_authorization_divisions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "PUT /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "put_authorization_division",
      "signature": "put_authorization_division(division_id, body)",
      "parameters": [
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    }
  },
  "organization": {
    "GET /api/v2/fieldconfig": {
      "functionName": "get_fieldconfig",
      "signature": "get_fieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "str"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/organizations/embeddedintegration": {
      "functionName": "get_organizations_embeddedintegration",
      "signature": "get_organizations_embeddedintegration()",
      "return": "EmbeddedIntegration"
    },
    "GET /api/v2/organizations/ipaddressauthentication": {
      "functionName": "get_organizations_ipaddressauthentication",
      "signature": "get_organizations_ipaddressauthentication()",
      "return": "IpAddressAuthentication"
    },
    "GET /api/v2/organizations/limits/changerequests/{requestId}": {
      "functionName": "get_organizations_limits_changerequest",
      "signature": "get_organizations_limits_changerequest(request_id)",
      "parameters": [
        {
          "name": "request_id",
          "type": "str"
        }
      ],
      "return": "LimitChangeRequestDetails"
    },
    "GET /api/v2/organizations/limits/changerequests": {
      "functionName": "get_organizations_limits_changerequests",
      "signature": "get_organizations_limits_changerequests(after, before, status, page_size, expand)",
      "parameters": [
        {
          "name": "after",
          "type": "int"
        },
        {
          "name": "before",
          "type": "int"
        },
        {
          "name": "status",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LimitChangeRequestsEntityListing"
    },
    "GET /api/v2/organizations/limits/docs": {
      "functionName": "get_organizations_limits_docs",
      "signature": "get_organizations_limits_docs()",
      "return": "UrlResponse"
    },
    "GET /api/v2/organizations/limits/namespaces/{namespaceName}": {
      "functionName": "get_organizations_limits_namespace",
      "signature": "get_organizations_limits_namespace(namespace_name)",
      "parameters": [
        {
          "name": "namespace_name",
          "type": "str"
        }
      ],
      "return": "LimitsEntityListing"
    },
    "GET /api/v2/organizations/limits/namespaces/{namespaceName}/defaults": {
      "functionName": "get_organizations_limits_namespace_defaults",
      "signature": "get_organizations_limits_namespace_defaults(namespace_name)",
      "parameters": [
        {
          "name": "namespace_name",
          "type": "str"
        }
      ],
      "return": "LimitsEntityListing"
    },
    "GET /api/v2/organizations/limits/namespaces": {
      "functionName": "get_organizations_limits_namespaces",
      "signature": "get_organizations_limits_namespaces(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "PagedNamespaceListing"
    },
    "GET /api/v2/organizations/me": {
      "functionName": "get_organizations_me",
      "signature": "get_organizations_me()",
      "return": "Organization"
    },
    "GET /api/v2/organizations/whitelist": {
      "functionName": "get_organizations_whitelist",
      "signature": "get_organizations_whitelist()",
      "return": "OrgWhitelistSettings"
    },
    "PATCH /api/v2/organizations/features/{featureName}": {
      "functionName": "patch_organizations_feature",
      "signature": "patch_organizations_feature(feature_name, enabled)",
      "parameters": [
        {
          "name": "feature_name",
          "type": "str"
        },
        {
          "name": "enabled",
          "type": "FeatureState"
        }
      ],
      "return": "OrganizationFeatures"
    },
    "PUT /api/v2/organizations/embeddedintegration": {
      "functionName": "put_organizations_embeddedintegration",
      "signature": "put_organizations_embeddedintegration(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EmbeddedIntegration"
        }
      ],
      "return": "EmbeddedIntegration"
    },
    "PUT /api/v2/organizations/ipaddressauthentication": {
      "functionName": "put_organizations_ipaddressauthentication",
      "signature": "put_organizations_ipaddressauthentication(body)",
      "parameters": [
        {
          "name": "body",
          "type": "IpAddressAuthentication"
        }
      ],
      "return": "IpAddressAuthentication"
    },
    "PUT /api/v2/organizations/me": {
      "functionName": "put_organizations_me",
      "signature": "put_organizations_me(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Organization"
        }
      ],
      "return": "Organization"
    },
    "PUT /api/v2/organizations/whitelist": {
      "functionName": "put_organizations_whitelist",
      "signature": "put_organizations_whitelist(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OrgWhitelistSettings"
        }
      ],
      "return": "OrgWhitelistSettings"
    }
  },
  "organizationauthorization": {
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "functionName": "delete_orgauthorization_trustee",
      "signature": "delete_orgauthorization_trustee(trustee_org_id)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/clonedusers/{trusteeUserId}": {
      "functionName": "delete_orgauthorization_trustee_cloneduser",
      "signature": "delete_orgauthorization_trustee_cloneduser(trustee_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}": {
      "functionName": "delete_orgauthorization_trustee_user",
      "signature": "delete_orgauthorization_trustee_user(trustee_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "functionName": "delete_orgauthorization_trustee_user_roles",
      "signature": "delete_orgauthorization_trustee_user_roles(trustee_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}": {
      "functionName": "delete_orgauthorization_trustor",
      "signature": "delete_orgauthorization_trustor(trustor_org_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "functionName": "delete_orgauthorization_trustor_cloneduser",
      "signature": "delete_orgauthorization_trustor_cloneduser(trustor_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "functionName": "delete_orgauthorization_trustor_user",
      "signature": "delete_orgauthorization_trustor_user(trustor_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/orgauthorization/pairings/{pairingId}": {
      "functionName": "get_orgauthorization_pairing",
      "signature": "get_orgauthorization_pairing(pairing_id)",
      "parameters": [
        {
          "name": "pairing_id",
          "type": "str"
        }
      ],
      "return": "TrustRequest"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "functionName": "get_orgauthorization_trustee",
      "signature": "get_orgauthorization_trustee(trustee_org_id)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        }
      ],
      "return": "Trustee"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/clonedusers": {
      "functionName": "get_orgauthorization_trustee_clonedusers",
      "signature": "get_orgauthorization_trustee_clonedusers(trustee_org_id)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        }
      ],
      "return": "ClonedUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}": {
      "functionName": "get_orgauthorization_trustee_user",
      "signature": "get_orgauthorization_trustee_user(trustee_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ],
      "return": "TrustUser"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "functionName": "get_orgauthorization_trustee_user_roles",
      "signature": "get_orgauthorization_trustee_user_roles(trustee_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ],
      "return": "UserAuthorization"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users": {
      "functionName": "get_orgauthorization_trustee_users",
      "signature": "get_orgauthorization_trustee_users(trustee_org_id, page_size, page_number)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "TrustUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees": {
      "functionName": "get_orgauthorization_trustees",
      "signature": "get_orgauthorization_trustees(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "TrustEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees/default": {
      "functionName": "get_orgauthorization_trustees_default",
      "signature": "get_orgauthorization_trustees_default()",
      "return": "Trustee"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}": {
      "functionName": "get_orgauthorization_trustor",
      "signature": "get_orgauthorization_trustor(trustor_org_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        }
      ],
      "return": "Trustor"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "functionName": "get_orgauthorization_trustor_cloneduser",
      "signature": "get_orgauthorization_trustor_cloneduser(trustor_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ],
      "return": "ClonedUser"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers": {
      "functionName": "get_orgauthorization_trustor_clonedusers",
      "signature": "get_orgauthorization_trustor_clonedusers(trustor_org_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        }
      ],
      "return": "ClonedUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "functionName": "get_orgauthorization_trustor_user",
      "signature": "get_orgauthorization_trustor_user(trustor_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ],
      "return": "TrustUser"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/users": {
      "functionName": "get_orgauthorization_trustor_users",
      "signature": "get_orgauthorization_trustor_users(trustor_org_id, page_size, page_number)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "TrustUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustors": {
      "functionName": "get_orgauthorization_trustors",
      "signature": "get_orgauthorization_trustors(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "TrustorEntityListing"
    },
    "POST /api/v2/orgauthorization/pairings": {
      "functionName": "post_orgauthorization_pairings",
      "signature": "post_orgauthorization_pairings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TrustRequestCreate"
        }
      ],
      "return": "TrustRequest"
    },
    "POST /api/v2/orgauthorization/trustees/{trusteeOrgId}/users": {
      "functionName": "post_orgauthorization_trustee_users",
      "signature": "post_orgauthorization_trustee_users(trustee_org_id, body)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TrustMemberCreate"
        }
      ],
      "return": "TrustUser"
    },
    "POST /api/v2/orgauthorization/trustees": {
      "functionName": "post_orgauthorization_trustees",
      "signature": "post_orgauthorization_trustees(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TrustCreate"
        }
      ],
      "return": "Trustee"
    },
    "POST /api/v2/orgauthorization/trustees/audits": {
      "functionName": "post_orgauthorization_trustees_audits",
      "signature": "post_orgauthorization_trustees_audits(body, page_size, page_number, sort_by, sort_order)",
      "parameters": [
        {
          "name": "body",
          "type": "TrusteeAuditQueryRequest"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "AuditQueryResponse"
    },
    "POST /api/v2/orgauthorization/trustees/default": {
      "functionName": "post_orgauthorization_trustees_default",
      "signature": "post_orgauthorization_trustees_default(assign_default_role, auto_expire)",
      "parameters": [
        {
          "name": "assign_default_role",
          "type": "bool"
        },
        {
          "name": "auto_expire",
          "type": "bool"
        }
      ],
      "return": "Trustee"
    },
    "POST /api/v2/orgauthorization/trustor/audits": {
      "functionName": "post_orgauthorization_trustor_audits",
      "signature": "post_orgauthorization_trustor_audits(body, page_size, page_number, sort_by, sort_order)",
      "parameters": [
        {
          "name": "body",
          "type": "TrustorAuditQueryRequest"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "AuditQueryResponse"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "functionName": "put_orgauthorization_trustee",
      "signature": "put_orgauthorization_trustee(trustee_org_id, body)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TrustUpdate"
        }
      ],
      "return": "Trustee"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roledivisions": {
      "functionName": "put_orgauthorization_trustee_user_roledivisions",
      "signature": "put_orgauthorization_trustee_user_roledivisions(trustee_org_id, trustee_user_id, body)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "functionName": "put_orgauthorization_trustee_user_roles",
      "signature": "put_orgauthorization_trustee_user_roles(trustee_org_id, trustee_user_id, body)",
      "parameters": [
        {
          "name": "trustee_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "functionName": "put_orgauthorization_trustor_cloneduser",
      "signature": "put_orgauthorization_trustor_cloneduser(trustor_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ],
      "return": "ClonedUser"
    },
    "PUT /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "functionName": "put_orgauthorization_trustor_user",
      "signature": "put_orgauthorization_trustor_user(trustor_org_id, trustee_user_id)",
      "parameters": [
        {
          "name": "trustor_org_id",
          "type": "str"
        },
        {
          "name": "trustee_user_id",
          "type": "str"
        }
      ],
      "return": "TrustUser"
    }
  },
  "outbound": {
    "DELETE /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "functionName": "delete_outbound_attemptlimit",
      "signature": "delete_outbound_attemptlimit(attempt_limits_id)",
      "parameters": [
        {
          "name": "attempt_limits_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "functionName": "delete_outbound_callabletimeset",
      "signature": "delete_outbound_callabletimeset(callable_time_set_id)",
      "parameters": [
        {
          "name": "callable_time_set_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "functionName": "delete_outbound_callanalysisresponseset",
      "signature": "delete_outbound_callanalysisresponseset(call_analysis_set_id)",
      "parameters": [
        {
          "name": "call_analysis_set_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/campaigns/{campaignId}": {
      "functionName": "delete_outbound_campaign",
      "signature": "delete_outbound_campaign(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "Campaign"
    },
    "DELETE /api/v2/outbound/campaigns/{campaignId}/progress": {
      "functionName": "delete_outbound_campaign_progress",
      "signature": "delete_outbound_campaign_progress(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "functionName": "delete_outbound_campaignrule",
      "signature": "delete_outbound_campaignrule(campaign_rule_id)",
      "parameters": [
        {
          "name": "campaign_rule_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}": {
      "functionName": "delete_outbound_contactlist",
      "signature": "delete_outbound_contactlist(contact_list_id)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "functionName": "delete_outbound_contactlist_contact",
      "signature": "delete_outbound_contactlist_contact(contact_list_id, contact_id)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "contact_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}/contacts": {
      "functionName": "delete_outbound_contactlist_contacts",
      "signature": "delete_outbound_contactlist_contacts(contact_list_id, contact_ids)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "contact_ids",
          "type": "list[str]"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "functionName": "delete_outbound_contactlistfilter",
      "signature": "delete_outbound_contactlistfilter(contact_list_filter_id)",
      "parameters": [
        {
          "name": "contact_list_filter_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists": {
      "functionName": "delete_outbound_contactlists",
      "signature": "delete_outbound_contactlists(id)",
      "parameters": [
        {
          "name": "id",
          "type": "list[str]"
        }
      ]
    },
    "DELETE /api/v2/outbound/dnclists/{dncListId}": {
      "functionName": "delete_outbound_dnclist",
      "signature": "delete_outbound_dnclist(dnc_list_id)",
      "parameters": [
        {
          "name": "dnc_list_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "functionName": "delete_outbound_messagingcampaign",
      "signature": "delete_outbound_messagingcampaign(messaging_campaign_id)",
      "parameters": [
        {
          "name": "messaging_campaign_id",
          "type": "str"
        }
      ],
      "return": "MessagingCampaign"
    },
    "DELETE /api/v2/outbound/rulesets/{ruleSetId}": {
      "functionName": "delete_outbound_ruleset",
      "signature": "delete_outbound_ruleset(rule_set_id)",
      "parameters": [
        {
          "name": "rule_set_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "functionName": "delete_outbound_schedules_campaign",
      "signature": "delete_outbound_schedules_campaign(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "functionName": "delete_outbound_schedules_sequence",
      "signature": "delete_outbound_schedules_sequence(sequence_id)",
      "parameters": [
        {
          "name": "sequence_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/outbound/sequences/{sequenceId}": {
      "functionName": "delete_outbound_sequence",
      "signature": "delete_outbound_sequence(sequence_id)",
      "parameters": [
        {
          "name": "sequence_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "functionName": "get_outbound_attemptlimit",
      "signature": "get_outbound_attemptlimit(attempt_limits_id)",
      "parameters": [
        {
          "name": "attempt_limits_id",
          "type": "str"
        }
      ],
      "return": "AttemptLimits"
    },
    "GET /api/v2/outbound/attemptlimits": {
      "functionName": "get_outbound_attemptlimits",
      "signature": "get_outbound_attemptlimits(page_size, page_number, allow_empty_result, filter_type, name, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "AttemptLimitsEntityListing"
    },
    "GET /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "functionName": "get_outbound_callabletimeset",
      "signature": "get_outbound_callabletimeset(callable_time_set_id)",
      "parameters": [
        {
          "name": "callable_time_set_id",
          "type": "str"
        }
      ],
      "return": "CallableTimeSet"
    },
    "GET /api/v2/outbound/callabletimesets": {
      "functionName": "get_outbound_callabletimesets",
      "signature": "get_outbound_callabletimesets(page_size, page_number, allow_empty_result, filter_type, name, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "CallableTimeSetEntityListing"
    },
    "GET /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "functionName": "get_outbound_callanalysisresponseset",
      "signature": "get_outbound_callanalysisresponseset(call_analysis_set_id)",
      "parameters": [
        {
          "name": "call_analysis_set_id",
          "type": "str"
        }
      ],
      "return": "ResponseSet"
    },
    "GET /api/v2/outbound/callanalysisresponsesets": {
      "functionName": "get_outbound_callanalysisresponsesets",
      "signature": "get_outbound_callanalysisresponsesets(page_size, page_number, allow_empty_result, filter_type, name, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "ResponseSetEntityListing"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}": {
      "functionName": "get_outbound_campaign",
      "signature": "get_outbound_campaign(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "Campaign"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview/results": {
      "functionName": "get_outbound_campaign_agentownedmappingpreview_results",
      "signature": "get_outbound_campaign_agentownedmappingpreview_results(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "AgentOwnedMappingPreviewListing"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/diagnostics": {
      "functionName": "get_outbound_campaign_diagnostics",
      "signature": "get_outbound_campaign_diagnostics(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "CampaignDiagnostics"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/interactions": {
      "functionName": "get_outbound_campaign_interactions",
      "signature": "get_outbound_campaign_interactions(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "CampaignInteractions"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/progress": {
      "functionName": "get_outbound_campaign_progress",
      "signature": "get_outbound_campaign_progress(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "CampaignProgress"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/stats": {
      "functionName": "get_outbound_campaign_stats",
      "signature": "get_outbound_campaign_stats(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "CampaignStats"
    },
    "GET /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "functionName": "get_outbound_campaignrule",
      "signature": "get_outbound_campaignrule(campaign_rule_id)",
      "parameters": [
        {
          "name": "campaign_rule_id",
          "type": "str"
        }
      ],
      "return": "CampaignRule"
    },
    "GET /api/v2/outbound/campaignrules": {
      "functionName": "get_outbound_campaignrules",
      "signature": "get_outbound_campaignrules(page_size, page_number, allow_empty_result, filter_type, name, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "CampaignRuleEntityListing"
    },
    "GET /api/v2/outbound/campaigns": {
      "functionName": "get_outbound_campaigns",
      "signature": "get_outbound_campaigns(page_size, page_number, filter_type, name, id, contact_list_id, dnc_list_ids, distribution_queue_id, edge_group_id, call_analysis_response_set_id, division_id, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "dnc_list_ids",
          "type": "str"
        },
        {
          "name": "distribution_queue_id",
          "type": "str"
        },
        {
          "name": "edge_group_id",
          "type": "str"
        },
        {
          "name": "call_analysis_response_set_id",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "CampaignEntityListing"
    },
    "GET /api/v2/outbound/campaigns/all": {
      "functionName": "get_outbound_campaigns_all",
      "signature": "get_outbound_campaigns_all(page_size, page_number, id, name, division_id, media_type, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "media_type",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "CommonCampaignEntityListing"
    },
    "GET /api/v2/outbound/campaigns/all/divisionviews": {
      "functionName": "get_outbound_campaigns_all_divisionviews",
      "signature": "get_outbound_campaigns_all_divisionviews(page_size, page_number, id, name, division_id, media_type, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "media_type",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "CommonCampaignDivisionViewEntityListing"
    },
    "GET /api/v2/outbound/campaigns/divisionviews/{campaignId}": {
      "functionName": "get_outbound_campaigns_divisionview",
      "signature": "get_outbound_campaigns_divisionview(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "CampaignDivisionView"
    },
    "GET /api/v2/outbound/campaigns/divisionviews": {
      "functionName": "get_outbound_campaigns_divisionviews",
      "signature": "get_outbound_campaigns_divisionviews(page_size, page_number, filter_type, name, id, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "CampaignDivisionViewListing"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}": {
      "functionName": "get_outbound_contactlist",
      "signature": "get_outbound_contactlist(contact_list_id, include_import_status, include_size)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "include_import_status",
          "type": "bool"
        },
        {
          "name": "include_size",
          "type": "bool"
        }
      ],
      "return": "ContactList"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "functionName": "get_outbound_contactlist_contact",
      "signature": "get_outbound_contactlist_contact(contact_list_id, contact_id)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "contact_id",
          "type": "str"
        }
      ],
      "return": "DialerContact"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/export": {
      "functionName": "get_outbound_contactlist_export",
      "signature": "get_outbound_contactlist_export(contact_list_id, download)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "download",
          "type": "str"
        }
      ],
      "return": "ExportUri"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/importstatus": {
      "functionName": "get_outbound_contactlist_importstatus",
      "signature": "get_outbound_contactlist_importstatus(contact_list_id)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        }
      ],
      "return": "ImportStatus"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/timezonemappingpreview": {
      "functionName": "get_outbound_contactlist_timezonemappingpreview",
      "signature": "get_outbound_contactlist_timezonemappingpreview(contact_list_id)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        }
      ],
      "return": "TimeZoneMappingPreview"
    },
    "GET /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "functionName": "get_outbound_contactlistfilter",
      "signature": "get_outbound_contactlistfilter(contact_list_filter_id)",
      "parameters": [
        {
          "name": "contact_list_filter_id",
          "type": "str"
        }
      ],
      "return": "ContactListFilter"
    },
    "GET /api/v2/outbound/contactlistfilters": {
      "functionName": "get_outbound_contactlistfilters",
      "signature": "get_outbound_contactlistfilters(page_size, page_number, allow_empty_result, filter_type, name, sort_by, sort_order, contact_list_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "contact_list_id",
          "type": "str"
        }
      ],
      "return": "ContactListFilterEntityListing"
    },
    "GET /api/v2/outbound/contactlists": {
      "functionName": "get_outbound_contactlists",
      "signature": "get_outbound_contactlists(include_import_status, include_size, page_size, page_number, allow_empty_result, filter_type, name, id, division_id, sort_by, sort_order)",
      "parameters": [
        {
          "name": "include_import_status",
          "type": "bool"
        },
        {
          "name": "include_size",
          "type": "bool"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "ContactListEntityListing"
    },
    "GET /api/v2/outbound/contactlists/divisionviews/{contactListId}": {
      "functionName": "get_outbound_contactlists_divisionview",
      "signature": "get_outbound_contactlists_divisionview(contact_list_id, include_import_status, include_size)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "include_import_status",
          "type": "bool"
        },
        {
          "name": "include_size",
          "type": "bool"
        }
      ],
      "return": "ContactListDivisionView"
    },
    "GET /api/v2/outbound/contactlists/divisionviews": {
      "functionName": "get_outbound_contactlists_divisionviews",
      "signature": "get_outbound_contactlists_divisionviews(include_import_status, include_size, page_size, page_number, filter_type, name, id, sort_by, sort_order)",
      "parameters": [
        {
          "name": "include_import_status",
          "type": "bool"
        },
        {
          "name": "include_size",
          "type": "bool"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "ContactListDivisionViewListing"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}": {
      "functionName": "get_outbound_dnclist",
      "signature": "get_outbound_dnclist(dnc_list_id, include_import_status, include_size)",
      "parameters": [
        {
          "name": "dnc_list_id",
          "type": "str"
        },
        {
          "name": "include_import_status",
          "type": "bool"
        },
        {
          "name": "include_size",
          "type": "bool"
        }
      ],
      "return": "DncList"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}/export": {
      "functionName": "get_outbound_dnclist_export",
      "signature": "get_outbound_dnclist_export(dnc_list_id, download)",
      "parameters": [
        {
          "name": "dnc_list_id",
          "type": "str"
        },
        {
          "name": "download",
          "type": "str"
        }
      ],
      "return": "ExportUri"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}/importstatus": {
      "functionName": "get_outbound_dnclist_importstatus",
      "signature": "get_outbound_dnclist_importstatus(dnc_list_id)",
      "parameters": [
        {
          "name": "dnc_list_id",
          "type": "str"
        }
      ],
      "return": "ImportStatus"
    },
    "GET /api/v2/outbound/dnclists": {
      "functionName": "get_outbound_dnclists",
      "signature": "get_outbound_dnclists(include_import_status, include_size, page_size, page_number, allow_empty_result, filter_type, name, dnc_source_type, division_id, sort_by, sort_order)",
      "parameters": [
        {
          "name": "include_import_status",
          "type": "bool"
        },
        {
          "name": "include_size",
          "type": "bool"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "dnc_source_type",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "DncListEntityListing"
    },
    "GET /api/v2/outbound/dnclists/divisionviews/{dncListId}": {
      "functionName": "get_outbound_dnclists_divisionview",
      "signature": "get_outbound_dnclists_divisionview(dnc_list_id, include_import_status, include_size)",
      "parameters": [
        {
          "name": "dnc_list_id",
          "type": "str"
        },
        {
          "name": "include_import_status",
          "type": "bool"
        },
        {
          "name": "include_size",
          "type": "bool"
        }
      ],
      "return": "DncListDivisionView"
    },
    "GET /api/v2/outbound/dnclists/divisionviews": {
      "functionName": "get_outbound_dnclists_divisionviews",
      "signature": "get_outbound_dnclists_divisionviews(include_import_status, include_size, page_size, page_number, filter_type, name, dnc_source_type, id, sort_by, sort_order)",
      "parameters": [
        {
          "name": "include_import_status",
          "type": "bool"
        },
        {
          "name": "include_size",
          "type": "bool"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "dnc_source_type",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "DncListDivisionViewListing"
    },
    "GET /api/v2/outbound/events/{eventId}": {
      "functionName": "get_outbound_event",
      "signature": "get_outbound_event(event_id)",
      "parameters": [
        {
          "name": "event_id",
          "type": "str"
        }
      ],
      "return": "EventLog"
    },
    "GET /api/v2/outbound/events": {
      "functionName": "get_outbound_events",
      "signature": "get_outbound_events(page_size, page_number, filter_type, category, level, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "category",
          "type": "str"
        },
        {
          "name": "level",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "DialerEventEntityListing"
    },
    "GET /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "functionName": "get_outbound_messagingcampaign",
      "signature": "get_outbound_messagingcampaign(messaging_campaign_id)",
      "parameters": [
        {
          "name": "messaging_campaign_id",
          "type": "str"
        }
      ],
      "return": "MessagingCampaign"
    },
    "GET /api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress": {
      "functionName": "get_outbound_messagingcampaign_progress",
      "signature": "get_outbound_messagingcampaign_progress(messaging_campaign_id)",
      "parameters": [
        {
          "name": "messaging_campaign_id",
          "type": "str"
        }
      ],
      "return": "CampaignProgress"
    },
    "GET /api/v2/outbound/messagingcampaigns": {
      "functionName": "get_outbound_messagingcampaigns",
      "signature": "get_outbound_messagingcampaigns(page_size, page_number, sort_by, sort_order, name, contact_list_id, division_id, type, sender_sms_phone_number, id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        },
        {
          "name": "type",
          "type": "str"
        },
        {
          "name": "sender_sms_phone_number",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "MessagingCampaignEntityListing"
    },
    "GET /api/v2/outbound/messagingcampaigns/divisionviews/{messagingCampaignId}": {
      "functionName": "get_outbound_messagingcampaigns_divisionview",
      "signature": "get_outbound_messagingcampaigns_divisionview(messaging_campaign_id)",
      "parameters": [
        {
          "name": "messaging_campaign_id",
          "type": "str"
        }
      ],
      "return": "MessagingCampaignDivisionView"
    },
    "GET /api/v2/outbound/messagingcampaigns/divisionviews": {
      "functionName": "get_outbound_messagingcampaigns_divisionviews",
      "signature": "get_outbound_messagingcampaigns_divisionviews(page_size, page_number, sort_order, name, type, id, sender_sms_phone_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "type",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "sender_sms_phone_number",
          "type": "str"
        }
      ],
      "return": "MessagingCampaignDivisionViewEntityListing"
    },
    "GET /api/v2/outbound/rulesets/{ruleSetId}": {
      "functionName": "get_outbound_ruleset",
      "signature": "get_outbound_ruleset(rule_set_id)",
      "parameters": [
        {
          "name": "rule_set_id",
          "type": "str"
        }
      ],
      "return": "RuleSet"
    },
    "GET /api/v2/outbound/rulesets": {
      "functionName": "get_outbound_rulesets",
      "signature": "get_outbound_rulesets(page_size, page_number, allow_empty_result, filter_type, name, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "RuleSetEntityListing"
    },
    "GET /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "functionName": "get_outbound_schedules_campaign",
      "signature": "get_outbound_schedules_campaign(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "CampaignSchedule"
    },
    "GET /api/v2/outbound/schedules/campaigns": {
      "functionName": "get_outbound_schedules_campaigns",
      "signature": "get_outbound_schedules_campaigns()",
      "return": "list[CampaignSchedule]"
    },
    "GET /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "functionName": "get_outbound_schedules_sequence",
      "signature": "get_outbound_schedules_sequence(sequence_id)",
      "parameters": [
        {
          "name": "sequence_id",
          "type": "str"
        }
      ],
      "return": "SequenceSchedule"
    },
    "GET /api/v2/outbound/schedules/sequences": {
      "functionName": "get_outbound_schedules_sequences",
      "signature": "get_outbound_schedules_sequences()",
      "return": "list[SequenceSchedule]"
    },
    "GET /api/v2/outbound/sequences/{sequenceId}": {
      "functionName": "get_outbound_sequence",
      "signature": "get_outbound_sequence(sequence_id)",
      "parameters": [
        {
          "name": "sequence_id",
          "type": "str"
        }
      ],
      "return": "CampaignSequence"
    },
    "GET /api/v2/outbound/sequences": {
      "functionName": "get_outbound_sequences",
      "signature": "get_outbound_sequences(page_size, page_number, allow_empty_result, filter_type, name, sort_by, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "allow_empty_result",
          "type": "bool"
        },
        {
          "name": "filter_type",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "CampaignSequenceEntityListing"
    },
    "GET /api/v2/outbound/settings": {
      "functionName": "get_outbound_settings",
      "signature": "get_outbound_settings()",
      "return": "OutboundSettings"
    },
    "GET /api/v2/outbound/wrapupcodemappings": {
      "functionName": "get_outbound_wrapupcodemappings",
      "signature": "get_outbound_wrapupcodemappings()",
      "return": "WrapUpCodeMapping"
    },
    "PATCH /api/v2/outbound/settings": {
      "functionName": "patch_outbound_settings",
      "signature": "patch_outbound_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OutboundSettings"
        }
      ]
    },
    "POST /api/v2/outbound/attemptlimits": {
      "functionName": "post_outbound_attemptlimits",
      "signature": "post_outbound_attemptlimits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AttemptLimits"
        }
      ],
      "return": "AttemptLimits"
    },
    "POST /api/v2/outbound/audits": {
      "functionName": "post_outbound_audits",
      "signature": "post_outbound_audits(body, page_size, page_number, sort_by, sort_order, facets_only)",
      "parameters": [
        {
          "name": "body",
          "type": "DialerAuditRequest"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "facets_only",
          "type": "bool"
        }
      ],
      "return": "AuditSearchResult"
    },
    "POST /api/v2/outbound/callabletimesets": {
      "functionName": "post_outbound_callabletimesets",
      "signature": "post_outbound_callabletimesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CallableTimeSet"
        }
      ],
      "return": "CallableTimeSet"
    },
    "POST /api/v2/outbound/callanalysisresponsesets": {
      "functionName": "post_outbound_callanalysisresponsesets",
      "signature": "post_outbound_callanalysisresponsesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ResponseSet"
        }
      ],
      "return": "ResponseSet"
    },
    "POST /api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview": {
      "functionName": "post_outbound_campaign_agentownedmappingpreview",
      "signature": "post_outbound_campaign_agentownedmappingpreview(campaign_id)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "POST /api/v2/outbound/campaigns/{campaignId}/callback/schedule": {
      "functionName": "post_outbound_campaign_callback_schedule",
      "signature": "post_outbound_campaign_callback_schedule(campaign_id, body)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ContactCallbackRequest"
        }
      ],
      "return": "ContactCallbackRequest"
    },
    "POST /api/v2/outbound/campaignrules": {
      "functionName": "post_outbound_campaignrules",
      "signature": "post_outbound_campaignrules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CampaignRule"
        }
      ],
      "return": "CampaignRule"
    },
    "POST /api/v2/outbound/campaigns": {
      "functionName": "post_outbound_campaigns",
      "signature": "post_outbound_campaigns(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Campaign"
        }
      ],
      "return": "Campaign"
    },
    "POST /api/v2/outbound/campaigns/progress": {
      "functionName": "post_outbound_campaigns_progress",
      "signature": "post_outbound_campaigns_progress(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "list[CampaignProgress]"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/clear": {
      "functionName": "post_outbound_contactlist_clear",
      "signature": "post_outbound_contactlist_clear(contact_list_id)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/contacts": {
      "functionName": "post_outbound_contactlist_contacts",
      "signature": "post_outbound_contactlist_contacts(contact_list_id, body, priority, clear_system_data, do_not_queue)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[WritableDialerContact]"
        },
        {
          "name": "priority",
          "type": "bool"
        },
        {
          "name": "clear_system_data",
          "type": "bool"
        },
        {
          "name": "do_not_queue",
          "type": "bool"
        }
      ],
      "return": "list[DialerContact]"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/contacts/bulk": {
      "functionName": "post_outbound_contactlist_contacts_bulk",
      "signature": "post_outbound_contactlist_contacts_bulk(contact_list_id, body)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "list[DialerContact]"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/export": {
      "functionName": "post_outbound_contactlist_export",
      "signature": "post_outbound_contactlist_export(contact_list_id)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        }
      ],
      "return": "DomainEntityRef"
    },
    "POST /api/v2/outbound/contactlistfilters": {
      "functionName": "post_outbound_contactlistfilters",
      "signature": "post_outbound_contactlistfilters(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContactListFilter"
        }
      ],
      "return": "ContactListFilter"
    },
    "POST /api/v2/outbound/contactlistfilters/preview": {
      "functionName": "post_outbound_contactlistfilters_preview",
      "signature": "post_outbound_contactlistfilters_preview(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContactListFilter"
        }
      ],
      "return": "FilterPreviewResponse"
    },
    "POST /api/v2/outbound/contactlists": {
      "functionName": "post_outbound_contactlists",
      "signature": "post_outbound_contactlists(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContactList"
        }
      ],
      "return": "ContactList"
    },
    "POST /api/v2/outbound/conversations/{conversationId}/dnc": {
      "functionName": "post_outbound_conversation_dnc",
      "signature": "post_outbound_conversation_dnc(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/outbound/dnclists/{dncListId}/export": {
      "functionName": "post_outbound_dnclist_export",
      "signature": "post_outbound_dnclist_export(dnc_list_id)",
      "parameters": [
        {
          "name": "dnc_list_id",
          "type": "str"
        }
      ],
      "return": "DomainEntityRef"
    },
    "POST /api/v2/outbound/dnclists/{dncListId}/phonenumbers": {
      "functionName": "post_outbound_dnclist_phonenumbers",
      "signature": "post_outbound_dnclist_phonenumbers(dnc_list_id, body, expiration_date_time)",
      "parameters": [
        {
          "name": "dnc_list_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        },
        {
          "name": "expiration_date_time",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/outbound/dnclists": {
      "functionName": "post_outbound_dnclists",
      "signature": "post_outbound_dnclists(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DncListCreate"
        }
      ],
      "return": "DncList"
    },
    "POST /api/v2/outbound/messagingcampaigns": {
      "functionName": "post_outbound_messagingcampaigns",
      "signature": "post_outbound_messagingcampaigns(body)",
      "parameters": [
        {
          "name": "body",
          "type": "MessagingCampaign"
        }
      ],
      "return": "MessagingCampaign"
    },
    "POST /api/v2/outbound/messagingcampaigns/progress": {
      "functionName": "post_outbound_messagingcampaigns_progress",
      "signature": "post_outbound_messagingcampaigns_progress(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "list[CampaignProgress]"
    },
    "POST /api/v2/outbound/rulesets": {
      "functionName": "post_outbound_rulesets",
      "signature": "post_outbound_rulesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RuleSet"
        }
      ],
      "return": "RuleSet"
    },
    "POST /api/v2/outbound/sequences": {
      "functionName": "post_outbound_sequences",
      "signature": "post_outbound_sequences(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CampaignSequence"
        }
      ],
      "return": "CampaignSequence"
    },
    "PUT /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "functionName": "put_outbound_attemptlimit",
      "signature": "put_outbound_attemptlimit(attempt_limits_id, body)",
      "parameters": [
        {
          "name": "attempt_limits_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AttemptLimits"
        }
      ],
      "return": "AttemptLimits"
    },
    "PUT /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "functionName": "put_outbound_callabletimeset",
      "signature": "put_outbound_callabletimeset(callable_time_set_id, body)",
      "parameters": [
        {
          "name": "callable_time_set_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CallableTimeSet"
        }
      ],
      "return": "CallableTimeSet"
    },
    "PUT /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "functionName": "put_outbound_callanalysisresponseset",
      "signature": "put_outbound_callanalysisresponseset(call_analysis_set_id, body)",
      "parameters": [
        {
          "name": "call_analysis_set_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ResponseSet"
        }
      ],
      "return": "ResponseSet"
    },
    "PUT /api/v2/outbound/campaigns/{campaignId}": {
      "functionName": "put_outbound_campaign",
      "signature": "put_outbound_campaign(campaign_id, body)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Campaign"
        }
      ],
      "return": "Campaign"
    },
    "PUT /api/v2/outbound/campaigns/{campaignId}/agents/{userId}": {
      "functionName": "put_outbound_campaign_agent",
      "signature": "put_outbound_campaign_agent(campaign_id, user_id, body)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        },
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Agent"
        }
      ],
      "return": "str"
    },
    "PUT /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "functionName": "put_outbound_campaignrule",
      "signature": "put_outbound_campaignrule(campaign_rule_id, body)",
      "parameters": [
        {
          "name": "campaign_rule_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CampaignRule"
        }
      ],
      "return": "CampaignRule"
    },
    "PUT /api/v2/outbound/contactlists/{contactListId}": {
      "functionName": "put_outbound_contactlist",
      "signature": "put_outbound_contactlist(contact_list_id, body)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ContactList"
        }
      ],
      "return": "ContactList"
    },
    "PUT /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "functionName": "put_outbound_contactlist_contact",
      "signature": "put_outbound_contactlist_contact(contact_list_id, contact_id, body)",
      "parameters": [
        {
          "name": "contact_list_id",
          "type": "str"
        },
        {
          "name": "contact_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DialerContact"
        }
      ],
      "return": "DialerContact"
    },
    "PUT /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "functionName": "put_outbound_contactlistfilter",
      "signature": "put_outbound_contactlistfilter(contact_list_filter_id, body)",
      "parameters": [
        {
          "name": "contact_list_filter_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ContactListFilter"
        }
      ],
      "return": "ContactListFilter"
    },
    "PUT /api/v2/outbound/dnclists/{dncListId}": {
      "functionName": "put_outbound_dnclist",
      "signature": "put_outbound_dnclist(dnc_list_id, body)",
      "parameters": [
        {
          "name": "dnc_list_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DncList"
        }
      ],
      "return": "DncList"
    },
    "PUT /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "functionName": "put_outbound_messagingcampaign",
      "signature": "put_outbound_messagingcampaign(messaging_campaign_id, body)",
      "parameters": [
        {
          "name": "messaging_campaign_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MessagingCampaign"
        }
      ],
      "return": "MessagingCampaign"
    },
    "PUT /api/v2/outbound/rulesets/{ruleSetId}": {
      "functionName": "put_outbound_ruleset",
      "signature": "put_outbound_ruleset(rule_set_id, body)",
      "parameters": [
        {
          "name": "rule_set_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RuleSet"
        }
      ],
      "return": "RuleSet"
    },
    "PUT /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "functionName": "put_outbound_schedules_campaign",
      "signature": "put_outbound_schedules_campaign(campaign_id, body)",
      "parameters": [
        {
          "name": "campaign_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CampaignSchedule"
        }
      ],
      "return": "CampaignSchedule"
    },
    "PUT /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "functionName": "put_outbound_schedules_sequence",
      "signature": "put_outbound_schedules_sequence(sequence_id, body)",
      "parameters": [
        {
          "name": "sequence_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SequenceSchedule"
        }
      ],
      "return": "SequenceSchedule"
    },
    "PUT /api/v2/outbound/sequences/{sequenceId}": {
      "functionName": "put_outbound_sequence",
      "signature": "put_outbound_sequence(sequence_id, body)",
      "parameters": [
        {
          "name": "sequence_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CampaignSequence"
        }
      ],
      "return": "CampaignSequence"
    },
    "PUT /api/v2/outbound/wrapupcodemappings": {
      "functionName": "put_outbound_wrapupcodemappings",
      "signature": "put_outbound_wrapupcodemappings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WrapUpCodeMapping"
        }
      ],
      "return": "WrapUpCodeMapping"
    }
  },
  "presence": {
    "DELETE /api/v2/presencedefinitions/{presenceId}": {
      "functionName": "delete_presencedefinition",
      "signature": "delete_presencedefinition(presence_id)",
      "parameters": [
        {
          "name": "presence_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/presencedefinitions/{presenceId}": {
      "functionName": "get_presencedefinition",
      "signature": "get_presencedefinition(presence_id, locale_code)",
      "parameters": [
        {
          "name": "presence_id",
          "type": "str"
        },
        {
          "name": "locale_code",
          "type": "str"
        }
      ],
      "return": "OrganizationPresence"
    },
    "GET /api/v2/presencedefinitions": {
      "functionName": "get_presencedefinitions",
      "signature": "get_presencedefinitions(page_number, page_size, deleted, locale_code)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "deleted",
          "type": "str"
        },
        {
          "name": "locale_code",
          "type": "str"
        }
      ],
      "return": "OrganizationPresenceEntityListing"
    },
    "GET /api/v2/systempresences": {
      "functionName": "get_systempresences",
      "signature": "get_systempresences()",
      "return": "list[SystemPresence]"
    },
    "GET /api/v2/users/{userId}/presences/{sourceId}": {
      "functionName": "get_user_presence",
      "signature": "get_user_presence(user_id, source_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "source_id",
          "type": "str"
        }
      ],
      "return": "UserPresence"
    },
    "GET /api/v2/users/{userId}/presences/microsoftteams": {
      "functionName": "get_user_presences_microsoftteams",
      "signature": "get_user_presences_microsoftteams(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "PresenceExpand"
    },
    "GET /api/v2/users/{userId}/presences/purecloud": {
      "functionName": "get_user_presences_purecloud",
      "signature": "get_user_presences_purecloud(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "UserPresence"
    },
    "GET /api/v2/users/{userId}/presences/zoomphone": {
      "functionName": "get_user_presences_zoomphone",
      "signature": "get_user_presences_zoomphone(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "PresenceExpand"
    },
    "PATCH /api/v2/users/{userId}/presences/{sourceId}": {
      "functionName": "patch_user_presence",
      "signature": "patch_user_presence(user_id, source_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "source_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserPresence"
        }
      ],
      "return": "UserPresence"
    },
    "PATCH /api/v2/users/{userId}/presences/purecloud": {
      "functionName": "patch_user_presences_purecloud",
      "signature": "patch_user_presences_purecloud(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserPresence"
        }
      ],
      "return": "UserPresence"
    },
    "POST /api/v2/presencedefinitions": {
      "functionName": "post_presencedefinitions",
      "signature": "post_presencedefinitions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OrganizationPresence"
        }
      ],
      "return": "OrganizationPresence"
    },
    "PUT /api/v2/presencedefinitions/{presenceId}": {
      "functionName": "put_presencedefinition",
      "signature": "put_presencedefinition(presence_id, body)",
      "parameters": [
        {
          "name": "presence_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "OrganizationPresence"
        }
      ],
      "return": "OrganizationPresence"
    },
    "PUT /api/v2/users/presences/bulk": {
      "functionName": "put_users_presences_bulk",
      "signature": "put_users_presences_bulk(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[UserPresence]"
        }
      ],
      "return": "list[UserPresence]"
    }
  },
  "quality": {
    "DELETE /api/v2/quality/calibrations/{calibrationId}": {
      "functionName": "delete_quality_calibration",
      "signature": "delete_quality_calibration(calibration_id, calibrator_id)",
      "parameters": [
        {
          "name": "calibration_id",
          "type": "str"
        },
        {
          "name": "calibrator_id",
          "type": "str"
        }
      ],
      "return": "Calibration"
    },
    "DELETE /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "functionName": "delete_quality_conversation_evaluation",
      "signature": "delete_quality_conversation_evaluation(conversation_id, evaluation_id, expand)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "evaluation_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Evaluation"
    },
    "DELETE /api/v2/quality/forms/{formId}": {
      "functionName": "delete_quality_form",
      "signature": "delete_quality_form(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/quality/forms/evaluations/{formId}": {
      "functionName": "delete_quality_forms_evaluation",
      "signature": "delete_quality_forms_evaluation(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/quality/forms/surveys/{formId}": {
      "functionName": "delete_quality_forms_survey",
      "signature": "delete_quality_forms_survey(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/quality/agents/activity": {
      "functionName": "get_quality_agents_activity",
      "signature": "get_quality_agents_activity(page_size, page_number, sort_by, expand, next_page, previous_page, start_time, end_time, agent_user_id, evaluator_user_id, name, group)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "start_time",
          "type": "datetime"
        },
        {
          "name": "end_time",
          "type": "datetime"
        },
        {
          "name": "agent_user_id",
          "type": "list[str]"
        },
        {
          "name": "evaluator_user_id",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "group",
          "type": "str"
        }
      ],
      "return": "AgentActivityEntityListing"
    },
    "GET /api/v2/quality/calibrations/{calibrationId}": {
      "functionName": "get_quality_calibration",
      "signature": "get_quality_calibration(calibration_id, calibrator_id, conversation_id)",
      "parameters": [
        {
          "name": "calibration_id",
          "type": "str"
        },
        {
          "name": "calibrator_id",
          "type": "str"
        },
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "Calibration"
    },
    "GET /api/v2/quality/calibrations": {
      "functionName": "get_quality_calibrations",
      "signature": "get_quality_calibrations(calibrator_id, page_size, page_number, sort_by, expand, next_page, previous_page, conversation_id, start_time, end_time)",
      "parameters": [
        {
          "name": "calibrator_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "start_time",
          "type": "datetime"
        },
        {
          "name": "end_time",
          "type": "datetime"
        }
      ],
      "return": "CalibrationEntityListing"
    },
    "GET /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "functionName": "get_quality_conversation_evaluation",
      "signature": "get_quality_conversation_evaluation(conversation_id, evaluation_id, expand)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "evaluation_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Evaluation"
    },
    "GET /api/v2/quality/conversations/{conversationId}/surveys": {
      "functionName": "get_quality_conversation_surveys",
      "signature": "get_quality_conversation_surveys(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "list[Survey]"
    },
    "GET /api/v2/quality/conversations/audits/query/{transactionId}": {
      "functionName": "get_quality_conversations_audits_query_transaction_id",
      "signature": "get_quality_conversations_audits_query_transaction_id(transaction_id)",
      "parameters": [
        {
          "name": "transaction_id",
          "type": "str"
        }
      ],
      "return": "QualityAuditQueryExecutionStatusResponse"
    },
    "GET /api/v2/quality/conversations/audits/query/{transactionId}/results": {
      "functionName": "get_quality_conversations_audits_query_transaction_id_results",
      "signature": "get_quality_conversations_audits_query_transaction_id_results(transaction_id, cursor, page_size, expand)",
      "parameters": [
        {
          "name": "transaction_id",
          "type": "str"
        },
        {
          "name": "cursor",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "QualityAuditQueryExecutionResultsResponse"
    },
    "GET /api/v2/quality/evaluations/query": {
      "functionName": "get_quality_evaluations_query",
      "signature": "get_quality_evaluations_query(page_size, page_number, sort_by, expand, next_page, previous_page, conversation_id, agent_user_id, evaluator_user_id, queue_id, start_time, end_time, evaluation_state, is_released, agent_has_read, expand_answer_total_scores, maximum, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "agent_user_id",
          "type": "str"
        },
        {
          "name": "evaluator_user_id",
          "type": "str"
        },
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "start_time",
          "type": "str"
        },
        {
          "name": "end_time",
          "type": "str"
        },
        {
          "name": "evaluation_state",
          "type": "list[str]"
        },
        {
          "name": "is_released",
          "type": "bool"
        },
        {
          "name": "agent_has_read",
          "type": "bool"
        },
        {
          "name": "expand_answer_total_scores",
          "type": "bool"
        },
        {
          "name": "maximum",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "EvaluationEntityListing"
    },
    "GET /api/v2/quality/evaluators/activity": {
      "functionName": "get_quality_evaluators_activity",
      "signature": "get_quality_evaluators_activity(page_size, page_number, sort_by, expand, next_page, previous_page, start_time, end_time, name, permission, group)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "start_time",
          "type": "datetime"
        },
        {
          "name": "end_time",
          "type": "datetime"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "permission",
          "type": "list[str]"
        },
        {
          "name": "group",
          "type": "str"
        }
      ],
      "return": "EvaluatorActivityEntityListing"
    },
    "GET /api/v2/quality/forms/{formId}": {
      "functionName": "get_quality_form",
      "signature": "get_quality_form(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/forms/{formId}/versions": {
      "functionName": "get_quality_form_versions",
      "signature": "get_quality_form_versions(form_id, page_size, page_number)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms": {
      "functionName": "get_quality_forms",
      "signature": "get_quality_forms(page_size, page_number, sort_by, next_page, previous_page, expand, name, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations/{formId}": {
      "functionName": "get_quality_forms_evaluation",
      "signature": "get_quality_forms_evaluation(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/forms/evaluations/{formId}/versions": {
      "functionName": "get_quality_forms_evaluation_versions",
      "signature": "get_quality_forms_evaluation_versions(form_id, page_size, page_number, sort_order)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations": {
      "functionName": "get_quality_forms_evaluations",
      "signature": "get_quality_forms_evaluations(page_size, page_number, sort_by, next_page, previous_page, expand, name, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations/bulk/contexts": {
      "functionName": "get_quality_forms_evaluations_bulk_contexts",
      "signature": "get_quality_forms_evaluations_bulk_contexts(context_id)",
      "parameters": [
        {
          "name": "context_id",
          "type": "list[str]"
        }
      ],
      "return": "list[EvaluationForm]"
    },
    "GET /api/v2/quality/forms/surveys/{formId}": {
      "functionName": "get_quality_forms_survey",
      "signature": "get_quality_forms_survey(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ],
      "return": "SurveyForm"
    },
    "GET /api/v2/quality/forms/surveys/{formId}/versions": {
      "functionName": "get_quality_forms_survey_versions",
      "signature": "get_quality_forms_survey_versions(form_id, page_size, page_number)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys": {
      "functionName": "get_quality_forms_surveys",
      "signature": "get_quality_forms_surveys(page_size, page_number, sort_by, next_page, previous_page, expand, name, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys/bulk": {
      "functionName": "get_quality_forms_surveys_bulk",
      "signature": "get_quality_forms_surveys_bulk(id)",
      "parameters": [
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys/bulk/contexts": {
      "functionName": "get_quality_forms_surveys_bulk_contexts",
      "signature": "get_quality_forms_surveys_bulk_contexts(context_id, published)",
      "parameters": [
        {
          "name": "context_id",
          "type": "list[str]"
        },
        {
          "name": "published",
          "type": "bool"
        }
      ],
      "return": "list[SurveyForm]"
    },
    "GET /api/v2/quality/publishedforms/{formId}": {
      "functionName": "get_quality_publishedform",
      "signature": "get_quality_publishedform(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/publishedforms": {
      "functionName": "get_quality_publishedforms",
      "signature": "get_quality_publishedforms(page_size, page_number, name, only_latest_per_context)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "only_latest_per_context",
          "type": "bool"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/publishedforms/evaluations/{formId}": {
      "functionName": "get_quality_publishedforms_evaluation",
      "signature": "get_quality_publishedforms_evaluation(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/publishedforms/evaluations": {
      "functionName": "get_quality_publishedforms_evaluations",
      "signature": "get_quality_publishedforms_evaluations(page_size, page_number, name, only_latest_per_context)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "only_latest_per_context",
          "type": "bool"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/publishedforms/surveys/{formId}": {
      "functionName": "get_quality_publishedforms_survey",
      "signature": "get_quality_publishedforms_survey(form_id)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        }
      ],
      "return": "SurveyForm"
    },
    "GET /api/v2/quality/publishedforms/surveys": {
      "functionName": "get_quality_publishedforms_surveys",
      "signature": "get_quality_publishedforms_surveys(page_size, page_number, name, only_latest_enabled_per_context)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "only_latest_enabled_per_context",
          "type": "bool"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/surveys/{surveyId}": {
      "functionName": "get_quality_survey",
      "signature": "get_quality_survey(survey_id)",
      "parameters": [
        {
          "name": "survey_id",
          "type": "str"
        }
      ],
      "return": "Survey"
    },
    "GET /api/v2/quality/surveys/scorable": {
      "functionName": "get_quality_surveys_scorable",
      "signature": "get_quality_surveys_scorable(customer_survey_url)",
      "parameters": [
        {
          "name": "customer_survey_url",
          "type": "str"
        }
      ],
      "return": "ScorableSurvey"
    },
    "PATCH /api/v2/quality/forms/surveys/{formId}": {
      "functionName": "patch_quality_forms_survey",
      "signature": "patch_quality_forms_survey(form_id, body)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SurveyForm"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/analytics/evaluations/aggregates/query": {
      "functionName": "post_analytics_evaluations_aggregates_query",
      "signature": "post_analytics_evaluations_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationAggregationQuery"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/surveys/aggregates/query": {
      "functionName": "post_analytics_surveys_aggregates_query",
      "signature": "post_analytics_surveys_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SurveyAggregationQuery"
        }
      ],
      "return": "SurveyAggregateQueryResponse"
    },
    "POST /api/v2/quality/calibrations": {
      "functionName": "post_quality_calibrations",
      "signature": "post_quality_calibrations(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "CalibrationCreate"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Calibration"
    },
    "POST /api/v2/quality/conversations/{conversationId}/evaluations": {
      "functionName": "post_quality_conversation_evaluations",
      "signature": "post_quality_conversation_evaluations(conversation_id, body, expand)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Evaluation"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Evaluation"
    },
    "POST /api/v2/quality/conversations/audits/query": {
      "functionName": "post_quality_conversations_audits_query",
      "signature": "post_quality_conversations_audits_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "QMAuditQueryRequest"
        }
      ],
      "return": "QualityAuditQueryExecutionStatusResponse"
    },
    "POST /api/v2/quality/evaluations/aggregates/query/me": {
      "functionName": "post_quality_evaluations_aggregates_query_me",
      "signature": "post_quality_evaluations_aggregates_query_me(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationAggregationQueryMe"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/quality/evaluations/scoring": {
      "functionName": "post_quality_evaluations_scoring",
      "signature": "post_quality_evaluations_scoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationFormAndScoringSet"
        }
      ],
      "return": "EvaluationScoringSet"
    },
    "POST /api/v2/quality/forms": {
      "functionName": "post_quality_forms",
      "signature": "post_quality_forms(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/forms/evaluations": {
      "functionName": "post_quality_forms_evaluations",
      "signature": "post_quality_forms_evaluations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/forms/surveys": {
      "functionName": "post_quality_forms_surveys",
      "signature": "post_quality_forms_surveys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SurveyForm"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/quality/publishedforms": {
      "functionName": "post_quality_publishedforms",
      "signature": "post_quality_publishedforms(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PublishForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/publishedforms/evaluations": {
      "functionName": "post_quality_publishedforms_evaluations",
      "signature": "post_quality_publishedforms_evaluations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PublishForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/publishedforms/surveys": {
      "functionName": "post_quality_publishedforms_surveys",
      "signature": "post_quality_publishedforms_surveys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PublishForm"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/quality/surveys/scoring": {
      "functionName": "post_quality_surveys_scoring",
      "signature": "post_quality_surveys_scoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SurveyFormAndScoringSet"
        }
      ],
      "return": "SurveyScoringSet"
    },
    "PUT /api/v2/quality/calibrations/{calibrationId}": {
      "functionName": "put_quality_calibration",
      "signature": "put_quality_calibration(calibration_id, body)",
      "parameters": [
        {
          "name": "calibration_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Calibration"
        }
      ],
      "return": "Calibration"
    },
    "PUT /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "functionName": "put_quality_conversation_evaluation",
      "signature": "put_quality_conversation_evaluation(conversation_id, evaluation_id, body, expand)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "evaluation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Evaluation"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Evaluation"
    },
    "PUT /api/v2/quality/forms/{formId}": {
      "functionName": "put_quality_form",
      "signature": "put_quality_form(form_id, body)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EvaluationForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "PUT /api/v2/quality/forms/evaluations/{formId}": {
      "functionName": "put_quality_forms_evaluation",
      "signature": "put_quality_forms_evaluation(form_id, body)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EvaluationForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "PUT /api/v2/quality/forms/surveys/{formId}": {
      "functionName": "put_quality_forms_survey",
      "signature": "put_quality_forms_survey(form_id, body)",
      "parameters": [
        {
          "name": "form_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SurveyForm"
        }
      ],
      "return": "SurveyForm"
    },
    "PUT /api/v2/quality/surveys/scorable": {
      "functionName": "put_quality_surveys_scorable",
      "signature": "put_quality_surveys_scorable(body, customer_survey_url)",
      "parameters": [
        {
          "name": "body",
          "type": "ScorableSurvey"
        },
        {
          "name": "customer_survey_url",
          "type": "str"
        }
      ],
      "return": "ScorableSurvey"
    }
  },
  "recording": {
    "DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "functionName": "delete_conversation_recording_annotation",
      "signature": "delete_conversation_recording_annotation(conversation_id, recording_id, annotation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "annotation_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/orphanrecordings/{orphanId}": {
      "functionName": "delete_orphanrecording",
      "signature": "delete_orphanrecording(orphan_id)",
      "parameters": [
        {
          "name": "orphan_id",
          "type": "str"
        }
      ],
      "return": "OrphanRecording"
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "functionName": "delete_recording_crossplatform_mediaretentionpolicies",
      "signature": "delete_recording_crossplatform_mediaretentionpolicies(ids)",
      "parameters": [
        {
          "name": "ids",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "functionName": "delete_recording_crossplatform_mediaretentionpolicy",
      "signature": "delete_recording_crossplatform_mediaretentionpolicy(policy_id)",
      "parameters": [
        {
          "name": "policy_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/recording/jobs/{jobId}": {
      "functionName": "delete_recording_job",
      "signature": "delete_recording_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies": {
      "functionName": "delete_recording_mediaretentionpolicies",
      "signature": "delete_recording_mediaretentionpolicies(ids)",
      "parameters": [
        {
          "name": "ids",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "functionName": "delete_recording_mediaretentionpolicy",
      "signature": "delete_recording_mediaretentionpolicy(policy_id)",
      "parameters": [
        {
          "name": "policy_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
      "functionName": "get_conversation_recording",
      "signature": "get_conversation_recording(conversation_id, recording_id, format_id, email_format_id, chat_format_id, message_format_id, download, file_name, locale, media_formats)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "format_id",
          "type": "str"
        },
        {
          "name": "email_format_id",
          "type": "str"
        },
        {
          "name": "chat_format_id",
          "type": "str"
        },
        {
          "name": "message_format_id",
          "type": "str"
        },
        {
          "name": "download",
          "type": "bool"
        },
        {
          "name": "file_name",
          "type": "str"
        },
        {
          "name": "locale",
          "type": "str"
        },
        {
          "name": "media_formats",
          "type": "list[str]"
        }
      ],
      "return": "Recording"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "functionName": "get_conversation_recording_annotation",
      "signature": "get_conversation_recording_annotation(conversation_id, recording_id, annotation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "annotation_id",
          "type": "str"
        }
      ],
      "return": "Annotation"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
      "functionName": "get_conversation_recording_annotations",
      "signature": "get_conversation_recording_annotations(conversation_id, recording_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "recording_id",
          "type": "str"
        }
      ],
      "return": "list[Annotation]"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata": {
      "functionName": "get_conversation_recordingmetadata",
      "signature": "get_conversation_recordingmetadata(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "list[RecordingMetadata]"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata/{recordingId}": {
      "functionName": "get_conversation_recordingmetadata_recording_id",
      "signature": "get_conversation_recordingmetadata_recording_id(conversation_id, recording_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "recording_id",
          "type": "str"
        }
      ],
      "return": "RecordingMetadata"
    },
    "GET /api/v2/conversations/{conversationId}/recordings": {
      "functionName": "get_conversation_recordings",
      "signature": "get_conversation_recordings(conversation_id, max_wait_ms, format_id, media_formats)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "max_wait_ms",
          "type": "int"
        },
        {
          "name": "format_id",
          "type": "str"
        },
        {
          "name": "media_formats",
          "type": "list[str]"
        }
      ],
      "return": "list[Recording]"
    },
    "GET /api/v2/orphanrecordings/{orphanId}": {
      "functionName": "get_orphanrecording",
      "signature": "get_orphanrecording(orphan_id)",
      "parameters": [
        {
          "name": "orphan_id",
          "type": "str"
        }
      ],
      "return": "OrphanRecording"
    },
    "GET /api/v2/orphanrecordings/{orphanId}/media": {
      "functionName": "get_orphanrecording_media",
      "signature": "get_orphanrecording_media(orphan_id, format_id, email_format_id, chat_format_id, message_format_id, download, file_name, locale, media_formats)",
      "parameters": [
        {
          "name": "orphan_id",
          "type": "str"
        },
        {
          "name": "format_id",
          "type": "str"
        },
        {
          "name": "email_format_id",
          "type": "str"
        },
        {
          "name": "chat_format_id",
          "type": "str"
        },
        {
          "name": "message_format_id",
          "type": "str"
        },
        {
          "name": "download",
          "type": "bool"
        },
        {
          "name": "file_name",
          "type": "str"
        },
        {
          "name": "locale",
          "type": "str"
        },
        {
          "name": "media_formats",
          "type": "list[str]"
        }
      ],
      "return": "Recording"
    },
    "GET /api/v2/orphanrecordings": {
      "functionName": "get_orphanrecordings",
      "signature": "get_orphanrecordings(page_size, page_number, sort_by, expand, next_page, previous_page, has_conversation, media)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "has_conversation",
          "type": "bool"
        },
        {
          "name": "media",
          "type": "str"
        }
      ],
      "return": "OrphanRecordingListing"
    },
    "GET /api/v2/recording/batchrequests/{jobId}": {
      "functionName": "get_recording_batchrequest",
      "signature": "get_recording_batchrequest(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "BatchDownloadJobStatusResult"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "functionName": "get_recording_crossplatform_mediaretentionpolicies",
      "signature": "get_recording_crossplatform_mediaretentionpolicies(page_size, page_number, sort_by, expand, next_page, previous_page, name, enabled, summary, has_errors)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "enabled",
          "type": "bool"
        },
        {
          "name": "summary",
          "type": "bool"
        },
        {
          "name": "has_errors",
          "type": "bool"
        }
      ],
      "return": "PolicyEntityListing"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "functionName": "get_recording_crossplatform_mediaretentionpolicy",
      "signature": "get_recording_crossplatform_mediaretentionpolicy(policy_id)",
      "parameters": [
        {
          "name": "policy_id",
          "type": "str"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "GET /api/v2/recording/jobs/{jobId}": {
      "functionName": "get_recording_job",
      "signature": "get_recording_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "RecordingJob"
    },
    "GET /api/v2/recording/jobs/{jobId}/failedrecordings": {
      "functionName": "get_recording_job_failedrecordings",
      "signature": "get_recording_job_failedrecordings(job_id, page_size, page_number, include_total, cursor)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "include_total",
          "type": "bool"
        },
        {
          "name": "cursor",
          "type": "str"
        }
      ],
      "return": "FailedRecordingEntityListing"
    },
    "GET /api/v2/recording/jobs": {
      "functionName": "get_recording_jobs",
      "signature": "get_recording_jobs(page_size, page_number, sort_by, state, show_only_my_jobs, job_type, include_total, cursor)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "state",
          "type": "str"
        },
        {
          "name": "show_only_my_jobs",
          "type": "bool"
        },
        {
          "name": "job_type",
          "type": "str"
        },
        {
          "name": "include_total",
          "type": "bool"
        },
        {
          "name": "cursor",
          "type": "str"
        }
      ],
      "return": "RecordingJobEntityListing"
    },
    "GET /api/v2/recording/localkeys/settings/{settingsId}": {
      "functionName": "get_recording_localkeys_setting",
      "signature": "get_recording_localkeys_setting(settings_id)",
      "parameters": [
        {
          "name": "settings_id",
          "type": "str"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "GET /api/v2/recording/localkeys/settings": {
      "functionName": "get_recording_localkeys_settings",
      "signature": "get_recording_localkeys_settings()",
      "return": "LocalEncryptionConfigurationListing"
    },
    "GET /api/v2/recording/mediaretentionpolicies": {
      "functionName": "get_recording_mediaretentionpolicies",
      "signature": "get_recording_mediaretentionpolicies(page_size, page_number, sort_by, expand, next_page, previous_page, name, enabled, summary, has_errors)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "previous_page",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "enabled",
          "type": "bool"
        },
        {
          "name": "summary",
          "type": "bool"
        },
        {
          "name": "has_errors",
          "type": "bool"
        }
      ],
      "return": "PolicyEntityListing"
    },
    "GET /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "functionName": "get_recording_mediaretentionpolicy",
      "signature": "get_recording_mediaretentionpolicy(policy_id)",
      "parameters": [
        {
          "name": "policy_id",
          "type": "str"
        }
      ],
      "return": "Policy"
    },
    "GET /api/v2/recording/recordingkeys": {
      "functionName": "get_recording_recordingkeys",
      "signature": "get_recording_recordingkeys(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "EncryptionKeyEntityListing"
    },
    "GET /api/v2/recording/recordingkeys/rotationschedule": {
      "functionName": "get_recording_recordingkeys_rotationschedule",
      "signature": "get_recording_recordingkeys_rotationschedule()",
      "return": "KeyRotationSchedule"
    },
    "GET /api/v2/recording/settings": {
      "functionName": "get_recording_settings",
      "signature": "get_recording_settings(create_default)",
      "parameters": [
        {
          "name": "create_default",
          "type": "bool"
        }
      ],
      "return": "RecordingSettings"
    },
    "GET /api/v2/recordings/screensessions": {
      "functionName": "get_recordings_screensessions",
      "signature": "get_recordings_screensessions(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "ScreenRecordingSessionListing"
    },
    "PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "functionName": "patch_recording_crossplatform_mediaretentionpolicy",
      "signature": "patch_recording_crossplatform_mediaretentionpolicy(policy_id, body)",
      "parameters": [
        {
          "name": "policy_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CrossPlatformPolicyUpdate"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "PATCH /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "functionName": "patch_recording_mediaretentionpolicy",
      "signature": "patch_recording_mediaretentionpolicy(policy_id, body)",
      "parameters": [
        {
          "name": "policy_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PolicyUpdate"
        }
      ],
      "return": "Policy"
    },
    "PATCH /api/v2/recordings/screensessions/{recordingSessionId}": {
      "functionName": "patch_recordings_screensession",
      "signature": "patch_recordings_screensession(recording_session_id, body)",
      "parameters": [
        {
          "name": "recording_session_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScreenRecordingSessionRequest"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
      "functionName": "post_conversation_recording_annotations",
      "signature": "post_conversation_recording_annotations(conversation_id, recording_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Annotation"
        }
      ],
      "return": "Annotation"
    },
    "POST /api/v2/recording/batchrequests": {
      "functionName": "post_recording_batchrequests",
      "signature": "post_recording_batchrequests(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BatchDownloadJobSubmission"
        }
      ],
      "return": "BatchDownloadJobSubmissionResult"
    },
    "POST /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "functionName": "post_recording_crossplatform_mediaretentionpolicies",
      "signature": "post_recording_crossplatform_mediaretentionpolicies(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CrossPlatformPolicyCreate"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "POST /api/v2/recording/jobs": {
      "functionName": "post_recording_jobs",
      "signature": "post_recording_jobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RecordingJobsQuery"
        }
      ],
      "return": "RecordingJob"
    },
    "POST /api/v2/recording/localkeys": {
      "functionName": "post_recording_localkeys",
      "signature": "post_recording_localkeys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocalEncryptionKeyRequest"
        }
      ],
      "return": "EncryptionKey"
    },
    "POST /api/v2/recording/localkeys/settings": {
      "functionName": "post_recording_localkeys_settings",
      "signature": "post_recording_localkeys_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocalEncryptionConfiguration"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "POST /api/v2/recording/mediaretentionpolicies": {
      "functionName": "post_recording_mediaretentionpolicies",
      "signature": "post_recording_mediaretentionpolicies(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PolicyCreate"
        }
      ],
      "return": "Policy"
    },
    "POST /api/v2/recording/recordingkeys": {
      "functionName": "post_recording_recordingkeys",
      "signature": "post_recording_recordingkeys()",
      "return": "EncryptionKey"
    },
    "POST /api/v2/recordings/deletionprotection": {
      "functionName": "post_recordings_deletionprotection",
      "signature": "post_recordings_deletionprotection(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationDeletionProtectionQuery"
        }
      ],
      "return": "list[AddressableEntityRef]"
    },
    "POST /api/v2/recordings/screensessions/acknowledge": {
      "functionName": "post_recordings_screensessions_acknowledge",
      "signature": "post_recordings_screensessions_acknowledge(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AcknowledgeScreenRecordingRequest"
        }
      ]
    },
    "POST /api/v2/recordings/screensessions/metadata": {
      "functionName": "post_recordings_screensessions_metadata",
      "signature": "post_recordings_screensessions_metadata(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ScreenRecordingMetaDataRequest"
        }
      ]
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
      "functionName": "put_conversation_recording",
      "signature": "put_conversation_recording(conversation_id, recording_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Recording"
        }
      ],
      "return": "Recording"
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "functionName": "put_conversation_recording_annotation",
      "signature": "put_conversation_recording_annotation(conversation_id, recording_id, annotation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "annotation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Annotation"
        }
      ],
      "return": "Annotation"
    },
    "PUT /api/v2/orphanrecordings/{orphanId}": {
      "functionName": "put_orphanrecording",
      "signature": "put_orphanrecording(orphan_id, body)",
      "parameters": [
        {
          "name": "orphan_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "OrphanUpdateRequest"
        }
      ],
      "return": "Recording"
    },
    "PUT /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "functionName": "put_recording_crossplatform_mediaretentionpolicy",
      "signature": "put_recording_crossplatform_mediaretentionpolicy(policy_id, body)",
      "parameters": [
        {
          "name": "policy_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CrossPlatformPolicy"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "PUT /api/v2/recording/jobs/{jobId}": {
      "functionName": "put_recording_job",
      "signature": "put_recording_job(job_id, body)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ExecuteRecordingJobsQuery"
        }
      ],
      "return": "RecordingJob"
    },
    "PUT /api/v2/recording/localkeys/settings/{settingsId}": {
      "functionName": "put_recording_localkeys_setting",
      "signature": "put_recording_localkeys_setting(settings_id, body)",
      "parameters": [
        {
          "name": "settings_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "LocalEncryptionConfiguration"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "PUT /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "functionName": "put_recording_mediaretentionpolicy",
      "signature": "put_recording_mediaretentionpolicy(policy_id, body)",
      "parameters": [
        {
          "name": "policy_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Policy"
        }
      ],
      "return": "Policy"
    },
    "PUT /api/v2/recording/recordingkeys/rotationschedule": {
      "functionName": "put_recording_recordingkeys_rotationschedule",
      "signature": "put_recording_recordingkeys_rotationschedule(body)",
      "parameters": [
        {
          "name": "body",
          "type": "KeyRotationSchedule"
        }
      ],
      "return": "KeyRotationSchedule"
    },
    "PUT /api/v2/recording/settings": {
      "functionName": "put_recording_settings",
      "signature": "put_recording_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RecordingSettings"
        }
      ],
      "return": "RecordingSettings"
    },
    "PUT /api/v2/recordings/deletionprotection": {
      "functionName": "put_recordings_deletionprotection",
      "signature": "put_recordings_deletionprotection(protect, body)",
      "parameters": [
        {
          "name": "protect",
          "type": "bool"
        },
        {
          "name": "body",
          "type": "ConversationDeletionProtectionQuery"
        }
      ]
    }
  },
  "responsemanagement": {
    "DELETE /api/v2/responsemanagement/libraries/{libraryId}": {
      "functionName": "delete_responsemanagement_library",
      "signature": "delete_responsemanagement_library(library_id)",
      "parameters": [
        {
          "name": "library_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/responsemanagement/responses/{responseId}": {
      "functionName": "delete_responsemanagement_response",
      "signature": "delete_responsemanagement_response(response_id)",
      "parameters": [
        {
          "name": "response_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/responsemanagement/libraries": {
      "functionName": "get_responsemanagement_libraries",
      "signature": "get_responsemanagement_libraries(page_number, page_size, messaging_template_filter)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "messaging_template_filter",
          "type": "str"
        }
      ],
      "return": "LibraryEntityListing"
    },
    "GET /api/v2/responsemanagement/libraries/{libraryId}": {
      "functionName": "get_responsemanagement_library",
      "signature": "get_responsemanagement_library(library_id)",
      "parameters": [
        {
          "name": "library_id",
          "type": "str"
        }
      ],
      "return": "Library"
    },
    "GET /api/v2/responsemanagement/responses/{responseId}": {
      "functionName": "get_responsemanagement_response",
      "signature": "get_responsemanagement_response(response_id, expand)",
      "parameters": [
        {
          "name": "response_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Response"
    },
    "GET /api/v2/responsemanagement/responses": {
      "functionName": "get_responsemanagement_responses",
      "signature": "get_responsemanagement_responses(library_id, page_number, page_size, expand)",
      "parameters": [
        {
          "name": "library_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "ResponseEntityListing"
    },
    "POST /api/v2/responsemanagement/libraries": {
      "functionName": "post_responsemanagement_libraries",
      "signature": "post_responsemanagement_libraries(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Library"
        }
      ],
      "return": "Library"
    },
    "POST /api/v2/responsemanagement/responses": {
      "functionName": "post_responsemanagement_responses",
      "signature": "post_responsemanagement_responses(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "Response"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Response"
    },
    "POST /api/v2/responsemanagement/responses/query": {
      "functionName": "post_responsemanagement_responses_query",
      "signature": "post_responsemanagement_responses_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ResponseQueryRequest"
        }
      ],
      "return": "ResponseQueryResults"
    },
    "PUT /api/v2/responsemanagement/libraries/{libraryId}": {
      "functionName": "put_responsemanagement_library",
      "signature": "put_responsemanagement_library(library_id, body)",
      "parameters": [
        {
          "name": "library_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Library"
        }
      ],
      "return": "Library"
    },
    "PUT /api/v2/responsemanagement/responses/{responseId}": {
      "functionName": "put_responsemanagement_response",
      "signature": "put_responsemanagement_response(response_id, body, expand)",
      "parameters": [
        {
          "name": "response_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Response"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "Response"
    }
  },
  "routing": {
    "DELETE /api/v2/routing/assessments/{assessmentId}": {
      "functionName": "delete_routing_assessment",
      "signature": "delete_routing_assessment(assessment_id)",
      "parameters": [
        {
          "name": "assessment_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/email/domains/{domainId}": {
      "functionName": "delete_routing_email_domain",
      "signature": "delete_routing_email_domain(domain_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "functionName": "delete_routing_email_domain_route",
      "signature": "delete_routing_email_domain_route(domain_name, route_id)",
      "parameters": [
        {
          "name": "domain_name",
          "type": "str"
        },
        {
          "name": "route_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/predictors/{predictorId}": {
      "functionName": "delete_routing_predictor",
      "signature": "delete_routing_predictor(predictor_id)",
      "parameters": [
        {
          "name": "predictor_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}": {
      "functionName": "delete_routing_queue",
      "signature": "delete_routing_queue(queue_id, force_delete)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "force_delete",
          "type": "bool"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/members/{memberId}": {
      "functionName": "delete_routing_queue_member",
      "signature": "delete_routing_queue_member(queue_id, member_id)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/users/{memberId}": {
      "functionName": "delete_routing_queue_user",
      "signature": "delete_routing_queue_user(queue_id, member_id)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}": {
      "functionName": "delete_routing_queue_wrapupcode",
      "signature": "delete_routing_queue_wrapupcode(queue_id, code_id)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "code_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/settings": {
      "functionName": "delete_routing_settings",
      "signature": "delete_routing_settings()"
    },
    "DELETE /api/v2/routing/skills/{skillId}": {
      "functionName": "delete_routing_skill",
      "signature": "delete_routing_skill(skill_id)",
      "parameters": [
        {
          "name": "skill_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/sms/addresses/{addressId}": {
      "functionName": "delete_routing_sms_address",
      "signature": "delete_routing_sms_address(address_id)",
      "parameters": [
        {
          "name": "address_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/sms/phonenumbers/{addressId}": {
      "functionName": "delete_routing_sms_phonenumber",
      "signature": "delete_routing_sms_phonenumber(address_id, async)",
      "parameters": [
        {
          "name": "address_id",
          "type": "str"
        },
        {
          "name": "async",
          "type": "bool"
        }
      ]
    },
    "DELETE /api/v2/routing/users/{userId}/utilization": {
      "functionName": "delete_routing_user_utilization",
      "signature": "delete_routing_user_utilization(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/utilization": {
      "functionName": "delete_routing_utilization",
      "signature": "delete_routing_utilization()"
    },
    "DELETE /api/v2/routing/wrapupcodes/{codeId}": {
      "functionName": "delete_routing_wrapupcode",
      "signature": "delete_routing_wrapupcode(code_id)",
      "parameters": [
        {
          "name": "code_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "functionName": "delete_user_routinglanguage",
      "signature": "delete_user_routinglanguage(user_id, language_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "language_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routingskills/{skillId}": {
      "functionName": "delete_user_routingskill",
      "signature": "delete_user_routingskill(user_id, skill_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "skill_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/routing/assessments/{assessmentId}": {
      "functionName": "get_routing_assessment",
      "signature": "get_routing_assessment(assessment_id)",
      "parameters": [
        {
          "name": "assessment_id",
          "type": "str"
        }
      ],
      "return": "BenefitAssessment"
    },
    "GET /api/v2/routing/assessments": {
      "functionName": "get_routing_assessments",
      "signature": "get_routing_assessments(before, after, limit, page_size, queue_id)",
      "parameters": [
        {
          "name": "before",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "limit",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "str"
        },
        {
          "name": "queue_id",
          "type": "list[str]"
        }
      ],
      "return": "AssessmentListing"
    },
    "GET /api/v2/routing/assessments/jobs/{jobId}": {
      "functionName": "get_routing_assessments_job",
      "signature": "get_routing_assessments_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "BenefitAssessmentJob"
    },
    "GET /api/v2/routing/assessments/jobs": {
      "functionName": "get_routing_assessments_jobs",
      "signature": "get_routing_assessments_jobs(division_id)",
      "parameters": [
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "AssessmentJobListing"
    },
    "GET /api/v2/routing/email/domains/{domainId}": {
      "functionName": "get_routing_email_domain",
      "signature": "get_routing_email_domain(domain_id)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        }
      ],
      "return": "InboundDomain"
    },
    "GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "functionName": "get_routing_email_domain_route",
      "signature": "get_routing_email_domain_route(domain_name, route_id)",
      "parameters": [
        {
          "name": "domain_name",
          "type": "str"
        },
        {
          "name": "route_id",
          "type": "str"
        }
      ],
      "return": "InboundRoute"
    },
    "GET /api/v2/routing/email/domains/{domainName}/routes": {
      "functionName": "get_routing_email_domain_routes",
      "signature": "get_routing_email_domain_routes(domain_name, page_size, page_number, pattern)",
      "parameters": [
        {
          "name": "domain_name",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "pattern",
          "type": "str"
        }
      ],
      "return": "InboundRouteEntityListing"
    },
    "GET /api/v2/routing/email/domains": {
      "functionName": "get_routing_email_domains",
      "signature": "get_routing_email_domains()",
      "return": "InboundDomainEntityListing"
    },
    "GET /api/v2/routing/email/setup": {
      "functionName": "get_routing_email_setup",
      "signature": "get_routing_email_setup()",
      "return": "EmailSetup"
    },
    "GET /api/v2/routing/languages": {
      "functionName": "get_routing_languages",
      "signature": "get_routing_languages(page_size, page_number, sort_order, name, id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "LanguageEntityListing"
    },
    "GET /api/v2/routing/message/recipients/{recipientId}": {
      "functionName": "get_routing_message_recipient",
      "signature": "get_routing_message_recipient(recipient_id)",
      "parameters": [
        {
          "name": "recipient_id",
          "type": "str"
        }
      ],
      "return": "Recipient"
    },
    "GET /api/v2/routing/message/recipients": {
      "functionName": "get_routing_message_recipients",
      "signature": "get_routing_message_recipients(messenger_type, page_size, page_number)",
      "parameters": [
        {
          "name": "messenger_type",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "RecipientListing"
    },
    "GET /api/v2/routing/predictors/{predictorId}": {
      "functionName": "get_routing_predictor",
      "signature": "get_routing_predictor(predictor_id)",
      "parameters": [
        {
          "name": "predictor_id",
          "type": "str"
        }
      ],
      "return": "Predictor"
    },
    "GET /api/v2/routing/predictors": {
      "functionName": "get_routing_predictors",
      "signature": "get_routing_predictors(before, after, limit, page_size, queue_id)",
      "parameters": [
        {
          "name": "before",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "limit",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "str"
        },
        {
          "name": "queue_id",
          "type": "list[str]"
        }
      ],
      "return": "PredictorListing"
    },
    "GET /api/v2/routing/predictors/keyperformanceindicators": {
      "functionName": "get_routing_predictors_keyperformanceindicators",
      "signature": "get_routing_predictors_keyperformanceindicators()",
      "return": "list[KeyPerformanceIndicator]"
    },
    "GET /api/v2/routing/queues/{queueId}": {
      "functionName": "get_routing_queue",
      "signature": "get_routing_queue(queue_id)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        }
      ],
      "return": "Queue"
    },
    "GET /api/v2/routing/queues/{queueId}/comparisonperiods/{comparisonPeriodId}": {
      "functionName": "get_routing_queue_comparisonperiod",
      "signature": "get_routing_queue_comparisonperiod(queue_id, comparison_period_id)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "comparison_period_id",
          "type": "str"
        }
      ],
      "return": "ComparisonPeriod"
    },
    "GET /api/v2/routing/queues/{queueId}/comparisonperiods": {
      "functionName": "get_routing_queue_comparisonperiods",
      "signature": "get_routing_queue_comparisonperiods(queue_id)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        }
      ],
      "return": "ComparisonPeriodListing"
    },
    "GET /api/v2/routing/queues/{queueId}/estimatedwaittime": {
      "functionName": "get_routing_queue_estimatedwaittime",
      "signature": "get_routing_queue_estimatedwaittime(queue_id, conversation_id)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "EstimatedWaitTimePredictions"
    },
    "GET /api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime": {
      "functionName": "get_routing_queue_mediatype_estimatedwaittime",
      "signature": "get_routing_queue_mediatype_estimatedwaittime(queue_id, media_type)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "media_type",
          "type": "str"
        }
      ],
      "return": "EstimatedWaitTimePredictions"
    },
    "GET /api/v2/routing/queues/{queueId}/members": {
      "functionName": "get_routing_queue_members",
      "signature": "get_routing_queue_members(queue_id, page_number, page_size, sort_order, expand, name, profile_skills, skills, languages, routing_status, presence, member_by, joined)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "profile_skills",
          "type": "list[str]"
        },
        {
          "name": "skills",
          "type": "list[str]"
        },
        {
          "name": "languages",
          "type": "list[str]"
        },
        {
          "name": "routing_status",
          "type": "list[str]"
        },
        {
          "name": "presence",
          "type": "list[str]"
        },
        {
          "name": "member_by",
          "type": "str"
        },
        {
          "name": "joined",
          "type": "bool"
        }
      ],
      "return": "QueueMemberEntityListing"
    },
    "GET /api/v2/routing/queues/{queueId}/users": {
      "functionName": "get_routing_queue_users",
      "signature": "get_routing_queue_users(queue_id, page_number, page_size, sort_order, expand, joined, name, profile_skills, skills, languages, routing_status, presence)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "joined",
          "type": "bool"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "profile_skills",
          "type": "list[str]"
        },
        {
          "name": "skills",
          "type": "list[str]"
        },
        {
          "name": "languages",
          "type": "list[str]"
        },
        {
          "name": "routing_status",
          "type": "list[str]"
        },
        {
          "name": "presence",
          "type": "list[str]"
        }
      ],
      "return": "QueueMemberEntityListingV1"
    },
    "GET /api/v2/routing/queues/{queueId}/wrapupcodes": {
      "functionName": "get_routing_queue_wrapupcodes",
      "signature": "get_routing_queue_wrapupcodes(queue_id, page_size, page_number)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "WrapupCodeEntityListing"
    },
    "GET /api/v2/routing/queues": {
      "functionName": "get_routing_queues",
      "signature": "get_routing_queues(page_number, page_size, sort_order, name, id, division_id)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/divisionviews": {
      "functionName": "get_routing_queues_divisionviews",
      "signature": "get_routing_queues_divisionviews(page_size, page_number, sort_by, sort_order, name, id, division_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/divisionviews/all": {
      "functionName": "get_routing_queues_divisionviews_all",
      "signature": "get_routing_queues_divisionviews_all(page_size, page_number, sort_order)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/me": {
      "functionName": "get_routing_queues_me",
      "signature": "get_routing_queues_me(page_number, page_size, joined, sort_order)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "joined",
          "type": "bool"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/routing/settings": {
      "functionName": "get_routing_settings",
      "signature": "get_routing_settings()",
      "return": "RoutingSettings"
    },
    "GET /api/v2/routing/settings/contactcenter": {
      "functionName": "get_routing_settings_contactcenter",
      "signature": "get_routing_settings_contactcenter()",
      "return": "ContactCenterSettings"
    },
    "GET /api/v2/routing/settings/transcription": {
      "functionName": "get_routing_settings_transcription",
      "signature": "get_routing_settings_transcription()",
      "return": "TranscriptionSettings"
    },
    "GET /api/v2/routing/skills/{skillId}": {
      "functionName": "get_routing_skill",
      "signature": "get_routing_skill(skill_id)",
      "parameters": [
        {
          "name": "skill_id",
          "type": "str"
        }
      ],
      "return": "RoutingSkill"
    },
    "GET /api/v2/routing/skills": {
      "functionName": "get_routing_skills",
      "signature": "get_routing_skills(page_size, page_number, name, id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "SkillEntityListing"
    },
    "GET /api/v2/routing/sms/addresses/{addressId}": {
      "functionName": "get_routing_sms_address",
      "signature": "get_routing_sms_address(address_id)",
      "parameters": [
        {
          "name": "address_id",
          "type": "str"
        }
      ],
      "return": "SmsAddress"
    },
    "GET /api/v2/routing/sms/addresses": {
      "functionName": "get_routing_sms_addresses",
      "signature": "get_routing_sms_addresses(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "SmsAddressEntityListing"
    },
    "GET /api/v2/routing/sms/availablephonenumbers": {
      "functionName": "get_routing_sms_availablephonenumbers",
      "signature": "get_routing_sms_availablephonenumbers(country_code, phone_number_type, region, city, area_code, pattern, address_requirement)",
      "parameters": [
        {
          "name": "country_code",
          "type": "str"
        },
        {
          "name": "phone_number_type",
          "type": "str"
        },
        {
          "name": "region",
          "type": "str"
        },
        {
          "name": "city",
          "type": "str"
        },
        {
          "name": "area_code",
          "type": "str"
        },
        {
          "name": "pattern",
          "type": "str"
        },
        {
          "name": "address_requirement",
          "type": "str"
        }
      ],
      "return": "SMSAvailablePhoneNumberEntityListing"
    },
    "GET /api/v2/routing/sms/phonenumbers/{addressId}": {
      "functionName": "get_routing_sms_phonenumber",
      "signature": "get_routing_sms_phonenumber(address_id)",
      "parameters": [
        {
          "name": "address_id",
          "type": "str"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "GET /api/v2/routing/sms/phonenumbers": {
      "functionName": "get_routing_sms_phonenumbers",
      "signature": "get_routing_sms_phonenumbers(phone_number, phone_number_type, phone_number_status, country_code, page_size, page_number, sort_by, sort_order, language)",
      "parameters": [
        {
          "name": "phone_number",
          "type": "str"
        },
        {
          "name": "phone_number_type",
          "type": "list[str]"
        },
        {
          "name": "phone_number_status",
          "type": "list[str]"
        },
        {
          "name": "country_code",
          "type": "list[str]"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "language",
          "type": "str"
        }
      ],
      "return": "SmsPhoneNumberEntityListing"
    },
    "GET /api/v2/routing/users/{userId}/utilization": {
      "functionName": "get_routing_user_utilization",
      "signature": "get_routing_user_utilization(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "GET /api/v2/routing/utilization": {
      "functionName": "get_routing_utilization",
      "signature": "get_routing_utilization()",
      "return": "Utilization"
    },
    "GET /api/v2/routing/wrapupcodes/{codeId}": {
      "functionName": "get_routing_wrapupcode",
      "signature": "get_routing_wrapupcode(code_id)",
      "parameters": [
        {
          "name": "code_id",
          "type": "str"
        }
      ],
      "return": "WrapupCode"
    },
    "GET /api/v2/routing/wrapupcodes": {
      "functionName": "get_routing_wrapupcodes",
      "signature": "get_routing_wrapupcodes(page_size, page_number, sort_by, sort_order, name)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "WrapupCodeEntityListing"
    },
    "GET /api/v2/users/{userId}/queues": {
      "functionName": "get_user_queues",
      "signature": "get_user_queues(user_id, page_size, page_number, joined, division_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "joined",
          "type": "bool"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/users/{userId}/routinglanguages": {
      "functionName": "get_user_routinglanguages",
      "signature": "get_user_routinglanguages(user_id, page_size, page_number, sort_order)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "GET /api/v2/users/{userId}/routingskills": {
      "functionName": "get_user_routingskills",
      "signature": "get_user_routingskills(user_id, page_size, page_number, sort_order)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PATCH /api/v2/routing/conversations/{conversationId}": {
      "functionName": "patch_routing_conversation",
      "signature": "patch_routing_conversation(conversation_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoutingConversationAttributesRequest"
        }
      ],
      "return": "RoutingConversationAttributesResponse"
    },
    "PATCH /api/v2/routing/email/domains/{domainId}": {
      "functionName": "patch_routing_email_domain",
      "signature": "patch_routing_email_domain(domain_id, body)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "InboundDomainPatchRequest"
        }
      ],
      "return": "InboundDomain"
    },
    "PATCH /api/v2/routing/email/domains/{domainId}/validate": {
      "functionName": "patch_routing_email_domain_validate",
      "signature": "patch_routing_email_domain_validate(domain_id, body)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "InboundDomainPatchRequest"
        }
      ],
      "return": "InboundDomain"
    },
    "PATCH /api/v2/routing/predictors/{predictorId}": {
      "functionName": "patch_routing_predictor",
      "signature": "patch_routing_predictor(predictor_id, body)",
      "parameters": [
        {
          "name": "predictor_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PatchPredictorRequest"
        }
      ],
      "return": "Predictor"
    },
    "PATCH /api/v2/routing/queues/{queueId}/members/{memberId}": {
      "functionName": "patch_routing_queue_member",
      "signature": "patch_routing_queue_member(queue_id, member_id, body)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "QueueMember"
        }
      ]
    },
    "PATCH /api/v2/routing/queues/{queueId}/members": {
      "functionName": "patch_routing_queue_members",
      "signature": "patch_routing_queue_members(queue_id, body)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[QueueMember]"
        }
      ],
      "return": "QueueMemberEntityListing"
    },
    "PATCH /api/v2/routing/queues/{queueId}/users/{memberId}": {
      "functionName": "patch_routing_queue_user",
      "signature": "patch_routing_queue_user(queue_id, member_id, body)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "QueueMember"
        }
      ]
    },
    "PATCH /api/v2/routing/queues/{queueId}/users": {
      "functionName": "patch_routing_queue_users",
      "signature": "patch_routing_queue_users(queue_id, body)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[QueueMember]"
        }
      ],
      "return": "QueueMemberEntityListingV1"
    },
    "PATCH /api/v2/routing/settings/contactcenter": {
      "functionName": "patch_routing_settings_contactcenter",
      "signature": "patch_routing_settings_contactcenter(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContactCenterSettings"
        }
      ]
    },
    "PATCH /api/v2/users/{userId}/queues/{queueId}": {
      "functionName": "patch_user_queue",
      "signature": "patch_user_queue(queue_id, user_id, body)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserQueue"
        }
      ],
      "return": "UserQueue"
    },
    "PATCH /api/v2/users/{userId}/queues": {
      "functionName": "patch_user_queues",
      "signature": "patch_user_queues(user_id, body, division_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[UserQueue]"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "functionName": "patch_user_routinglanguage",
      "signature": "patch_user_routinglanguage(user_id, language_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "language_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRoutingLanguage"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/bulk": {
      "functionName": "patch_user_routinglanguages_bulk",
      "signature": "patch_user_routinglanguages_bulk(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[UserRoutingLanguagePost]"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routingskills/bulk": {
      "functionName": "patch_user_routingskills_bulk",
      "signature": "patch_user_routingskills_bulk(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[UserRoutingSkillPost]"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "POST /api/v2/analytics/queues/observations/query": {
      "functionName": "post_analytics_queues_observations_query",
      "signature": "post_analytics_queues_observations_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "QueueObservationQuery"
        }
      ],
      "return": "QueueObservationQueryResponse"
    },
    "POST /api/v2/routing/assessments": {
      "functionName": "post_routing_assessments",
      "signature": "post_routing_assessments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateBenefitAssessmentRequest"
        }
      ],
      "return": "BenefitAssessment"
    },
    "POST /api/v2/routing/assessments/jobs": {
      "functionName": "post_routing_assessments_jobs",
      "signature": "post_routing_assessments_jobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateBenefitAssessmentJobRequest"
        }
      ],
      "return": "BenefitAssessmentJob"
    },
    "POST /api/v2/routing/email/domains/{domainName}/routes": {
      "functionName": "post_routing_email_domain_routes",
      "signature": "post_routing_email_domain_routes(domain_name, body)",
      "parameters": [
        {
          "name": "domain_name",
          "type": "str"
        },
        {
          "name": "body",
          "type": "InboundRoute"
        }
      ],
      "return": "InboundRoute"
    },
    "POST /api/v2/routing/email/domains/{domainId}/testconnection": {
      "functionName": "post_routing_email_domain_testconnection",
      "signature": "post_routing_email_domain_testconnection(domain_id, body)",
      "parameters": [
        {
          "name": "domain_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TestMessage"
        }
      ],
      "return": "TestMessage"
    },
    "POST /api/v2/routing/email/domains": {
      "functionName": "post_routing_email_domains",
      "signature": "post_routing_email_domains(body)",
      "parameters": [
        {
          "name": "body",
          "type": "InboundDomain"
        }
      ],
      "return": "InboundDomain"
    },
    "POST /api/v2/routing/languages": {
      "functionName": "post_routing_languages",
      "signature": "post_routing_languages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Language"
        }
      ],
      "return": "Language"
    },
    "POST /api/v2/routing/predictors": {
      "functionName": "post_routing_predictors",
      "signature": "post_routing_predictors(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreatePredictorRequest"
        }
      ],
      "return": "Predictor"
    },
    "POST /api/v2/routing/queues/{queueId}/members": {
      "functionName": "post_routing_queue_members",
      "signature": "post_routing_queue_members(queue_id, body, delete)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[WritableEntity]"
        },
        {
          "name": "delete",
          "type": "bool"
        }
      ]
    },
    "POST /api/v2/routing/queues/{queueId}/users": {
      "functionName": "post_routing_queue_users",
      "signature": "post_routing_queue_users(queue_id, body, delete)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[WritableEntity]"
        },
        {
          "name": "delete",
          "type": "bool"
        }
      ]
    },
    "POST /api/v2/routing/queues/{queueId}/wrapupcodes": {
      "functionName": "post_routing_queue_wrapupcodes",
      "signature": "post_routing_queue_wrapupcodes(queue_id, body)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[WrapUpCodeReference]"
        }
      ],
      "return": "list[WrapupCode]"
    },
    "POST /api/v2/routing/queues": {
      "functionName": "post_routing_queues",
      "signature": "post_routing_queues(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateQueueRequest"
        }
      ],
      "return": "Queue"
    },
    "POST /api/v2/routing/skills": {
      "functionName": "post_routing_skills",
      "signature": "post_routing_skills(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RoutingSkill"
        }
      ],
      "return": "RoutingSkill"
    },
    "POST /api/v2/routing/sms/addresses": {
      "functionName": "post_routing_sms_addresses",
      "signature": "post_routing_sms_addresses(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SmsAddressProvision"
        }
      ],
      "return": "SmsAddress"
    },
    "POST /api/v2/routing/sms/phonenumbers": {
      "functionName": "post_routing_sms_phonenumbers",
      "signature": "post_routing_sms_phonenumbers(body, async)",
      "parameters": [
        {
          "name": "body",
          "type": "SmsPhoneNumberProvision"
        },
        {
          "name": "async",
          "type": "bool"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "POST /api/v2/routing/wrapupcodes": {
      "functionName": "post_routing_wrapupcodes",
      "signature": "post_routing_wrapupcodes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WrapupCode"
        }
      ],
      "return": "WrapupCode"
    },
    "POST /api/v2/users/{userId}/routinglanguages": {
      "functionName": "post_user_routinglanguages",
      "signature": "post_user_routinglanguages(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRoutingLanguagePost"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "POST /api/v2/users/{userId}/routingskills": {
      "functionName": "post_user_routingskills",
      "signature": "post_user_routingskills(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRoutingSkillPost"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "functionName": "put_routing_email_domain_route",
      "signature": "put_routing_email_domain_route(domain_name, route_id, body)",
      "parameters": [
        {
          "name": "domain_name",
          "type": "str"
        },
        {
          "name": "route_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "InboundRoute"
        }
      ],
      "return": "InboundRoute"
    },
    "PUT /api/v2/routing/message/recipients/{recipientId}": {
      "functionName": "put_routing_message_recipient",
      "signature": "put_routing_message_recipient(recipient_id, body)",
      "parameters": [
        {
          "name": "recipient_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Recipient"
        }
      ],
      "return": "Recipient"
    },
    "PUT /api/v2/routing/queues/{queueId}": {
      "functionName": "put_routing_queue",
      "signature": "put_routing_queue(queue_id, body)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "QueueRequest"
        }
      ],
      "return": "Queue"
    },
    "PUT /api/v2/routing/settings": {
      "functionName": "put_routing_settings",
      "signature": "put_routing_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RoutingSettings"
        }
      ],
      "return": "RoutingSettings"
    },
    "PUT /api/v2/routing/settings/transcription": {
      "functionName": "put_routing_settings_transcription",
      "signature": "put_routing_settings_transcription(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptionSettings"
        }
      ],
      "return": "TranscriptionSettings"
    },
    "PUT /api/v2/routing/sms/phonenumbers/{addressId}": {
      "functionName": "put_routing_sms_phonenumber",
      "signature": "put_routing_sms_phonenumber(address_id, body, async)",
      "parameters": [
        {
          "name": "address_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SmsPhoneNumber"
        },
        {
          "name": "async",
          "type": "bool"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "PUT /api/v2/routing/users/{userId}/utilization": {
      "functionName": "put_routing_user_utilization",
      "signature": "put_routing_user_utilization(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Utilization"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "PUT /api/v2/routing/utilization": {
      "functionName": "put_routing_utilization",
      "signature": "put_routing_utilization(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Utilization"
        }
      ],
      "return": "Utilization"
    },
    "PUT /api/v2/routing/wrapupcodes/{codeId}": {
      "functionName": "put_routing_wrapupcode",
      "signature": "put_routing_wrapupcode(code_id, body)",
      "parameters": [
        {
          "name": "code_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WrapupCode"
        }
      ],
      "return": "WrapupCode"
    },
    "PUT /api/v2/users/{userId}/routingskills/{skillId}": {
      "functionName": "put_user_routingskill",
      "signature": "put_user_routingskill(user_id, skill_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "skill_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRoutingSkill"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/users/{userId}/routingskills/bulk": {
      "functionName": "put_user_routingskills_bulk",
      "signature": "put_user_routingskills_bulk(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[UserRoutingSkillPost]"
        }
      ],
      "return": "UserSkillEntityListing"
    }
  },
  "scim": {
    "DELETE /api/v2/scim/users/{userId}": {
      "functionName": "delete_scim_user",
      "signature": "delete_scim_user(user_id, if_match)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/scim/v2/users/{userId}": {
      "functionName": "delete_scim_v2_user",
      "signature": "delete_scim_v2_user(user_id, if_match)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/scim/groups/{groupId}": {
      "functionName": "get_scim_group",
      "signature": "get_scim_group(group_id, attributes, excluded_attributes, if_none_match)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "attributes",
          "type": "list[str]"
        },
        {
          "name": "excluded_attributes",
          "type": "list[str]"
        },
        {
          "name": "if_none_match",
          "type": "str"
        }
      ],
      "return": "ScimV2Group"
    },
    "GET /api/v2/scim/groups": {
      "functionName": "get_scim_groups",
      "signature": "get_scim_groups(start_index, count, attributes, excluded_attributes, filter)",
      "parameters": [
        {
          "name": "start_index",
          "type": "int"
        },
        {
          "name": "count",
          "type": "int"
        },
        {
          "name": "attributes",
          "type": "list[str]"
        },
        {
          "name": "excluded_attributes",
          "type": "list[str]"
        },
        {
          "name": "filter",
          "type": "str"
        }
      ],
      "return": "ScimGroupListResponse"
    },
    "GET /api/v2/scim/resourcetypes/{resourceType}": {
      "functionName": "get_scim_resourcetype",
      "signature": "get_scim_resourcetype(resource_type)",
      "parameters": [
        {
          "name": "resource_type",
          "type": "str"
        }
      ],
      "return": "ScimConfigResourceType"
    },
    "GET /api/v2/scim/resourcetypes": {
      "functionName": "get_scim_resourcetypes",
      "signature": "get_scim_resourcetypes()",
      "return": "ScimConfigResourceTypesListResponse"
    },
    "GET /api/v2/scim/schemas/{schemaId}": {
      "functionName": "get_scim_schema",
      "signature": "get_scim_schema(schema_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        }
      ],
      "return": "ScimV2SchemaDefinition"
    },
    "GET /api/v2/scim/schemas": {
      "functionName": "get_scim_schemas",
      "signature": "get_scim_schemas(filter)",
      "parameters": [
        {
          "name": "filter",
          "type": "str"
        }
      ],
      "return": "ScimV2SchemaListResponse"
    },
    "GET /api/v2/scim/serviceproviderconfig": {
      "functionName": "get_scim_serviceproviderconfig",
      "signature": "get_scim_serviceproviderconfig(if_none_match)",
      "parameters": [
        {
          "name": "if_none_match",
          "type": "str"
        }
      ],
      "return": "ScimServiceProviderConfig"
    },
    "GET /api/v2/scim/users/{userId}": {
      "functionName": "get_scim_user",
      "signature": "get_scim_user(user_id, attributes, excluded_attributes, if_none_match)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "attributes",
          "type": "list[str]"
        },
        {
          "name": "excluded_attributes",
          "type": "list[str]"
        },
        {
          "name": "if_none_match",
          "type": "str"
        }
      ],
      "return": "ScimV2User"
    },
    "GET /api/v2/scim/users": {
      "functionName": "get_scim_users",
      "signature": "get_scim_users(start_index, count, attributes, excluded_attributes, filter)",
      "parameters": [
        {
          "name": "start_index",
          "type": "int"
        },
        {
          "name": "count",
          "type": "int"
        },
        {
          "name": "attributes",
          "type": "list[str]"
        },
        {
          "name": "excluded_attributes",
          "type": "list[str]"
        },
        {
          "name": "filter",
          "type": "str"
        }
      ],
      "return": "ScimUserListResponse"
    },
    "GET /api/v2/scim/v2/groups/{groupId}": {
      "functionName": "get_scim_v2_group",
      "signature": "get_scim_v2_group(group_id, attributes, excluded_attributes, if_none_match)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "attributes",
          "type": "list[str]"
        },
        {
          "name": "excluded_attributes",
          "type": "list[str]"
        },
        {
          "name": "if_none_match",
          "type": "str"
        }
      ],
      "return": "ScimV2Group"
    },
    "GET /api/v2/scim/v2/groups": {
      "functionName": "get_scim_v2_groups",
      "signature": "get_scim_v2_groups(filter, start_index, count, attributes, excluded_attributes)",
      "parameters": [
        {
          "name": "filter",
          "type": "str"
        },
        {
          "name": "start_index",
          "type": "int"
        },
        {
          "name": "count",
          "type": "int"
        },
        {
          "name": "attributes",
          "type": "list[str]"
        },
        {
          "name": "excluded_attributes",
          "type": "list[str]"
        }
      ],
      "return": "ScimGroupListResponse"
    },
    "GET /api/v2/scim/v2/resourcetypes/{resourceType}": {
      "functionName": "get_scim_v2_resourcetype",
      "signature": "get_scim_v2_resourcetype(resource_type)",
      "parameters": [
        {
          "name": "resource_type",
          "type": "str"
        }
      ],
      "return": "ScimConfigResourceType"
    },
    "GET /api/v2/scim/v2/resourcetypes": {
      "functionName": "get_scim_v2_resourcetypes",
      "signature": "get_scim_v2_resourcetypes()",
      "return": "ScimConfigResourceTypesListResponse"
    },
    "GET /api/v2/scim/v2/schemas/{schemaId}": {
      "functionName": "get_scim_v2_schema",
      "signature": "get_scim_v2_schema(schema_id)",
      "parameters": [
        {
          "name": "schema_id",
          "type": "str"
        }
      ],
      "return": "ScimV2SchemaDefinition"
    },
    "GET /api/v2/scim/v2/schemas": {
      "functionName": "get_scim_v2_schemas",
      "signature": "get_scim_v2_schemas(filter)",
      "parameters": [
        {
          "name": "filter",
          "type": "str"
        }
      ],
      "return": "ScimV2SchemaListResponse"
    },
    "GET /api/v2/scim/v2/serviceproviderconfig": {
      "functionName": "get_scim_v2_serviceproviderconfig",
      "signature": "get_scim_v2_serviceproviderconfig(if_none_match)",
      "parameters": [
        {
          "name": "if_none_match",
          "type": "str"
        }
      ],
      "return": "ScimServiceProviderConfig"
    },
    "GET /api/v2/scim/v2/users/{userId}": {
      "functionName": "get_scim_v2_user",
      "signature": "get_scim_v2_user(user_id, attributes, excluded_attributes, if_none_match)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "attributes",
          "type": "list[str]"
        },
        {
          "name": "excluded_attributes",
          "type": "list[str]"
        },
        {
          "name": "if_none_match",
          "type": "str"
        }
      ],
      "return": "ScimV2User"
    },
    "GET /api/v2/scim/v2/users": {
      "functionName": "get_scim_v2_users",
      "signature": "get_scim_v2_users(start_index, count, attributes, excluded_attributes, filter)",
      "parameters": [
        {
          "name": "start_index",
          "type": "int"
        },
        {
          "name": "count",
          "type": "int"
        },
        {
          "name": "attributes",
          "type": "list[str]"
        },
        {
          "name": "excluded_attributes",
          "type": "list[str]"
        },
        {
          "name": "filter",
          "type": "str"
        }
      ],
      "return": "ScimUserListResponse"
    },
    "PATCH /api/v2/scim/groups/{groupId}": {
      "functionName": "patch_scim_group",
      "signature": "patch_scim_group(group_id, body, if_match)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScimV2PatchRequest"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "ScimV2Group"
    },
    "PATCH /api/v2/scim/users/{userId}": {
      "functionName": "patch_scim_user",
      "signature": "patch_scim_user(user_id, body, if_match)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScimV2PatchRequest"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "ScimV2User"
    },
    "PATCH /api/v2/scim/v2/groups/{groupId}": {
      "functionName": "patch_scim_v2_group",
      "signature": "patch_scim_v2_group(group_id, body, if_match)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScimV2PatchRequest"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "ScimV2Group"
    },
    "PATCH /api/v2/scim/v2/users/{userId}": {
      "functionName": "patch_scim_v2_user",
      "signature": "patch_scim_v2_user(user_id, body, if_match)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScimV2PatchRequest"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "ScimV2User"
    },
    "POST /api/v2/scim/users": {
      "functionName": "post_scim_users",
      "signature": "post_scim_users(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ScimV2CreateUser"
        }
      ],
      "return": "ScimV2User"
    },
    "POST /api/v2/scim/v2/users": {
      "functionName": "post_scim_v2_users",
      "signature": "post_scim_v2_users(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ScimV2CreateUser"
        }
      ],
      "return": "ScimV2User"
    },
    "PUT /api/v2/scim/groups/{groupId}": {
      "functionName": "put_scim_group",
      "signature": "put_scim_group(group_id, body, if_match)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScimV2Group"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "ScimV2Group"
    },
    "PUT /api/v2/scim/users/{userId}": {
      "functionName": "put_scim_user",
      "signature": "put_scim_user(user_id, body, if_match)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScimV2User"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "ScimV2User"
    },
    "PUT /api/v2/scim/v2/groups/{groupId}": {
      "functionName": "put_scim_v2_group",
      "signature": "put_scim_v2_group(group_id, body, if_match)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScimV2Group"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "ScimV2Group"
    },
    "PUT /api/v2/scim/v2/users/{userId}": {
      "functionName": "put_scim_v2_user",
      "signature": "put_scim_v2_user(user_id, body, if_match)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ScimV2User"
        },
        {
          "name": "if_match",
          "type": "str"
        }
      ],
      "return": "ScimV2User"
    }
  },
  "scripts": {
    "GET /api/v2/scripts/{scriptId}": {
      "functionName": "get_script",
      "signature": "get_script(script_id)",
      "parameters": [
        {
          "name": "script_id",
          "type": "str"
        }
      ],
      "return": "Script"
    },
    "GET /api/v2/scripts/{scriptId}/pages/{pageId}": {
      "functionName": "get_script_page",
      "signature": "get_script_page(script_id, page_id, script_data_version)",
      "parameters": [
        {
          "name": "script_id",
          "type": "str"
        },
        {
          "name": "page_id",
          "type": "str"
        },
        {
          "name": "script_data_version",
          "type": "str"
        }
      ],
      "return": "Page"
    },
    "GET /api/v2/scripts/{scriptId}/pages": {
      "functionName": "get_script_pages",
      "signature": "get_script_pages(script_id, script_data_version)",
      "parameters": [
        {
          "name": "script_id",
          "type": "str"
        },
        {
          "name": "script_data_version",
          "type": "str"
        }
      ],
      "return": "list[Page]"
    },
    "GET /api/v2/scripts": {
      "functionName": "get_scripts",
      "signature": "get_scripts(page_size, page_number, expand, name, feature, flow_id, sort_by, sort_order, script_data_version)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "feature",
          "type": "str"
        },
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "script_data_version",
          "type": "str"
        }
      ],
      "return": "ScriptEntityListing"
    },
    "GET /api/v2/scripts/published": {
      "functionName": "get_scripts_published",
      "signature": "get_scripts_published(page_size, page_number, expand, name, feature, flow_id, script_data_version)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "feature",
          "type": "str"
        },
        {
          "name": "flow_id",
          "type": "str"
        },
        {
          "name": "script_data_version",
          "type": "str"
        }
      ],
      "return": "ScriptEntityListing"
    },
    "GET /api/v2/scripts/published/{scriptId}": {
      "functionName": "get_scripts_published_script_id",
      "signature": "get_scripts_published_script_id(script_id, script_data_version)",
      "parameters": [
        {
          "name": "script_id",
          "type": "str"
        },
        {
          "name": "script_data_version",
          "type": "str"
        }
      ],
      "return": "Script"
    },
    "GET /api/v2/scripts/published/{scriptId}/pages/{pageId}": {
      "functionName": "get_scripts_published_script_id_page",
      "signature": "get_scripts_published_script_id_page(script_id, page_id, script_data_version)",
      "parameters": [
        {
          "name": "script_id",
          "type": "str"
        },
        {
          "name": "page_id",
          "type": "str"
        },
        {
          "name": "script_data_version",
          "type": "str"
        }
      ],
      "return": "Page"
    },
    "GET /api/v2/scripts/published/{scriptId}/pages": {
      "functionName": "get_scripts_published_script_id_pages",
      "signature": "get_scripts_published_script_id_pages(script_id, script_data_version)",
      "parameters": [
        {
          "name": "script_id",
          "type": "str"
        },
        {
          "name": "script_data_version",
          "type": "str"
        }
      ],
      "return": "list[Page]"
    },
    "GET /api/v2/scripts/published/{scriptId}/variables": {
      "functionName": "get_scripts_published_script_id_variables",
      "signature": "get_scripts_published_script_id_variables(script_id, input, output, type, script_data_version)",
      "parameters": [
        {
          "name": "script_id",
          "type": "str"
        },
        {
          "name": "input",
          "type": "str"
        },
        {
          "name": "output",
          "type": "str"
        },
        {
          "name": "type",
          "type": "str"
        },
        {
          "name": "script_data_version",
          "type": "str"
        }
      ],
      "return": "object"
    },
    "GET /api/v2/scripts/uploads/{uploadId}/status": {
      "functionName": "get_scripts_upload_status",
      "signature": "get_scripts_upload_status(upload_id, long_poll)",
      "parameters": [
        {
          "name": "upload_id",
          "type": "str"
        },
        {
          "name": "long_poll",
          "type": "bool"
        }
      ],
      "return": "ImportScriptStatusResponse"
    },
    "POST /api/v2/scripts/{scriptId}/export": {
      "functionName": "post_script_export",
      "signature": "post_script_export(script_id, body)",
      "parameters": [
        {
          "name": "script_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ExportScriptRequest"
        }
      ],
      "return": "ExportScriptResponse"
    }
  },
  "search": {
    "GET /api/v2/documentation/gkn/search": {
      "functionName": "get_documentation_gkn_search",
      "signature": "get_documentation_gkn_search(q64)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        }
      ],
      "return": "GKNDocumentationSearchResponse"
    },
    "GET /api/v2/documentation/search": {
      "functionName": "get_documentation_search",
      "signature": "get_documentation_search(q64)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        }
      ],
      "return": "DocumentationSearchResponse"
    },
    "GET /api/v2/groups/search": {
      "functionName": "get_groups_search",
      "signature": "get_groups_search(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "GET /api/v2/locations/search": {
      "functionName": "get_locations_search",
      "signature": "get_locations_search(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "GET /api/v2/search": {
      "functionName": "get_search",
      "signature": "get_search(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "profile",
          "type": "bool"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/search/suggest": {
      "functionName": "get_search_suggest",
      "signature": "get_search_suggest(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "profile",
          "type": "bool"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/users/search": {
      "functionName": "get_users_search",
      "signature": "get_users_search(q64, expand, integration_presence_source)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "integration_presence_source",
          "type": "str"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "GET /api/v2/voicemail/search": {
      "functionName": "get_voicemail_search",
      "signature": "get_voicemail_search(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "POST /api/v2/analytics/conversations/transcripts/query": {
      "functionName": "post_analytics_conversations_transcripts_query",
      "signature": "post_analytics_conversations_transcripts_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptConversationDetailSearchRequest"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "POST /api/v2/documentation/gkn/search": {
      "functionName": "post_documentation_gkn_search",
      "signature": "post_documentation_gkn_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GKNDocumentationSearchRequest"
        }
      ],
      "return": "GKNDocumentationSearchResponse"
    },
    "POST /api/v2/documentation/search": {
      "functionName": "post_documentation_search",
      "signature": "post_documentation_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DocumentationSearchRequest"
        }
      ],
      "return": "DocumentationSearchResponse"
    },
    "POST /api/v2/groups/search": {
      "functionName": "post_groups_search",
      "signature": "post_groups_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GroupSearchRequest"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search": {
      "functionName": "post_knowledge_knowledgebase_search",
      "signature": "post_knowledge_knowledgebase_search(knowledge_base_id, body)",
      "parameters": [
        {
          "name": "knowledge_base_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "KnowledgeSearchRequest"
        }
      ],
      "return": "KnowledgeSearchResponse"
    },
    "POST /api/v2/locations/search": {
      "functionName": "post_locations_search",
      "signature": "post_locations_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocationSearchRequest"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "POST /api/v2/search": {
      "functionName": "post_search",
      "signature": "post_search(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "SearchRequest"
        },
        {
          "name": "profile",
          "type": "bool"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search/suggest": {
      "functionName": "post_search_suggest",
      "signature": "post_search_suggest(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "SuggestSearchRequest"
        },
        {
          "name": "profile",
          "type": "bool"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/speechandtextanalytics/transcripts/search": {
      "functionName": "post_speechandtextanalytics_transcripts_search",
      "signature": "post_speechandtextanalytics_transcripts_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptSearchRequest"
        }
      ],
      "return": "JsonSearchResponse"
    },
    "POST /api/v2/users/search": {
      "functionName": "post_users_search",
      "signature": "post_users_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserSearchRequest"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "POST /api/v2/voicemail/search": {
      "functionName": "post_voicemail_search",
      "signature": "post_voicemail_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VoicemailSearchRequest"
        }
      ],
      "return": "VoicemailsSearchResponse"
    }
  },
  "speechtextanalytics": {
    "DELETE /api/v2/speechandtextanalytics/programs/{programId}": {
      "functionName": "delete_speechandtextanalytics_program",
      "signature": "delete_speechandtextanalytics_program(program_id, force_delete)",
      "parameters": [
        {
          "name": "program_id",
          "type": "str"
        },
        {
          "name": "force_delete",
          "type": "bool"
        }
      ]
    },
    "DELETE /api/v2/speechandtextanalytics/sentimentfeedback": {
      "functionName": "delete_speechandtextanalytics_sentimentfeedback",
      "signature": "delete_speechandtextanalytics_sentimentfeedback()"
    },
    "DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}": {
      "functionName": "delete_speechandtextanalytics_sentimentfeedback_sentiment_feedback_id",
      "signature": "delete_speechandtextanalytics_sentimentfeedback_sentiment_feedback_id(sentiment_feedback_id)",
      "parameters": [
        {
          "name": "sentiment_feedback_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/speechandtextanalytics/topics/{topicId}": {
      "functionName": "delete_speechandtextanalytics_topic",
      "signature": "delete_speechandtextanalytics_topic(topic_id)",
      "parameters": [
        {
          "name": "topic_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/speechandtextanalytics/conversations/{conversationId}": {
      "functionName": "get_speechandtextanalytics_conversation",
      "signature": "get_speechandtextanalytics_conversation(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "ConversationMetrics"
    },
    "GET /api/v2/speechandtextanalytics/conversations/{conversationId}/communications/{communicationId}/transcripturl": {
      "functionName": "get_speechandtextanalytics_conversation_communication_transcripturl",
      "signature": "get_speechandtextanalytics_conversation_communication_transcripturl(conversation_id, communication_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "communication_id",
          "type": "str"
        }
      ],
      "return": "TranscriptUrl"
    },
    "GET /api/v2/speechandtextanalytics/programs/{programId}": {
      "functionName": "get_speechandtextanalytics_program",
      "signature": "get_speechandtextanalytics_program(program_id)",
      "parameters": [
        {
          "name": "program_id",
          "type": "str"
        }
      ],
      "return": "Program"
    },
    "GET /api/v2/speechandtextanalytics/programs/{programId}/mappings": {
      "functionName": "get_speechandtextanalytics_program_mappings",
      "signature": "get_speechandtextanalytics_program_mappings(program_id)",
      "parameters": [
        {
          "name": "program_id",
          "type": "str"
        }
      ],
      "return": "ProgramMappings"
    },
    "GET /api/v2/speechandtextanalytics/programs": {
      "functionName": "get_speechandtextanalytics_programs",
      "signature": "get_speechandtextanalytics_programs(next_page, page_size)",
      "parameters": [
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "ProgramsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/programs/general/jobs/{jobId}": {
      "functionName": "get_speechandtextanalytics_programs_general_job",
      "signature": "get_speechandtextanalytics_programs_general_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "GeneralProgramJob"
    },
    "GET /api/v2/speechandtextanalytics/programs/mappings": {
      "functionName": "get_speechandtextanalytics_programs_mappings",
      "signature": "get_speechandtextanalytics_programs_mappings(next_page, page_size)",
      "parameters": [
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "ProgramsMappingsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/programs/publishjobs/{jobId}": {
      "functionName": "get_speechandtextanalytics_programs_publishjob",
      "signature": "get_speechandtextanalytics_programs_publishjob(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "ProgramJob"
    },
    "GET /api/v2/speechandtextanalytics/programs/unpublished": {
      "functionName": "get_speechandtextanalytics_programs_unpublished",
      "signature": "get_speechandtextanalytics_programs_unpublished(next_page, page_size)",
      "parameters": [
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "UnpublishedProgramsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/sentiment/dialects": {
      "functionName": "get_speechandtextanalytics_sentiment_dialects",
      "signature": "get_speechandtextanalytics_sentiment_dialects()",
      "return": "EntityListing"
    },
    "GET /api/v2/speechandtextanalytics/sentimentfeedback": {
      "functionName": "get_speechandtextanalytics_sentimentfeedback",
      "signature": "get_speechandtextanalytics_sentimentfeedback(dialect)",
      "parameters": [
        {
          "name": "dialect",
          "type": "str"
        }
      ],
      "return": "SentimentFeedbackEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/settings": {
      "functionName": "get_speechandtextanalytics_settings",
      "signature": "get_speechandtextanalytics_settings()",
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "GET /api/v2/speechandtextanalytics/topics/{topicId}": {
      "functionName": "get_speechandtextanalytics_topic",
      "signature": "get_speechandtextanalytics_topic(topic_id)",
      "parameters": [
        {
          "name": "topic_id",
          "type": "str"
        }
      ],
      "return": "Topic"
    },
    "GET /api/v2/speechandtextanalytics/topics": {
      "functionName": "get_speechandtextanalytics_topics",
      "signature": "get_speechandtextanalytics_topics(next_page, page_size, state, name, ids, sort_by, sort_order)",
      "parameters": [
        {
          "name": "next_page",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "state",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "ids",
          "type": "list[str]"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "TopicsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/dialects": {
      "functionName": "get_speechandtextanalytics_topics_dialects",
      "signature": "get_speechandtextanalytics_topics_dialects()",
      "return": "EntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/general": {
      "functionName": "get_speechandtextanalytics_topics_general",
      "signature": "get_speechandtextanalytics_topics_general(dialect)",
      "parameters": [
        {
          "name": "dialect",
          "type": "str"
        }
      ],
      "return": "GeneralTopicsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/publishjobs/{jobId}": {
      "functionName": "get_speechandtextanalytics_topics_publishjob",
      "signature": "get_speechandtextanalytics_topics_publishjob(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "TopicJob"
    },
    "PATCH /api/v2/speechandtextanalytics/settings": {
      "functionName": "patch_speechandtextanalytics_settings",
      "signature": "patch_speechandtextanalytics_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SpeechTextAnalyticsSettingsRequest"
        }
      ],
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "POST /api/v2/speechandtextanalytics/programs": {
      "functionName": "post_speechandtextanalytics_programs",
      "signature": "post_speechandtextanalytics_programs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ProgramRequest"
        }
      ],
      "return": "Program"
    },
    "POST /api/v2/speechandtextanalytics/programs/general/jobs": {
      "functionName": "post_speechandtextanalytics_programs_general_jobs",
      "signature": "post_speechandtextanalytics_programs_general_jobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GeneralProgramJobRequest"
        }
      ],
      "return": "GeneralProgramJob"
    },
    "POST /api/v2/speechandtextanalytics/programs/publishjobs": {
      "functionName": "post_speechandtextanalytics_programs_publishjobs",
      "signature": "post_speechandtextanalytics_programs_publishjobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ProgramJobRequest"
        }
      ],
      "return": "ProgramJob"
    },
    "POST /api/v2/speechandtextanalytics/sentimentfeedback": {
      "functionName": "post_speechandtextanalytics_sentimentfeedback",
      "signature": "post_speechandtextanalytics_sentimentfeedback(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SentimentFeedback"
        }
      ],
      "return": "SentimentFeedback"
    },
    "POST /api/v2/speechandtextanalytics/topics": {
      "functionName": "post_speechandtextanalytics_topics",
      "signature": "post_speechandtextanalytics_topics(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TopicRequest"
        }
      ],
      "return": "Topic"
    },
    "POST /api/v2/speechandtextanalytics/topics/publishjobs": {
      "functionName": "post_speechandtextanalytics_topics_publishjobs",
      "signature": "post_speechandtextanalytics_topics_publishjobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TopicJobRequest"
        }
      ],
      "return": "TopicJob"
    },
    "POST /api/v2/speechandtextanalytics/transcripts/search": {
      "functionName": "post_speechandtextanalytics_transcripts_search",
      "signature": "post_speechandtextanalytics_transcripts_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptSearchRequest"
        }
      ],
      "return": "JsonSearchResponse"
    },
    "PUT /api/v2/speechandtextanalytics/programs/{programId}": {
      "functionName": "put_speechandtextanalytics_program",
      "signature": "put_speechandtextanalytics_program(program_id, body)",
      "parameters": [
        {
          "name": "program_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ProgramRequest"
        }
      ],
      "return": "Program"
    },
    "PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings": {
      "functionName": "put_speechandtextanalytics_program_mappings",
      "signature": "put_speechandtextanalytics_program_mappings(program_id, body)",
      "parameters": [
        {
          "name": "program_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ProgramMappingsRequest"
        }
      ],
      "return": "ProgramMappings"
    },
    "PUT /api/v2/speechandtextanalytics/settings": {
      "functionName": "put_speechandtextanalytics_settings",
      "signature": "put_speechandtextanalytics_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SpeechTextAnalyticsSettingsRequest"
        }
      ],
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "PUT /api/v2/speechandtextanalytics/topics/{topicId}": {
      "functionName": "put_speechandtextanalytics_topic",
      "signature": "put_speechandtextanalytics_topic(topic_id, body)",
      "parameters": [
        {
          "name": "topic_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TopicRequest"
        }
      ],
      "return": "Topic"
    }
  },
  "stations": {
    "DELETE /api/v2/stations/{stationId}/associateduser": {
      "functionName": "delete_station_associateduser",
      "signature": "delete_station_associateduser(station_id)",
      "parameters": [
        {
          "name": "station_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/stations/{stationId}": {
      "functionName": "get_station",
      "signature": "get_station(station_id)",
      "parameters": [
        {
          "name": "station_id",
          "type": "str"
        }
      ],
      "return": "Station"
    },
    "GET /api/v2/stations": {
      "functionName": "get_stations",
      "signature": "get_stations(page_size, page_number, sort_by, name, user_selectable, web_rtc_user_id, id, line_appearance_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "user_selectable",
          "type": "str"
        },
        {
          "name": "web_rtc_user_id",
          "type": "str"
        },
        {
          "name": "id",
          "type": "str"
        },
        {
          "name": "line_appearance_id",
          "type": "str"
        }
      ],
      "return": "StationEntityListing"
    },
    "GET /api/v2/stations/settings": {
      "functionName": "get_stations_settings",
      "signature": "get_stations_settings()",
      "return": "StationSettings"
    },
    "PATCH /api/v2/stations/settings": {
      "functionName": "patch_stations_settings",
      "signature": "patch_stations_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "StationSettings"
        }
      ],
      "return": "StationSettings"
    }
  },
  "suggest": {
    "GET /api/v2/search": {
      "functionName": "get_search",
      "signature": "get_search(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "profile",
          "type": "bool"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/search/suggest": {
      "functionName": "get_search_suggest",
      "signature": "get_search_suggest(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "profile",
          "type": "bool"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search": {
      "functionName": "post_search",
      "signature": "post_search(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "SearchRequest"
        },
        {
          "name": "profile",
          "type": "bool"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search/suggest": {
      "functionName": "post_search_suggest",
      "signature": "post_search_suggest(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "SuggestSearchRequest"
        },
        {
          "name": "profile",
          "type": "bool"
        }
      ],
      "return": "JsonNodeSearchResponse"
    }
  },
  "telephony": {
    "GET /api/v2/telephony/siptraces": {
      "functionName": "get_telephony_siptraces",
      "signature": "get_telephony_siptraces(date_start, date_end, call_id, to_user, from_user, conversation_id)",
      "parameters": [
        {
          "name": "date_start",
          "type": "datetime"
        },
        {
          "name": "date_end",
          "type": "datetime"
        },
        {
          "name": "call_id",
          "type": "str"
        },
        {
          "name": "to_user",
          "type": "str"
        },
        {
          "name": "from_user",
          "type": "str"
        },
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "SipSearchResult"
    },
    "GET /api/v2/telephony/siptraces/download/{downloadId}": {
      "functionName": "get_telephony_siptraces_download_download_id",
      "signature": "get_telephony_siptraces_download_download_id(download_id)",
      "parameters": [
        {
          "name": "download_id",
          "type": "str"
        }
      ],
      "return": "SignedUrlResponse"
    },
    "POST /api/v2/telephony/siptraces/download": {
      "functionName": "post_telephony_siptraces_download",
      "signature": "post_telephony_siptraces_download(sip_search_public_request)",
      "parameters": [
        {
          "name": "sip_search_public_request",
          "type": "SIPSearchPublicRequest"
        }
      ],
      "return": "SipDownloadResponse"
    }
  },
  "telephonyprovidersedge": {
    "DELETE /api/v2/telephony/providers/edges/{edgeId}": {
      "functionName": "delete_telephony_providers_edge",
      "signature": "delete_telephony_providers_edge(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "functionName": "delete_telephony_providers_edge_logicalinterface",
      "signature": "delete_telephony_providers_edge_logicalinterface(edge_id, interface_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "interface_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "functionName": "delete_telephony_providers_edge_softwareupdate",
      "signature": "delete_telephony_providers_edge_softwareupdate(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "functionName": "delete_telephony_providers_edges_certificateauthority",
      "signature": "delete_telephony_providers_edges_certificateauthority(certificate_id)",
      "parameters": [
        {
          "name": "certificate_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "functionName": "delete_telephony_providers_edges_didpool",
      "signature": "delete_telephony_providers_edges_didpool(did_pool_id)",
      "parameters": [
        {
          "name": "did_pool_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "functionName": "delete_telephony_providers_edges_edgegroup",
      "signature": "delete_telephony_providers_edges_edgegroup(edge_group_id)",
      "parameters": [
        {
          "name": "edge_group_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "functionName": "delete_telephony_providers_edges_extensionpool",
      "signature": "delete_telephony_providers_edges_extensionpool(extension_pool_id)",
      "parameters": [
        {
          "name": "extension_pool_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "functionName": "delete_telephony_providers_edges_outboundroute",
      "signature": "delete_telephony_providers_edges_outboundroute(outbound_route_id)",
      "parameters": [
        {
          "name": "outbound_route_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "functionName": "delete_telephony_providers_edges_phone",
      "signature": "delete_telephony_providers_edges_phone(phone_id)",
      "parameters": [
        {
          "name": "phone_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "functionName": "delete_telephony_providers_edges_phonebasesetting",
      "signature": "delete_telephony_providers_edges_phonebasesetting(phone_base_id)",
      "parameters": [
        {
          "name": "phone_base_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/sites/{siteId}": {
      "functionName": "delete_telephony_providers_edges_site",
      "signature": "delete_telephony_providers_edges_site(site_id)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "functionName": "delete_telephony_providers_edges_site_outboundroute",
      "signature": "delete_telephony_providers_edges_site_outboundroute(site_id, outbound_route_id)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "outbound_route_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "functionName": "delete_telephony_providers_edges_trunkbasesetting",
      "signature": "delete_telephony_providers_edges_trunkbasesetting(trunk_base_settings_id)",
      "parameters": [
        {
          "name": "trunk_base_settings_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/configuration/schemas/edges/vnext": {
      "functionName": "get_configuration_schemas_edges_vnext",
      "signature": "get_configuration_schemas_edges_vnext(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "SchemaCategoryEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}": {
      "functionName": "get_configuration_schemas_edges_vnext_schema_category",
      "signature": "get_configuration_schemas_edges_vnext_schema_category(schema_category, page_size, page_number)",
      "parameters": [
        {
          "name": "schema_category",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "SchemaReferenceEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}": {
      "functionName": "get_configuration_schemas_edges_vnext_schema_category_schema_type",
      "signature": "get_configuration_schemas_edges_vnext_schema_category_schema_type(schema_category, schema_type, page_size, page_number)",
      "parameters": [
        {
          "name": "schema_category",
          "type": "str"
        },
        {
          "name": "schema_type",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "SchemaReferenceEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}": {
      "functionName": "get_configuration_schemas_edges_vnext_schema_category_schema_type_schema_id",
      "signature": "get_configuration_schemas_edges_vnext_schema_category_schema_type_schema_id(schema_category, schema_type, schema_id)",
      "parameters": [
        {
          "name": "schema_category",
          "type": "str"
        },
        {
          "name": "schema_type",
          "type": "str"
        },
        {
          "name": "schema_id",
          "type": "str"
        }
      ],
      "return": "Organization"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}/{extensionType}/{metadataId}": {
      "functionName": "get_configuration_schemas_edges_vnext_schema_category_schema_type_schema_id_extension_type_metadata_id",
      "signature": "get_configuration_schemas_edges_vnext_schema_category_schema_type_schema_id_extension_type_metadata_id(schema_category, schema_type, schema_id, extension_type, metadata_id, type)",
      "parameters": [
        {
          "name": "schema_category",
          "type": "str"
        },
        {
          "name": "schema_type",
          "type": "str"
        },
        {
          "name": "schema_id",
          "type": "str"
        },
        {
          "name": "extension_type",
          "type": "str"
        },
        {
          "name": "metadata_id",
          "type": "str"
        },
        {
          "name": "type",
          "type": "str"
        }
      ],
      "return": "Organization"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}": {
      "functionName": "get_telephony_providers_edge",
      "signature": "get_telephony_providers_edge(edge_id, expand)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "Edge"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/nslookup": {
      "functionName": "get_telephony_providers_edge_diagnostic_nslookup",
      "signature": "get_telephony_providers_edge_diagnostic_nslookup(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/ping": {
      "functionName": "get_telephony_providers_edge_diagnostic_ping",
      "signature": "get_telephony_providers_edge_diagnostic_ping(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/route": {
      "functionName": "get_telephony_providers_edge_diagnostic_route",
      "signature": "get_telephony_providers_edge_diagnostic_route(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/tracepath": {
      "functionName": "get_telephony_providers_edge_diagnostic_tracepath",
      "signature": "get_telephony_providers_edge_diagnostic_tracepath(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}": {
      "functionName": "get_telephony_providers_edge_line",
      "signature": "get_telephony_providers_edge_line(edge_id, line_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "line_id",
          "type": "str"
        }
      ],
      "return": "EdgeLine"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/lines": {
      "functionName": "get_telephony_providers_edge_lines",
      "signature": "get_telephony_providers_edge_lines(edge_id, page_size, page_number)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "EdgeLineEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "functionName": "get_telephony_providers_edge_logicalinterface",
      "signature": "get_telephony_providers_edge_logicalinterface(edge_id, interface_id, expand)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "interface_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces": {
      "functionName": "get_telephony_providers_edge_logicalinterfaces",
      "signature": "get_telephony_providers_edge_logicalinterfaces(edge_id, expand)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LogicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}": {
      "functionName": "get_telephony_providers_edge_logs_job",
      "signature": "get_telephony_providers_edge_logs_job(edge_id, job_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "EdgeLogsJob"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/metrics": {
      "functionName": "get_telephony_providers_edge_metrics",
      "signature": "get_telephony_providers_edge_metrics(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "EdgeMetrics"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces/{interfaceId}": {
      "functionName": "get_telephony_providers_edge_physicalinterface",
      "signature": "get_telephony_providers_edge_physicalinterface(edge_id, interface_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "interface_id",
          "type": "str"
        }
      ],
      "return": "DomainPhysicalInterface"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces": {
      "functionName": "get_telephony_providers_edge_physicalinterfaces",
      "signature": "get_telephony_providers_edge_physicalinterfaces(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "PhysicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/setuppackage": {
      "functionName": "get_telephony_providers_edge_setuppackage",
      "signature": "get_telephony_providers_edge_setuppackage(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "VmPairingInfo"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "functionName": "get_telephony_providers_edge_softwareupdate",
      "signature": "get_telephony_providers_edge_softwareupdate(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "DomainEdgeSoftwareUpdateDto"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/softwareversions": {
      "functionName": "get_telephony_providers_edge_softwareversions",
      "signature": "get_telephony_providers_edge_softwareversions(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "DomainEdgeSoftwareVersionDtoEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/trunks": {
      "functionName": "get_telephony_providers_edge_trunks",
      "signature": "get_telephony_providers_edge_trunks(edge_id, page_number, page_size, sort_by, sort_order, trunk_base_id, trunk_type)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "trunk_base_id",
          "type": "str"
        },
        {
          "name": "trunk_type",
          "type": "str"
        }
      ],
      "return": "TrunkEntityListing"
    },
    "GET /api/v2/telephony/providers/edges": {
      "functionName": "get_telephony_providers_edges",
      "signature": "get_telephony_providers_edges(page_size, page_number, name, site_id, edge_group_id, sort_by, managed)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "edge_group_id",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "managed",
          "type": "bool"
        }
      ],
      "return": "EdgeEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/availablelanguages": {
      "functionName": "get_telephony_providers_edges_availablelanguages",
      "signature": "get_telephony_providers_edges_availablelanguages()",
      "return": "AvailableLanguageList"
    },
    "GET /api/v2/telephony/providers/edges/certificateauthorities": {
      "functionName": "get_telephony_providers_edges_certificateauthorities",
      "signature": "get_telephony_providers_edges_certificateauthorities()",
      "return": "CertificateAuthorityEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "functionName": "get_telephony_providers_edges_certificateauthority",
      "signature": "get_telephony_providers_edges_certificateauthority(certificate_id)",
      "parameters": [
        {
          "name": "certificate_id",
          "type": "str"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "GET /api/v2/telephony/providers/edges/dids/{didId}": {
      "functionName": "get_telephony_providers_edges_did",
      "signature": "get_telephony_providers_edges_did(did_id)",
      "parameters": [
        {
          "name": "did_id",
          "type": "str"
        }
      ],
      "return": "DID"
    },
    "GET /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "functionName": "get_telephony_providers_edges_didpool",
      "signature": "get_telephony_providers_edges_didpool(did_pool_id)",
      "parameters": [
        {
          "name": "did_pool_id",
          "type": "str"
        }
      ],
      "return": "DIDPool"
    },
    "GET /api/v2/telephony/providers/edges/didpools": {
      "functionName": "get_telephony_providers_edges_didpools",
      "signature": "get_telephony_providers_edges_didpools(page_size, page_number, sort_by, id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "DIDPoolEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/didpools/dids": {
      "functionName": "get_telephony_providers_edges_didpools_dids",
      "signature": "get_telephony_providers_edges_didpools_dids(type, id, number_match, page_size, page_number, sort_order)",
      "parameters": [
        {
          "name": "type",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "number_match",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "DIDNumberEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/dids": {
      "functionName": "get_telephony_providers_edges_dids",
      "signature": "get_telephony_providers_edges_dids(page_size, page_number, sort_by, sort_order, phone_number, owner_id, did_pool_id, id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "phone_number",
          "type": "str"
        },
        {
          "name": "owner_id",
          "type": "str"
        },
        {
          "name": "did_pool_id",
          "type": "str"
        },
        {
          "name": "id",
          "type": "list[str]"
        }
      ],
      "return": "DIDEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "functionName": "get_telephony_providers_edges_edgegroup",
      "signature": "get_telephony_providers_edges_edgegroup(edge_group_id, expand)",
      "parameters": [
        {
          "name": "edge_group_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "EdgeGroup"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups/{edgegroupId}/edgetrunkbases/{edgetrunkbaseId}": {
      "functionName": "get_telephony_providers_edges_edgegroup_edgetrunkbase",
      "signature": "get_telephony_providers_edges_edgegroup_edgetrunkbase(edgegroup_id, edgetrunkbase_id)",
      "parameters": [
        {
          "name": "edgegroup_id",
          "type": "str"
        },
        {
          "name": "edgetrunkbase_id",
          "type": "str"
        }
      ],
      "return": "EdgeTrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups": {
      "functionName": "get_telephony_providers_edges_edgegroups",
      "signature": "get_telephony_providers_edges_edgegroups(page_size, page_number, name, sort_by, managed)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "managed",
          "type": "bool"
        }
      ],
      "return": "EdgeGroupEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/edgeversionreport": {
      "functionName": "get_telephony_providers_edges_edgeversionreport",
      "signature": "get_telephony_providers_edges_edgeversionreport()",
      "return": "EdgeVersionReport"
    },
    "GET /api/v2/telephony/providers/edges/expired": {
      "functionName": "get_telephony_providers_edges_expired",
      "signature": "get_telephony_providers_edges_expired()",
      "return": "ExpiredEdgeListing"
    },
    "GET /api/v2/telephony/providers/edges/extensions/{extensionId}": {
      "functionName": "get_telephony_providers_edges_extension",
      "signature": "get_telephony_providers_edges_extension(extension_id)",
      "parameters": [
        {
          "name": "extension_id",
          "type": "str"
        }
      ],
      "return": "Extension"
    },
    "GET /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "functionName": "get_telephony_providers_edges_extensionpool",
      "signature": "get_telephony_providers_edges_extensionpool(extension_pool_id)",
      "parameters": [
        {
          "name": "extension_pool_id",
          "type": "str"
        }
      ],
      "return": "ExtensionPool"
    },
    "GET /api/v2/telephony/providers/edges/extensionpools": {
      "functionName": "get_telephony_providers_edges_extensionpools",
      "signature": "get_telephony_providers_edges_extensionpools(page_size, page_number, sort_by, number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "number",
          "type": "str"
        }
      ],
      "return": "ExtensionPoolEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/extensions": {
      "functionName": "get_telephony_providers_edges_extensions",
      "signature": "get_telephony_providers_edges_extensions(page_size, page_number, sort_by, sort_order, number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "number",
          "type": "str"
        }
      ],
      "return": "ExtensionEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines/{lineId}": {
      "functionName": "get_telephony_providers_edges_line",
      "signature": "get_telephony_providers_edges_line(line_id)",
      "parameters": [
        {
          "name": "line_id",
          "type": "str"
        }
      ],
      "return": "Line"
    },
    "GET /api/v2/telephony/providers/edges/linebasesettings/{lineBaseId}": {
      "functionName": "get_telephony_providers_edges_linebasesetting",
      "signature": "get_telephony_providers_edges_linebasesetting(line_base_id)",
      "parameters": [
        {
          "name": "line_base_id",
          "type": "str"
        }
      ],
      "return": "LineBase"
    },
    "GET /api/v2/telephony/providers/edges/linebasesettings": {
      "functionName": "get_telephony_providers_edges_linebasesettings",
      "signature": "get_telephony_providers_edges_linebasesettings(page_number, page_size, sort_by, sort_order, expand)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LineBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines": {
      "functionName": "get_telephony_providers_edges_lines",
      "signature": "get_telephony_providers_edges_lines(page_size, page_number, name, sort_by, expand)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LineEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines/template": {
      "functionName": "get_telephony_providers_edges_lines_template",
      "signature": "get_telephony_providers_edges_lines_template(line_base_settings_id)",
      "parameters": [
        {
          "name": "line_base_settings_id",
          "type": "str"
        }
      ],
      "return": "Line"
    },
    "GET /api/v2/telephony/providers/edges/logicalinterfaces": {
      "functionName": "get_telephony_providers_edges_logicalinterfaces",
      "signature": "get_telephony_providers_edges_logicalinterfaces(edge_ids, expand)",
      "parameters": [
        {
          "name": "edge_ids",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "LogicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/metrics": {
      "functionName": "get_telephony_providers_edges_metrics",
      "signature": "get_telephony_providers_edges_metrics(edge_ids)",
      "parameters": [
        {
          "name": "edge_ids",
          "type": "str"
        }
      ],
      "return": "list[EdgeMetrics]"
    },
    "GET /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "functionName": "get_telephony_providers_edges_outboundroute",
      "signature": "get_telephony_providers_edges_outboundroute(outbound_route_id)",
      "parameters": [
        {
          "name": "outbound_route_id",
          "type": "str"
        }
      ],
      "return": "OutboundRoute"
    },
    "GET /api/v2/telephony/providers/edges/outboundroutes": {
      "functionName": "get_telephony_providers_edges_outboundroutes",
      "signature": "get_telephony_providers_edges_outboundroutes(page_size, page_number, name, site_id, external_trunk_bases_ids, sort_by)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "external_trunk_bases_ids",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        }
      ],
      "return": "OutboundRouteEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "functionName": "get_telephony_providers_edges_phone",
      "signature": "get_telephony_providers_edges_phone(phone_id)",
      "parameters": [
        {
          "name": "phone_id",
          "type": "str"
        }
      ],
      "return": "Phone"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "functionName": "get_telephony_providers_edges_phonebasesetting",
      "signature": "get_telephony_providers_edges_phonebasesetting(phone_base_id)",
      "parameters": [
        {
          "name": "phone_base_id",
          "type": "str"
        }
      ],
      "return": "PhoneBase"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings": {
      "functionName": "get_telephony_providers_edges_phonebasesettings",
      "signature": "get_telephony_providers_edges_phonebasesettings(page_size, page_number, sort_by, sort_order, expand, name)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "PhoneBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/availablemetabases": {
      "functionName": "get_telephony_providers_edges_phonebasesettings_availablemetabases",
      "signature": "get_telephony_providers_edges_phonebasesettings_availablemetabases(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "PhoneMetaBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/template": {
      "functionName": "get_telephony_providers_edges_phonebasesettings_template",
      "signature": "get_telephony_providers_edges_phonebasesettings_template(phone_metabase_id)",
      "parameters": [
        {
          "name": "phone_metabase_id",
          "type": "str"
        }
      ],
      "return": "PhoneBase"
    },
    "GET /api/v2/telephony/providers/edges/phones": {
      "functionName": "get_telephony_providers_edges_phones",
      "signature": "get_telephony_providers_edges_phones(page_number, page_size, sort_by, sort_order, site_id, web_rtc_user_id, phone_base_settings_id, lines_logged_in_user_id, lines_default_for_user_id, phone_hardware_id, lines_id, lines_name, name, status_operational_status, secondary_status_operational_status, expand, fields)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "web_rtc_user_id",
          "type": "str"
        },
        {
          "name": "phone_base_settings_id",
          "type": "str"
        },
        {
          "name": "lines_logged_in_user_id",
          "type": "str"
        },
        {
          "name": "lines_default_for_user_id",
          "type": "str"
        },
        {
          "name": "phone_hardware_id",
          "type": "str"
        },
        {
          "name": "lines_id",
          "type": "str"
        },
        {
          "name": "lines_name",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "status_operational_status",
          "type": "str"
        },
        {
          "name": "secondary_status_operational_status",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "fields",
          "type": "list[str]"
        }
      ],
      "return": "PhoneEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phones/template": {
      "functionName": "get_telephony_providers_edges_phones_template",
      "signature": "get_telephony_providers_edges_phones_template(phone_base_settings_id)",
      "parameters": [
        {
          "name": "phone_base_settings_id",
          "type": "str"
        }
      ],
      "return": "Phone"
    },
    "GET /api/v2/telephony/providers/edges/physicalinterfaces": {
      "functionName": "get_telephony_providers_edges_physicalinterfaces",
      "signature": "get_telephony_providers_edges_physicalinterfaces(edge_ids)",
      "parameters": [
        {
          "name": "edge_ids",
          "type": "str"
        }
      ],
      "return": "PhysicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}": {
      "functionName": "get_telephony_providers_edges_site",
      "signature": "get_telephony_providers_edges_site(site_id)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        }
      ],
      "return": "Site"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans/{numberPlanId}": {
      "functionName": "get_telephony_providers_edges_site_numberplan",
      "signature": "get_telephony_providers_edges_site_numberplan(site_id, number_plan_id)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "number_plan_id",
          "type": "str"
        }
      ],
      "return": "NumberPlan"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans": {
      "functionName": "get_telephony_providers_edges_site_numberplans",
      "signature": "get_telephony_providers_edges_site_numberplans(site_id)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        }
      ],
      "return": "list[NumberPlan]"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans/classifications": {
      "functionName": "get_telephony_providers_edges_site_numberplans_classifications",
      "signature": "get_telephony_providers_edges_site_numberplans_classifications(site_id, classification)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "classification",
          "type": "str"
        }
      ],
      "return": "list[str]"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "functionName": "get_telephony_providers_edges_site_outboundroute",
      "signature": "get_telephony_providers_edges_site_outboundroute(site_id, outbound_route_id)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "outbound_route_id",
          "type": "str"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes": {
      "functionName": "get_telephony_providers_edges_site_outboundroutes",
      "signature": "get_telephony_providers_edges_site_outboundroutes(site_id, page_size, page_number, name, external_trunk_bases_ids, sort_by)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "external_trunk_bases_ids",
          "type": "str"
        },
        {
          "name": "sort_by",
          "type": "str"
        }
      ],
      "return": "OutboundRouteBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/sites": {
      "functionName": "get_telephony_providers_edges_sites",
      "signature": "get_telephony_providers_edges_sites(page_size, page_number, sort_by, sort_order, name, location_id, managed)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        },
        {
          "name": "location_id",
          "type": "str"
        },
        {
          "name": "managed",
          "type": "bool"
        }
      ],
      "return": "SiteEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/timezones": {
      "functionName": "get_telephony_providers_edges_timezones",
      "signature": "get_telephony_providers_edges_timezones(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "TimeZoneEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunks/{trunkId}": {
      "functionName": "get_telephony_providers_edges_trunk",
      "signature": "get_telephony_providers_edges_trunk(trunk_id)",
      "parameters": [
        {
          "name": "trunk_id",
          "type": "str"
        }
      ],
      "return": "Trunk"
    },
    "GET /api/v2/telephony/providers/edges/trunks/{trunkId}/metrics": {
      "functionName": "get_telephony_providers_edges_trunk_metrics",
      "signature": "get_telephony_providers_edges_trunk_metrics(trunk_id)",
      "parameters": [
        {
          "name": "trunk_id",
          "type": "str"
        }
      ],
      "return": "TrunkMetrics"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "functionName": "get_telephony_providers_edges_trunkbasesetting",
      "signature": "get_telephony_providers_edges_trunkbasesetting(trunk_base_settings_id, ignore_hidden)",
      "parameters": [
        {
          "name": "trunk_base_settings_id",
          "type": "str"
        },
        {
          "name": "ignore_hidden",
          "type": "bool"
        }
      ],
      "return": "TrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings": {
      "functionName": "get_telephony_providers_edges_trunkbasesettings",
      "signature": "get_telephony_providers_edges_trunkbasesettings(page_number, page_size, sort_by, sort_order, recording_enabled, ignore_hidden, managed, expand, name)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "recording_enabled",
          "type": "bool"
        },
        {
          "name": "ignore_hidden",
          "type": "bool"
        },
        {
          "name": "managed",
          "type": "bool"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "TrunkBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/availablemetabases": {
      "functionName": "get_telephony_providers_edges_trunkbasesettings_availablemetabases",
      "signature": "get_telephony_providers_edges_trunkbasesettings_availablemetabases(type, page_size, page_number)",
      "parameters": [
        {
          "name": "type",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "TrunkMetabaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/template": {
      "functionName": "get_telephony_providers_edges_trunkbasesettings_template",
      "signature": "get_telephony_providers_edges_trunkbasesettings_template(trunk_metabase_id)",
      "parameters": [
        {
          "name": "trunk_metabase_id",
          "type": "str"
        }
      ],
      "return": "TrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/trunks": {
      "functionName": "get_telephony_providers_edges_trunks",
      "signature": "get_telephony_providers_edges_trunks(page_number, page_size, sort_by, sort_order, edge_id, trunk_base_id, trunk_type)",
      "parameters": [
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "sort_by",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "trunk_base_id",
          "type": "str"
        },
        {
          "name": "trunk_type",
          "type": "str"
        }
      ],
      "return": "TrunkEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunks/metrics": {
      "functionName": "get_telephony_providers_edges_trunks_metrics",
      "signature": "get_telephony_providers_edges_trunks_metrics(trunk_ids)",
      "parameters": [
        {
          "name": "trunk_ids",
          "type": "str"
        }
      ],
      "return": "list[TrunkMetrics]"
    },
    "GET /api/v2/telephony/providers/edges/trunkswithrecording": {
      "functionName": "get_telephony_providers_edges_trunkswithrecording",
      "signature": "get_telephony_providers_edges_trunkswithrecording(trunk_type)",
      "parameters": [
        {
          "name": "trunk_type",
          "type": "str"
        }
      ],
      "return": "TrunkRecordingEnabledCount"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/nslookup": {
      "functionName": "post_telephony_providers_edge_diagnostic_nslookup",
      "signature": "post_telephony_providers_edge_diagnostic_nslookup(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeNetworkDiagnosticRequest"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/ping": {
      "functionName": "post_telephony_providers_edge_diagnostic_ping",
      "signature": "post_telephony_providers_edge_diagnostic_ping(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeNetworkDiagnosticRequest"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/route": {
      "functionName": "post_telephony_providers_edge_diagnostic_route",
      "signature": "post_telephony_providers_edge_diagnostic_route(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeNetworkDiagnosticRequest"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/tracepath": {
      "functionName": "post_telephony_providers_edge_diagnostic_tracepath",
      "signature": "post_telephony_providers_edge_diagnostic_tracepath(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeNetworkDiagnosticRequest"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces": {
      "functionName": "post_telephony_providers_edge_logicalinterfaces",
      "signature": "post_telephony_providers_edge_logicalinterfaces(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DomainLogicalInterface"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}/upload": {
      "functionName": "post_telephony_providers_edge_logs_job_upload",
      "signature": "post_telephony_providers_edge_logs_job_upload(edge_id, job_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "job_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeLogsJobUploadRequest"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logs/jobs": {
      "functionName": "post_telephony_providers_edge_logs_jobs",
      "signature": "post_telephony_providers_edge_logs_jobs(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeLogsJobRequest"
        }
      ],
      "return": "EdgeLogsJobResponse"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/reboot": {
      "functionName": "post_telephony_providers_edge_reboot",
      "signature": "post_telephony_providers_edge_reboot(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeRebootParameters"
        }
      ],
      "return": "str"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "functionName": "post_telephony_providers_edge_softwareupdate",
      "signature": "post_telephony_providers_edge_softwareupdate(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DomainEdgeSoftwareUpdateDto"
        }
      ],
      "return": "DomainEdgeSoftwareUpdateDto"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/statuscode": {
      "functionName": "post_telephony_providers_edge_statuscode",
      "signature": "post_telephony_providers_edge_statuscode(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeServiceStateRequest"
        }
      ],
      "return": "str"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/unpair": {
      "functionName": "post_telephony_providers_edge_unpair",
      "signature": "post_telephony_providers_edge_unpair(edge_id)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        }
      ],
      "return": "str"
    },
    "POST /api/v2/telephony/providers/edges": {
      "functionName": "post_telephony_providers_edges",
      "signature": "post_telephony_providers_edges(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Edge"
        }
      ],
      "return": "Edge"
    },
    "POST /api/v2/telephony/providers/edges/addressvalidation": {
      "functionName": "post_telephony_providers_edges_addressvalidation",
      "signature": "post_telephony_providers_edges_addressvalidation(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ValidateAddressRequest"
        }
      ],
      "return": "ValidateAddressResponse"
    },
    "POST /api/v2/telephony/providers/edges/certificateauthorities": {
      "functionName": "post_telephony_providers_edges_certificateauthorities",
      "signature": "post_telephony_providers_edges_certificateauthorities(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DomainCertificateAuthority"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "POST /api/v2/telephony/providers/edges/didpools": {
      "functionName": "post_telephony_providers_edges_didpools",
      "signature": "post_telephony_providers_edges_didpools(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DIDPool"
        }
      ],
      "return": "DIDPool"
    },
    "POST /api/v2/telephony/providers/edges/edgegroups": {
      "functionName": "post_telephony_providers_edges_edgegroups",
      "signature": "post_telephony_providers_edges_edgegroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EdgeGroup"
        }
      ],
      "return": "EdgeGroup"
    },
    "POST /api/v2/telephony/providers/edges/extensionpools": {
      "functionName": "post_telephony_providers_edges_extensionpools",
      "signature": "post_telephony_providers_edges_extensionpools(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ExtensionPool"
        }
      ],
      "return": "ExtensionPool"
    },
    "POST /api/v2/telephony/providers/edges/outboundroutes": {
      "functionName": "post_telephony_providers_edges_outboundroutes",
      "signature": "post_telephony_providers_edges_outboundroutes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OutboundRoute"
        }
      ],
      "return": "OutboundRoute"
    },
    "POST /api/v2/telephony/providers/edges/phones/{phoneId}/reboot": {
      "functionName": "post_telephony_providers_edges_phone_reboot",
      "signature": "post_telephony_providers_edges_phone_reboot(phone_id)",
      "parameters": [
        {
          "name": "phone_id",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/phonebasesettings": {
      "functionName": "post_telephony_providers_edges_phonebasesettings",
      "signature": "post_telephony_providers_edges_phonebasesettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PhoneBase"
        }
      ],
      "return": "PhoneBase"
    },
    "POST /api/v2/telephony/providers/edges/phones": {
      "functionName": "post_telephony_providers_edges_phones",
      "signature": "post_telephony_providers_edges_phones(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Phone"
        }
      ],
      "return": "Phone"
    },
    "POST /api/v2/telephony/providers/edges/phones/reboot": {
      "functionName": "post_telephony_providers_edges_phones_reboot",
      "signature": "post_telephony_providers_edges_phones_reboot(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PhonesReboot"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes": {
      "functionName": "post_telephony_providers_edges_site_outboundroutes",
      "signature": "post_telephony_providers_edges_site_outboundroutes(site_id, body)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "OutboundRouteBase"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "POST /api/v2/telephony/providers/edges/sites/{siteId}/rebalance": {
      "functionName": "post_telephony_providers_edges_site_rebalance",
      "signature": "post_telephony_providers_edges_site_rebalance(site_id)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/sites": {
      "functionName": "post_telephony_providers_edges_sites",
      "signature": "post_telephony_providers_edges_sites(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Site"
        }
      ],
      "return": "Site"
    },
    "POST /api/v2/telephony/providers/edges/trunkbasesettings": {
      "functionName": "post_telephony_providers_edges_trunkbasesettings",
      "signature": "post_telephony_providers_edges_trunkbasesettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TrunkBase"
        }
      ],
      "return": "TrunkBase"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}": {
      "functionName": "put_telephony_providers_edge",
      "signature": "put_telephony_providers_edge(edge_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Edge"
        }
      ],
      "return": "Edge"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}": {
      "functionName": "put_telephony_providers_edge_line",
      "signature": "put_telephony_providers_edge_line(edge_id, line_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "line_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeLine"
        }
      ],
      "return": "EdgeLine"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "functionName": "put_telephony_providers_edge_logicalinterface",
      "signature": "put_telephony_providers_edge_logicalinterface(edge_id, interface_id, body)",
      "parameters": [
        {
          "name": "edge_id",
          "type": "str"
        },
        {
          "name": "interface_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DomainLogicalInterface"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "PUT /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "functionName": "put_telephony_providers_edges_certificateauthority",
      "signature": "put_telephony_providers_edges_certificateauthority(certificate_id, body)",
      "parameters": [
        {
          "name": "certificate_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DomainCertificateAuthority"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "PUT /api/v2/telephony/providers/edges/dids/{didId}": {
      "functionName": "put_telephony_providers_edges_did",
      "signature": "put_telephony_providers_edges_did(did_id, body)",
      "parameters": [
        {
          "name": "did_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DID"
        }
      ],
      "return": "DID"
    },
    "PUT /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "functionName": "put_telephony_providers_edges_didpool",
      "signature": "put_telephony_providers_edges_didpool(did_pool_id, body)",
      "parameters": [
        {
          "name": "did_pool_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "DIDPool"
        }
      ],
      "return": "DIDPool"
    },
    "PUT /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "functionName": "put_telephony_providers_edges_edgegroup",
      "signature": "put_telephony_providers_edges_edgegroup(edge_group_id, body)",
      "parameters": [
        {
          "name": "edge_group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeGroup"
        }
      ],
      "return": "EdgeGroup"
    },
    "PUT /api/v2/telephony/providers/edges/edgegroups/{edgegroupId}/edgetrunkbases/{edgetrunkbaseId}": {
      "functionName": "put_telephony_providers_edges_edgegroup_edgetrunkbase",
      "signature": "put_telephony_providers_edges_edgegroup_edgetrunkbase(edgegroup_id, edgetrunkbase_id, body)",
      "parameters": [
        {
          "name": "edgegroup_id",
          "type": "str"
        },
        {
          "name": "edgetrunkbase_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "EdgeTrunkBase"
        }
      ],
      "return": "EdgeTrunkBase"
    },
    "PUT /api/v2/telephony/providers/edges/extensions/{extensionId}": {
      "functionName": "put_telephony_providers_edges_extension",
      "signature": "put_telephony_providers_edges_extension(extension_id, body)",
      "parameters": [
        {
          "name": "extension_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Extension"
        }
      ],
      "return": "Extension"
    },
    "PUT /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "functionName": "put_telephony_providers_edges_extensionpool",
      "signature": "put_telephony_providers_edges_extensionpool(extension_pool_id, body)",
      "parameters": [
        {
          "name": "extension_pool_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ExtensionPool"
        }
      ],
      "return": "ExtensionPool"
    },
    "PUT /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "functionName": "put_telephony_providers_edges_outboundroute",
      "signature": "put_telephony_providers_edges_outboundroute(outbound_route_id, body)",
      "parameters": [
        {
          "name": "outbound_route_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "OutboundRoute"
        }
      ],
      "return": "OutboundRoute"
    },
    "PUT /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "functionName": "put_telephony_providers_edges_phone",
      "signature": "put_telephony_providers_edges_phone(phone_id, body)",
      "parameters": [
        {
          "name": "phone_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Phone"
        }
      ],
      "return": "Phone"
    },
    "PUT /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "functionName": "put_telephony_providers_edges_phonebasesetting",
      "signature": "put_telephony_providers_edges_phonebasesetting(phone_base_id, body)",
      "parameters": [
        {
          "name": "phone_base_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PhoneBase"
        }
      ],
      "return": "PhoneBase"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}": {
      "functionName": "put_telephony_providers_edges_site",
      "signature": "put_telephony_providers_edges_site(site_id, body)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Site"
        }
      ],
      "return": "Site"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}/numberplans": {
      "functionName": "put_telephony_providers_edges_site_numberplans",
      "signature": "put_telephony_providers_edges_site_numberplans(site_id, body)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[NumberPlan]"
        }
      ],
      "return": "list[NumberPlan]"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "functionName": "put_telephony_providers_edges_site_outboundroute",
      "signature": "put_telephony_providers_edges_site_outboundroute(site_id, outbound_route_id, body)",
      "parameters": [
        {
          "name": "site_id",
          "type": "str"
        },
        {
          "name": "outbound_route_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "OutboundRouteBase"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "PUT /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "functionName": "put_telephony_providers_edges_trunkbasesetting",
      "signature": "put_telephony_providers_edges_trunkbasesetting(trunk_base_settings_id, body)",
      "parameters": [
        {
          "name": "trunk_base_settings_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TrunkBase"
        }
      ],
      "return": "TrunkBase"
    }
  },
  "textbots": {
    "GET /api/v2/textbots/bots/search": {
      "functionName": "get_textbots_bots_search",
      "signature": "get_textbots_bots_search(bot_type, bot_name, bot_id, page_size)",
      "parameters": [
        {
          "name": "bot_type",
          "type": "list[str]"
        },
        {
          "name": "bot_name",
          "type": "str"
        },
        {
          "name": "bot_id",
          "type": "list[str]"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "BotSearchResponseEntityListing"
    },
    "POST /api/v2/textbots/botflows/sessions/{sessionId}/turns": {
      "functionName": "post_textbots_botflows_session_turns",
      "signature": "post_textbots_botflows_session_turns(session_id, turn_request)",
      "parameters": [
        {
          "name": "session_id",
          "type": "str"
        },
        {
          "name": "turn_request",
          "type": "TextBotFlowTurnRequest"
        }
      ],
      "return": "TextBotFlowTurnResponse"
    },
    "POST /api/v2/textbots/botflows/sessions": {
      "functionName": "post_textbots_botflows_sessions",
      "signature": "post_textbots_botflows_sessions(launch_request)",
      "parameters": [
        {
          "name": "launch_request",
          "type": "TextBotFlowLaunchRequest"
        }
      ],
      "return": "TextBotFlowLaunchResponse"
    },
    "POST /api/v2/textbots/bots/execute": {
      "functionName": "post_textbots_bots_execute",
      "signature": "post_textbots_bots_execute(post_text_request)",
      "parameters": [
        {
          "name": "post_text_request",
          "type": "PostTextRequest"
        }
      ],
      "return": "PostTextResponse"
    }
  },
  "tokens": {
    "DELETE /api/v2/tokens/{userId}": {
      "functionName": "delete_token",
      "signature": "delete_token(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/tokens/me": {
      "functionName": "delete_tokens_me",
      "signature": "delete_tokens_me()"
    },
    "GET /api/v2/tokens/me": {
      "functionName": "get_tokens_me",
      "signature": "get_tokens_me()",
      "return": "TokenInfo"
    },
    "HEAD /api/v2/tokens/me": {
      "functionName": "head_tokens_me",
      "signature": "head_tokens_me()"
    }
  },
  "uploads": {
    "POST /api/v2/knowledge/documentuploads": {
      "functionName": "post_knowledge_documentuploads",
      "signature": "post_knowledge_documentuploads(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/uploads": {
      "functionName": "post_languageunderstanding_miner_uploads",
      "signature": "post_languageunderstanding_miner_uploads(miner_id, body)",
      "parameters": [
        {
          "name": "miner_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Empty"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/publicassets/images": {
      "functionName": "post_uploads_publicassets_images",
      "signature": "post_uploads_publicassets_images(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/recordings": {
      "functionName": "post_uploads_recordings",
      "signature": "post_uploads_recordings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/workforcemanagement/historicaldata/csv": {
      "functionName": "post_uploads_workforcemanagement_historicaldata_csv",
      "signature": "post_uploads_workforcemanagement_historicaldata_csv(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/workforcemanagement/historicaldata/json": {
      "functionName": "post_uploads_workforcemanagement_historicaldata_json",
      "signature": "post_uploads_workforcemanagement_historicaldata_json(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    }
  },
  "usage": {
    "GET /api/v2/usage/query/{executionId}/results": {
      "functionName": "get_usage_query_execution_id_results",
      "signature": "get_usage_query_execution_id_results(execution_id)",
      "parameters": [
        {
          "name": "execution_id",
          "type": "str"
        }
      ],
      "return": "ApiUsageQueryResult"
    },
    "POST /api/v2/usage/query": {
      "functionName": "post_usage_query",
      "signature": "post_usage_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ApiUsageQuery"
        }
      ],
      "return": "UsageExecutionResult"
    }
  },
  "userrecordings": {
    "DELETE /api/v2/userrecordings/{recordingId}": {
      "functionName": "delete_userrecording",
      "signature": "delete_userrecording(recording_id)",
      "parameters": [
        {
          "name": "recording_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/userrecordings/{recordingId}": {
      "functionName": "get_userrecording",
      "signature": "get_userrecording(recording_id, expand)",
      "parameters": [
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "UserRecording"
    },
    "GET /api/v2/userrecordings/{recordingId}/media": {
      "functionName": "get_userrecording_media",
      "signature": "get_userrecording_media(recording_id, format_id)",
      "parameters": [
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "format_id",
          "type": "str"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/userrecordings": {
      "functionName": "get_userrecordings",
      "signature": "get_userrecordings(page_size, page_number, expand)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "UserRecordingEntityListing"
    },
    "GET /api/v2/userrecordings/summary": {
      "functionName": "get_userrecordings_summary",
      "signature": "get_userrecordings_summary()",
      "return": "FaxSummary"
    },
    "PUT /api/v2/userrecordings/{recordingId}": {
      "functionName": "put_userrecording",
      "signature": "put_userrecording(recording_id, body, expand)",
      "parameters": [
        {
          "name": "recording_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRecording"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "UserRecording"
    }
  },
  "users": {
    "DELETE /api/v2/analytics/users/details/jobs/{jobId}": {
      "functionName": "delete_analytics_users_details_job",
      "signature": "delete_analytics_users_details_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "functionName": "delete_authorization_subject_division_role",
      "signature": "delete_authorization_subject_division_role(subject_id, division_id, role_id)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "role_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/routing/users/{userId}/utilization": {
      "functionName": "delete_routing_user_utilization",
      "signature": "delete_routing_user_utilization(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}": {
      "functionName": "delete_user",
      "signature": "delete_user(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "functionName": "delete_user_routinglanguage",
      "signature": "delete_user_routinglanguage(user_id, language_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "language_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routingskills/{skillId}": {
      "functionName": "delete_user_routingskill",
      "signature": "delete_user_routingskill(user_id, skill_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "skill_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/station/associatedstation": {
      "functionName": "delete_user_station_associatedstation",
      "signature": "delete_user_station_associatedstation(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/station/defaultstation": {
      "functionName": "delete_user_station_defaultstation",
      "signature": "delete_user_station_defaultstation(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}": {
      "functionName": "get_analytics_users_details_job",
      "signature": "get_analytics_users_details_job(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}/results": {
      "functionName": "get_analytics_users_details_job_results",
      "signature": "get_analytics_users_details_job_results(job_id, cursor, page_size)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        },
        {
          "name": "cursor",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "AnalyticsUserDetailsAsyncQueryResponse"
    },
    "GET /api/v2/analytics/users/details/jobs/availability": {
      "functionName": "get_analytics_users_details_jobs_availability",
      "signature": "get_analytics_users_details_jobs_availability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/authorization/divisionspermitted/me": {
      "functionName": "get_authorization_divisionspermitted_me",
      "signature": "get_authorization_divisionspermitted_me(permission, name)",
      "parameters": [
        {
          "name": "permission",
          "type": "str"
        },
        {
          "name": "name",
          "type": "str"
        }
      ],
      "return": "list[AuthzDivision]"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/me": {
      "functionName": "get_authorization_divisionspermitted_paged_me",
      "signature": "get_authorization_divisionspermitted_paged_me(permission, page_number, page_size)",
      "parameters": [
        {
          "name": "permission",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/{subjectId}": {
      "functionName": "get_authorization_divisionspermitted_paged_subject_id",
      "signature": "get_authorization_divisionspermitted_paged_subject_id(subject_id, permission, page_number, page_size)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "permission",
          "type": "str"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "page_size",
          "type": "int"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/subjects/{subjectId}": {
      "functionName": "get_authorization_subject",
      "signature": "get_authorization_subject(subject_id)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        }
      ],
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/me": {
      "functionName": "get_authorization_subjects_me",
      "signature": "get_authorization_subjects_me()",
      "return": "AuthzSubject"
    },
    "GET /api/v2/fieldconfig": {
      "functionName": "get_fieldconfig",
      "signature": "get_fieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "str"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/profiles/users": {
      "functionName": "get_profiles_users",
      "signature": "get_profiles_users(page_size, page_number, id, jid, sort_order, expand, integration_presence_source)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "jid",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "integration_presence_source",
          "type": "str"
        }
      ],
      "return": "UserProfileEntityListing"
    },
    "GET /api/v2/routing/users/{userId}/utilization": {
      "functionName": "get_routing_user_utilization",
      "signature": "get_routing_user_utilization(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "GET /api/v2/users/{userId}": {
      "functionName": "get_user",
      "signature": "get_user(user_id, expand, integration_presence_source, state)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "integration_presence_source",
          "type": "str"
        },
        {
          "name": "state",
          "type": "str"
        }
      ],
      "return": "User"
    },
    "GET /api/v2/users/{userId}/adjacents": {
      "functionName": "get_user_adjacents",
      "signature": "get_user_adjacents(user_id, expand)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "Adjacents"
    },
    "GET /api/v2/users/{userId}/callforwarding": {
      "functionName": "get_user_callforwarding",
      "signature": "get_user_callforwarding(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "CallForwarding"
    },
    "GET /api/v2/users/{userId}/directreports": {
      "functionName": "get_user_directreports",
      "signature": "get_user_directreports(user_id, expand)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "list[User]"
    },
    "GET /api/v2/users/{userId}/favorites": {
      "functionName": "get_user_favorites",
      "signature": "get_user_favorites(user_id, page_size, page_number, sort_order, expand)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/users/{userId}/geolocations/{clientId}": {
      "functionName": "get_user_geolocation",
      "signature": "get_user_geolocation(user_id, client_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "client_id",
          "type": "str"
        }
      ],
      "return": "Geolocation"
    },
    "GET /api/v2/users/{userId}/outofoffice": {
      "functionName": "get_user_outofoffice",
      "signature": "get_user_outofoffice(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "OutOfOffice"
    },
    "GET /api/v2/users/{userId}/profile": {
      "functionName": "get_user_profile",
      "signature": "get_user_profile(user_id, expand, integration_presence_source)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "integration_presence_source",
          "type": "str"
        }
      ],
      "return": "UserProfile"
    },
    "GET /api/v2/users/{userId}/profileskills": {
      "functionName": "get_user_profileskills",
      "signature": "get_user_profileskills(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "list[str]"
    },
    "GET /api/v2/users/{userId}/queues": {
      "functionName": "get_user_queues",
      "signature": "get_user_queues(user_id, page_size, page_number, joined, division_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "joined",
          "type": "bool"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/users/{userId}/roles": {
      "functionName": "get_user_roles",
      "signature": "get_user_roles(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "UserAuthorization"
    },
    "GET /api/v2/users/{userId}/routinglanguages": {
      "functionName": "get_user_routinglanguages",
      "signature": "get_user_routinglanguages(user_id, page_size, page_number, sort_order)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "GET /api/v2/users/{userId}/routingskills": {
      "functionName": "get_user_routingskills",
      "signature": "get_user_routingskills(user_id, page_size, page_number, sort_order)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "GET /api/v2/users/{userId}/routingstatus": {
      "functionName": "get_user_routingstatus",
      "signature": "get_user_routingstatus(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "RoutingStatus"
    },
    "GET /api/v2/users/{userId}/state": {
      "functionName": "get_user_state",
      "signature": "get_user_state(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "UserState"
    },
    "GET /api/v2/users/{userId}/station": {
      "functionName": "get_user_station",
      "signature": "get_user_station(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "UserStations"
    },
    "GET /api/v2/users/{userId}/superiors": {
      "functionName": "get_user_superiors",
      "signature": "get_user_superiors(user_id, expand)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "list[User]"
    },
    "GET /api/v2/users/{userId}/trustors": {
      "functionName": "get_user_trustors",
      "signature": "get_user_trustors(user_id, page_size, page_number)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "TrustorEntityListing"
    },
    "GET /api/v2/users": {
      "functionName": "get_users",
      "signature": "get_users(page_size, page_number, id, jabber_id, sort_order, expand, integration_presence_source, state)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "id",
          "type": "list[str]"
        },
        {
          "name": "jabber_id",
          "type": "list[str]"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "integration_presence_source",
          "type": "str"
        },
        {
          "name": "state",
          "type": "str"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/users/development/activities": {
      "functionName": "get_users_development_activities",
      "signature": "get_users_development_activities(user_id, module_id, interval, completion_interval, overdue, page_size, page_number, sort_order, types, statuses, relationship)",
      "parameters": [
        {
          "name": "user_id",
          "type": "list[str]"
        },
        {
          "name": "module_id",
          "type": "str"
        },
        {
          "name": "interval",
          "type": "str"
        },
        {
          "name": "completion_interval",
          "type": "str"
        },
        {
          "name": "overdue",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "types",
          "type": "list[str]"
        },
        {
          "name": "statuses",
          "type": "list[str]"
        },
        {
          "name": "relationship",
          "type": "list[str]"
        }
      ],
      "return": "DevelopmentActivityListing"
    },
    "GET /api/v2/users/development/activities/me": {
      "functionName": "get_users_development_activities_me",
      "signature": "get_users_development_activities_me(module_id, interval, completion_interval, overdue, page_size, page_number, sort_order, types, statuses, relationship)",
      "parameters": [
        {
          "name": "module_id",
          "type": "str"
        },
        {
          "name": "interval",
          "type": "str"
        },
        {
          "name": "completion_interval",
          "type": "str"
        },
        {
          "name": "overdue",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "types",
          "type": "list[str]"
        },
        {
          "name": "statuses",
          "type": "list[str]"
        },
        {
          "name": "relationship",
          "type": "list[str]"
        }
      ],
      "return": "DevelopmentActivityListing"
    },
    "GET /api/v2/users/development/activities/{activityId}": {
      "functionName": "get_users_development_activity",
      "signature": "get_users_development_activity(activity_id, type)",
      "parameters": [
        {
          "name": "activity_id",
          "type": "str"
        },
        {
          "name": "type",
          "type": "str"
        }
      ],
      "return": "DevelopmentActivity"
    },
    "GET /api/v2/users/me": {
      "functionName": "get_users_me",
      "signature": "get_users_me(expand, integration_presence_source)",
      "parameters": [
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "integration_presence_source",
          "type": "str"
        }
      ],
      "return": "UserMe"
    },
    "GET /api/v2/users/search": {
      "functionName": "get_users_search",
      "signature": "get_users_search(q64, expand, integration_presence_source)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        },
        {
          "name": "integration_presence_source",
          "type": "str"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "PATCH /api/v2/users/{userId}": {
      "functionName": "patch_user",
      "signature": "patch_user(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateUser"
        }
      ],
      "return": "User"
    },
    "PATCH /api/v2/users/{userId}/callforwarding": {
      "functionName": "patch_user_callforwarding",
      "signature": "patch_user_callforwarding(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CallForwarding"
        }
      ],
      "return": "CallForwarding"
    },
    "PATCH /api/v2/users/{userId}/geolocations/{clientId}": {
      "functionName": "patch_user_geolocation",
      "signature": "patch_user_geolocation(user_id, client_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "client_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Geolocation"
        }
      ],
      "return": "Geolocation"
    },
    "PATCH /api/v2/users/{userId}/queues/{queueId}": {
      "functionName": "patch_user_queue",
      "signature": "patch_user_queue(queue_id, user_id, body)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserQueue"
        }
      ],
      "return": "UserQueue"
    },
    "PATCH /api/v2/users/{userId}/queues": {
      "functionName": "patch_user_queues",
      "signature": "patch_user_queues(user_id, body, division_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[UserQueue]"
        },
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "functionName": "patch_user_routinglanguage",
      "signature": "patch_user_routinglanguage(user_id, language_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "language_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRoutingLanguage"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/bulk": {
      "functionName": "patch_user_routinglanguages_bulk",
      "signature": "patch_user_routinglanguages_bulk(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[UserRoutingLanguagePost]"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routingskills/bulk": {
      "functionName": "patch_user_routingskills_bulk",
      "signature": "patch_user_routingskills_bulk(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[UserRoutingSkillPost]"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PATCH /api/v2/users/bulk": {
      "functionName": "patch_users_bulk",
      "signature": "patch_users_bulk(body)",
      "parameters": [
        {
          "name": "body",
          "type": "list[PatchUser]"
        }
      ],
      "return": "UserEntityListing"
    },
    "POST /api/v2/analytics/users/aggregates/query": {
      "functionName": "post_analytics_users_aggregates_query",
      "signature": "post_analytics_users_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserAggregationQuery"
        }
      ],
      "return": "UserAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/details/jobs": {
      "functionName": "post_analytics_users_details_jobs",
      "signature": "post_analytics_users_details_jobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AsyncUserDetailsQuery"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/users/details/query": {
      "functionName": "post_analytics_users_details_query",
      "signature": "post_analytics_users_details_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserDetailsQuery"
        }
      ],
      "return": "AnalyticsUserDetailsQueryResponse"
    },
    "POST /api/v2/analytics/users/observations/query": {
      "functionName": "post_analytics_users_observations_query",
      "signature": "post_analytics_users_observations_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserObservationQuery"
        }
      ],
      "return": "UserObservationQueryResponse"
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkadd": {
      "functionName": "post_authorization_subject_bulkadd",
      "signature": "post_authorization_subject_bulkadd(subject_id, body, subject_type)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        },
        {
          "name": "subject_type",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkremove": {
      "functionName": "post_authorization_subject_bulkremove",
      "signature": "post_authorization_subject_bulkremove(subject_id, body)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkreplace": {
      "functionName": "post_authorization_subject_bulkreplace",
      "signature": "post_authorization_subject_bulkreplace(subject_id, body, subject_type)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        },
        {
          "name": "subject_type",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "functionName": "post_authorization_subject_division_role",
      "signature": "post_authorization_subject_division_role(subject_id, division_id, role_id, subject_type)",
      "parameters": [
        {
          "name": "subject_id",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "str"
        },
        {
          "name": "role_id",
          "type": "str"
        },
        {
          "name": "subject_type",
          "type": "str"
        }
      ]
    },
    "POST /api/v2/users/{userId}/invite": {
      "functionName": "post_user_invite",
      "signature": "post_user_invite(user_id, force)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "force",
          "type": "bool"
        }
      ]
    },
    "POST /api/v2/users/{userId}/password": {
      "functionName": "post_user_password",
      "signature": "post_user_password(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "ChangePasswordRequest"
        }
      ]
    },
    "POST /api/v2/users/{userId}/routinglanguages": {
      "functionName": "post_user_routinglanguages",
      "signature": "post_user_routinglanguages(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRoutingLanguagePost"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "POST /api/v2/users/{userId}/routingskills": {
      "functionName": "post_user_routingskills",
      "signature": "post_user_routingskills(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRoutingSkillPost"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "POST /api/v2/users": {
      "functionName": "post_users",
      "signature": "post_users(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateUser"
        }
      ],
      "return": "User"
    },
    "POST /api/v2/users/development/activities/aggregates/query": {
      "functionName": "post_users_development_activities_aggregates_query",
      "signature": "post_users_development_activities_aggregates_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DevelopmentActivityAggregateParam"
        }
      ],
      "return": "DevelopmentActivityAggregateResponse"
    },
    "POST /api/v2/users/me/password": {
      "functionName": "post_users_me_password",
      "signature": "post_users_me_password(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ChangeMyPasswordRequest"
        }
      ]
    },
    "POST /api/v2/users/search": {
      "functionName": "post_users_search",
      "signature": "post_users_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserSearchRequest"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "PUT /api/v2/routing/users/{userId}/utilization": {
      "functionName": "put_routing_user_utilization",
      "signature": "put_routing_user_utilization(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "Utilization"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "PUT /api/v2/users/{userId}/callforwarding": {
      "functionName": "put_user_callforwarding",
      "signature": "put_user_callforwarding(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CallForwarding"
        }
      ],
      "return": "CallForwarding"
    },
    "PUT /api/v2/users/{userId}/outofoffice": {
      "functionName": "put_user_outofoffice",
      "signature": "put_user_outofoffice(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "OutOfOffice"
        }
      ],
      "return": "OutOfOffice"
    },
    "PUT /api/v2/users/{userId}/profileskills": {
      "functionName": "put_user_profileskills",
      "signature": "put_user_profileskills(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "list[str]"
    },
    "PUT /api/v2/users/{userId}/roles": {
      "functionName": "put_user_roles",
      "signature": "put_user_roles(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[str]"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/users/{userId}/routingskills/{skillId}": {
      "functionName": "put_user_routingskill",
      "signature": "put_user_routingskill(user_id, skill_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "skill_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserRoutingSkill"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/users/{userId}/routingskills/bulk": {
      "functionName": "put_user_routingskills_bulk",
      "signature": "put_user_routingskills_bulk(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "list[UserRoutingSkillPost]"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PUT /api/v2/users/{userId}/routingstatus": {
      "functionName": "put_user_routingstatus",
      "signature": "put_user_routingstatus(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "RoutingStatus"
        }
      ],
      "return": "RoutingStatus"
    },
    "PUT /api/v2/users/{userId}/state": {
      "functionName": "put_user_state",
      "signature": "put_user_state(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserState"
        }
      ],
      "return": "UserState"
    },
    "PUT /api/v2/users/{userId}/station/associatedstation/{stationId}": {
      "functionName": "put_user_station_associatedstation_station_id",
      "signature": "put_user_station_associatedstation_station_id(user_id, station_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "station_id",
          "type": "str"
        }
      ]
    },
    "PUT /api/v2/users/{userId}/station/defaultstation/{stationId}": {
      "functionName": "put_user_station_defaultstation_station_id",
      "signature": "put_user_station_defaultstation_station_id(user_id, station_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "station_id",
          "type": "str"
        }
      ]
    }
  },
  "utilities": {
    "GET /api/v2/date": {
      "functionName": "get_date",
      "signature": "get_date()",
      "return": "ServerDate"
    },
    "GET /api/v2/ipranges": {
      "functionName": "get_ipranges",
      "signature": "get_ipranges()",
      "return": "IpAddressRangeListing"
    },
    "GET /api/v2/timezones": {
      "functionName": "get_timezones",
      "signature": "get_timezones(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "TimeZoneEntityListing"
    },
    "POST /api/v2/certificate/details": {
      "functionName": "post_certificate_details",
      "signature": "post_certificate_details(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Certificate"
        }
      ],
      "return": "ParsedCertificate"
    }
  },
  "voicemail": {
    "DELETE /api/v2/voicemail/messages/{messageId}": {
      "functionName": "delete_voicemail_message",
      "signature": "delete_voicemail_message(message_id)",
      "parameters": [
        {
          "name": "message_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/voicemail/messages": {
      "functionName": "delete_voicemail_messages",
      "signature": "delete_voicemail_messages()"
    },
    "GET /api/v2/voicemail/groups/{groupId}/mailbox": {
      "functionName": "get_voicemail_group_mailbox",
      "signature": "get_voicemail_group_mailbox(group_id)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        }
      ],
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/groups/{groupId}/messages": {
      "functionName": "get_voicemail_group_messages",
      "signature": "get_voicemail_group_messages(group_id, page_size, page_number)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/groups/{groupId}/policy": {
      "functionName": "get_voicemail_group_policy",
      "signature": "get_voicemail_group_policy(group_id)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        }
      ],
      "return": "VoicemailGroupPolicy"
    },
    "GET /api/v2/voicemail/mailbox": {
      "functionName": "get_voicemail_mailbox",
      "signature": "get_voicemail_mailbox()",
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/me/mailbox": {
      "functionName": "get_voicemail_me_mailbox",
      "signature": "get_voicemail_me_mailbox()",
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/me/messages": {
      "functionName": "get_voicemail_me_messages",
      "signature": "get_voicemail_me_messages(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/me/policy": {
      "functionName": "get_voicemail_me_policy",
      "signature": "get_voicemail_me_policy()",
      "return": "VoicemailUserPolicy"
    },
    "GET /api/v2/voicemail/messages/{messageId}": {
      "functionName": "get_voicemail_message",
      "signature": "get_voicemail_message(message_id, expand)",
      "parameters": [
        {
          "name": "message_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "VoicemailMessage"
    },
    "GET /api/v2/voicemail/messages/{messageId}/media": {
      "functionName": "get_voicemail_message_media",
      "signature": "get_voicemail_message_media(message_id, format_id)",
      "parameters": [
        {
          "name": "message_id",
          "type": "str"
        },
        {
          "name": "format_id",
          "type": "str"
        }
      ],
      "return": "VoicemailMediaInfo"
    },
    "GET /api/v2/voicemail/messages": {
      "functionName": "get_voicemail_messages",
      "signature": "get_voicemail_messages(ids, expand)",
      "parameters": [
        {
          "name": "ids",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/policy": {
      "functionName": "get_voicemail_policy",
      "signature": "get_voicemail_policy()",
      "return": "VoicemailOrganizationPolicy"
    },
    "GET /api/v2/voicemail/queues/{queueId}/messages": {
      "functionName": "get_voicemail_queue_messages",
      "signature": "get_voicemail_queue_messages(queue_id, page_size, page_number)",
      "parameters": [
        {
          "name": "queue_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/search": {
      "functionName": "get_voicemail_search",
      "signature": "get_voicemail_search(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "GET /api/v2/voicemail/userpolicies/{userId}": {
      "functionName": "get_voicemail_userpolicy",
      "signature": "get_voicemail_userpolicy(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "PATCH /api/v2/voicemail/groups/{groupId}/policy": {
      "functionName": "patch_voicemail_group_policy",
      "signature": "patch_voicemail_group_policy(group_id, body)",
      "parameters": [
        {
          "name": "group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "VoicemailGroupPolicy"
        }
      ],
      "return": "VoicemailGroupPolicy"
    },
    "PATCH /api/v2/voicemail/me/policy": {
      "functionName": "patch_voicemail_me_policy",
      "signature": "patch_voicemail_me_policy(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VoicemailUserPolicy"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "PATCH /api/v2/voicemail/messages/{messageId}": {
      "functionName": "patch_voicemail_message",
      "signature": "patch_voicemail_message(message_id, body)",
      "parameters": [
        {
          "name": "message_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "VoicemailMessage"
        }
      ],
      "return": "VoicemailMessage"
    },
    "PATCH /api/v2/voicemail/userpolicies/{userId}": {
      "functionName": "patch_voicemail_userpolicy",
      "signature": "patch_voicemail_userpolicy(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "VoicemailUserPolicy"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "POST /api/v2/voicemail/messages": {
      "functionName": "post_voicemail_messages",
      "signature": "post_voicemail_messages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CopyVoicemailMessage"
        }
      ],
      "return": "VoicemailMessage"
    },
    "POST /api/v2/voicemail/search": {
      "functionName": "post_voicemail_search",
      "signature": "post_voicemail_search(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VoicemailSearchRequest"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "PUT /api/v2/voicemail/messages/{messageId}": {
      "functionName": "put_voicemail_message",
      "signature": "put_voicemail_message(message_id, body)",
      "parameters": [
        {
          "name": "message_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "VoicemailMessage"
        }
      ],
      "return": "VoicemailMessage"
    },
    "PUT /api/v2/voicemail/policy": {
      "functionName": "put_voicemail_policy",
      "signature": "put_voicemail_policy(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VoicemailOrganizationPolicy"
        }
      ],
      "return": "VoicemailOrganizationPolicy"
    },
    "PUT /api/v2/voicemail/userpolicies/{userId}": {
      "functionName": "put_voicemail_userpolicy",
      "signature": "put_voicemail_userpolicy(user_id, body)",
      "parameters": [
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "VoicemailUserPolicy"
        }
      ],
      "return": "VoicemailUserPolicy"
    }
  },
  "webchat": {
    "DELETE /api/v2/webchat/deployments/{deploymentId}": {
      "functionName": "delete_webchat_deployment",
      "signature": "delete_webchat_deployment(deployment_id)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}": {
      "functionName": "delete_webchat_guest_conversation_member",
      "signature": "delete_webchat_guest_conversation_member(conversation_id, member_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/webchat/settings": {
      "functionName": "delete_webchat_settings",
      "signature": "delete_webchat_settings()"
    },
    "GET /api/v2/webchat/deployments/{deploymentId}": {
      "functionName": "get_webchat_deployment",
      "signature": "get_webchat_deployment(deployment_id)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        }
      ],
      "return": "WebChatDeployment"
    },
    "GET /api/v2/webchat/deployments": {
      "functionName": "get_webchat_deployments",
      "signature": "get_webchat_deployments()",
      "return": "WebChatDeploymentEntityListing"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}": {
      "functionName": "get_webchat_guest_conversation_mediarequest",
      "signature": "get_webchat_guest_conversation_mediarequest(conversation_id, media_request_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "media_request_id",
          "type": "str"
        }
      ],
      "return": "WebChatGuestMediaRequest"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests": {
      "functionName": "get_webchat_guest_conversation_mediarequests",
      "signature": "get_webchat_guest_conversation_mediarequests(conversation_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        }
      ],
      "return": "WebChatGuestMediaRequestEntityList"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}": {
      "functionName": "get_webchat_guest_conversation_member",
      "signature": "get_webchat_guest_conversation_member(conversation_id, member_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        }
      ],
      "return": "WebChatMemberInfo"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/members": {
      "functionName": "get_webchat_guest_conversation_members",
      "signature": "get_webchat_guest_conversation_members(conversation_id, page_size, page_number, exclude_disconnected_members)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "exclude_disconnected_members",
          "type": "bool"
        }
      ],
      "return": "WebChatMemberInfoEntityList"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}": {
      "functionName": "get_webchat_guest_conversation_message",
      "signature": "get_webchat_guest_conversation_message(conversation_id, message_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "message_id",
          "type": "str"
        }
      ],
      "return": "WebChatMessage"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/messages": {
      "functionName": "get_webchat_guest_conversation_messages",
      "signature": "get_webchat_guest_conversation_messages(conversation_id, after, before, sort_order, max_results)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "after",
          "type": "str"
        },
        {
          "name": "before",
          "type": "str"
        },
        {
          "name": "sort_order",
          "type": "str"
        },
        {
          "name": "max_results",
          "type": "int"
        }
      ],
      "return": "WebChatMessageEntityList"
    },
    "GET /api/v2/webchat/settings": {
      "functionName": "get_webchat_settings",
      "signature": "get_webchat_settings()",
      "return": "WebChatSettings"
    },
    "PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}": {
      "functionName": "patch_webchat_guest_conversation_mediarequest",
      "signature": "patch_webchat_guest_conversation_mediarequest(conversation_id, media_request_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "media_request_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WebChatGuestMediaRequest"
        }
      ],
      "return": "WebChatGuestMediaRequest"
    },
    "POST /api/v2/webchat/deployments": {
      "functionName": "post_webchat_deployments",
      "signature": "post_webchat_deployments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WebChatDeployment"
        }
      ],
      "return": "WebChatDeployment"
    },
    "POST /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/messages": {
      "functionName": "post_webchat_guest_conversation_member_messages",
      "signature": "post_webchat_guest_conversation_member_messages(conversation_id, member_id, body)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateWebChatMessageRequest"
        }
      ],
      "return": "WebChatMessage"
    },
    "POST /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/typing": {
      "functionName": "post_webchat_guest_conversation_member_typing",
      "signature": "post_webchat_guest_conversation_member_typing(conversation_id, member_id)",
      "parameters": [
        {
          "name": "conversation_id",
          "type": "str"
        },
        {
          "name": "member_id",
          "type": "str"
        }
      ],
      "return": "WebChatTyping"
    },
    "POST /api/v2/webchat/guest/conversations": {
      "functionName": "post_webchat_guest_conversations",
      "signature": "post_webchat_guest_conversations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateWebChatConversationRequest"
        }
      ],
      "return": "CreateWebChatConversationResponse"
    },
    "PUT /api/v2/webchat/deployments/{deploymentId}": {
      "functionName": "put_webchat_deployment",
      "signature": "put_webchat_deployment(deployment_id, body)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WebChatDeployment"
        }
      ],
      "return": "WebChatDeployment"
    },
    "PUT /api/v2/webchat/settings": {
      "functionName": "put_webchat_settings",
      "signature": "put_webchat_settings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WebChatSettings"
        }
      ],
      "return": "WebChatSettings"
    }
  },
  "webdeployments": {
    "DELETE /api/v2/webdeployments/configurations/{configurationId}": {
      "functionName": "delete_webdeployments_configuration",
      "signature": "delete_webdeployments_configuration(configuration_id)",
      "parameters": [
        {
          "name": "configuration_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/webdeployments/deployments/{deploymentId}": {
      "functionName": "delete_webdeployments_deployment",
      "signature": "delete_webdeployments_deployment(deployment_id)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions/{versionId}": {
      "functionName": "get_webdeployments_configuration_version",
      "signature": "get_webdeployments_configuration_version(configuration_id, version_id)",
      "parameters": [
        {
          "name": "configuration_id",
          "type": "str"
        },
        {
          "name": "version_id",
          "type": "str"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions": {
      "functionName": "get_webdeployments_configuration_versions",
      "signature": "get_webdeployments_configuration_versions(configuration_id)",
      "parameters": [
        {
          "name": "configuration_id",
          "type": "str"
        }
      ],
      "return": "WebDeploymentConfigurationVersionEntityListing"
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions/draft": {
      "functionName": "get_webdeployments_configuration_versions_draft",
      "signature": "get_webdeployments_configuration_versions_draft(configuration_id)",
      "parameters": [
        {
          "name": "configuration_id",
          "type": "str"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "GET /api/v2/webdeployments/configurations": {
      "functionName": "get_webdeployments_configurations",
      "signature": "get_webdeployments_configurations(show_only_published)",
      "parameters": [
        {
          "name": "show_only_published",
          "type": "bool"
        }
      ],
      "return": "WebDeploymentConfigurationVersionEntityListing"
    },
    "GET /api/v2/webdeployments/deployments/{deploymentId}": {
      "functionName": "get_webdeployments_deployment",
      "signature": "get_webdeployments_deployment(deployment_id)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        }
      ],
      "return": "WebDeployment"
    },
    "GET /api/v2/webdeployments/deployments": {
      "functionName": "get_webdeployments_deployments",
      "signature": "get_webdeployments_deployments()",
      "return": "WebDeploymentEntityListing"
    },
    "POST /api/v2/webdeployments/configurations/{configurationId}/versions/draft/publish": {
      "functionName": "post_webdeployments_configuration_versions_draft_publish",
      "signature": "post_webdeployments_configuration_versions_draft_publish(configuration_id)",
      "parameters": [
        {
          "name": "configuration_id",
          "type": "str"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "POST /api/v2/webdeployments/configurations": {
      "functionName": "post_webdeployments_configurations",
      "signature": "post_webdeployments_configurations(configuration_version)",
      "parameters": [
        {
          "name": "configuration_version",
          "type": "WebDeploymentConfigurationVersion"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "POST /api/v2/webdeployments/deployments": {
      "functionName": "post_webdeployments_deployments",
      "signature": "post_webdeployments_deployments(deployment)",
      "parameters": [
        {
          "name": "deployment",
          "type": "WebDeployment"
        }
      ],
      "return": "WebDeployment"
    },
    "PUT /api/v2/webdeployments/configurations/{configurationId}/versions/draft": {
      "functionName": "put_webdeployments_configuration_versions_draft",
      "signature": "put_webdeployments_configuration_versions_draft(configuration_id, configuration_version)",
      "parameters": [
        {
          "name": "configuration_id",
          "type": "str"
        },
        {
          "name": "configuration_version",
          "type": "WebDeploymentConfigurationVersion"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "PUT /api/v2/webdeployments/deployments/{deploymentId}": {
      "functionName": "put_webdeployments_deployment",
      "signature": "put_webdeployments_deployment(deployment_id, deployment)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        },
        {
          "name": "deployment",
          "type": "WebDeployment"
        }
      ],
      "return": "WebDeployment"
    }
  },
  "webmessaging": {
    "GET /api/v2/webmessaging/messages": {
      "functionName": "get_webmessaging_messages",
      "signature": "get_webmessaging_messages(page_size, page_number)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        }
      ],
      "return": "WebMessagingMessageEntityList"
    }
  },
  "widgets": {
    "DELETE /api/v2/widgets/deployments/{deploymentId}": {
      "functionName": "delete_widgets_deployment",
      "signature": "delete_widgets_deployment(deployment_id)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/widgets/deployments/{deploymentId}": {
      "functionName": "get_widgets_deployment",
      "signature": "get_widgets_deployment(deployment_id)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        }
      ],
      "return": "WidgetDeployment"
    },
    "GET /api/v2/widgets/deployments": {
      "functionName": "get_widgets_deployments",
      "signature": "get_widgets_deployments()",
      "return": "WidgetDeploymentEntityListing"
    },
    "POST /api/v2/widgets/deployments": {
      "functionName": "post_widgets_deployments",
      "signature": "post_widgets_deployments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WidgetDeployment"
        }
      ],
      "return": "WidgetDeployment"
    },
    "PUT /api/v2/widgets/deployments/{deploymentId}": {
      "functionName": "put_widgets_deployment",
      "signature": "put_widgets_deployment(deployment_id, body)",
      "parameters": [
        {
          "name": "deployment_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WidgetDeployment"
        }
      ],
      "return": "WidgetDeployment"
    }
  },
  "workforcemanagement": {
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "functionName": "delete_workforcemanagement_businessunit",
      "signature": "delete_workforcemanagement_businessunit(business_unit_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "functionName": "delete_workforcemanagement_businessunit_activitycode",
      "signature": "delete_workforcemanagement_businessunit_activitycode(business_unit_id, activity_code_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "activity_code_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "functionName": "delete_workforcemanagement_businessunit_planninggroup",
      "signature": "delete_workforcemanagement_businessunit_planninggroup(business_unit_id, planning_group_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "planning_group_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "functionName": "delete_workforcemanagement_businessunit_scheduling_run",
      "signature": "delete_workforcemanagement_businessunit_scheduling_run(business_unit_id, run_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "run_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "functionName": "delete_workforcemanagement_businessunit_servicegoaltemplate",
      "signature": "delete_workforcemanagement_businessunit_servicegoaltemplate(business_unit_id, service_goal_template_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "service_goal_template_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "functionName": "delete_workforcemanagement_businessunit_week_schedule",
      "signature": "delete_workforcemanagement_businessunit_week_schedule(business_unit_id, week_id, schedule_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "schedule_id",
          "type": "str"
        }
      ],
      "return": "BuAsyncScheduleResponse"
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}": {
      "functionName": "delete_workforcemanagement_businessunit_week_shorttermforecast",
      "signature": "delete_workforcemanagement_businessunit_week_shorttermforecast(business_unit_id, week_date_id, forecast_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "forecast_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/calendar/url/ics": {
      "functionName": "delete_workforcemanagement_calendar_url_ics",
      "signature": "delete_workforcemanagement_calendar_url_ics()"
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "functionName": "delete_workforcemanagement_managementunit",
      "signature": "delete_workforcemanagement_managementunit(management_unit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "functionName": "delete_workforcemanagement_managementunit_timeofflimit",
      "signature": "delete_workforcemanagement_managementunit_timeofflimit(management_unit_id, time_off_limit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "time_off_limit_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "functionName": "delete_workforcemanagement_managementunit_timeoffplan",
      "signature": "delete_workforcemanagement_managementunit_timeoffplan(management_unit_id, time_off_plan_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "time_off_plan_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "functionName": "delete_workforcemanagement_managementunit_workplan",
      "signature": "delete_workforcemanagement_managementunit_workplan(management_unit_id, work_plan_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_id",
          "type": "str"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "functionName": "delete_workforcemanagement_managementunit_workplanrotation",
      "signature": "delete_workforcemanagement_managementunit_workplanrotation(management_unit_id, work_plan_rotation_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_rotation_id",
          "type": "str"
        }
      ]
    },
    "GET /api/v2/workforcemanagement/adherence": {
      "functionName": "get_workforcemanagement_adherence",
      "signature": "get_workforcemanagement_adherence(user_id)",
      "parameters": [
        {
          "name": "user_id",
          "type": "list[str]"
        }
      ],
      "return": "list[UserScheduleAdherence]"
    },
    "GET /api/v2/workforcemanagement/adhocmodelingjobs/{jobId}": {
      "functionName": "get_workforcemanagement_adhocmodelingjob",
      "signature": "get_workforcemanagement_adhocmodelingjob(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "ModelingStatusResponse"
    },
    "GET /api/v2/workforcemanagement/agents/{agentId}/managementunit": {
      "functionName": "get_workforcemanagement_agent_managementunit",
      "signature": "get_workforcemanagement_agent_managementunit(agent_id)",
      "parameters": [
        {
          "name": "agent_id",
          "type": "str"
        }
      ],
      "return": "AgentManagementUnitReference"
    },
    "GET /api/v2/workforcemanagement/agents/me/managementunit": {
      "functionName": "get_workforcemanagement_agents_me_managementunit",
      "signature": "get_workforcemanagement_agents_me_managementunit()",
      "return": "AgentManagementUnitReference"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "functionName": "get_workforcemanagement_businessunit",
      "signature": "get_workforcemanagement_businessunit(business_unit_id, expand)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "BusinessUnit"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "functionName": "get_workforcemanagement_businessunit_activitycode",
      "signature": "get_workforcemanagement_businessunit_activitycode(business_unit_id, activity_code_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "activity_code_id",
          "type": "str"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes": {
      "functionName": "get_workforcemanagement_businessunit_activitycodes",
      "signature": "get_workforcemanagement_businessunit_activitycodes(business_unit_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        }
      ],
      "return": "BusinessUnitActivityCodeListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups": {
      "functionName": "get_workforcemanagement_businessunit_intraday_planninggroups",
      "signature": "get_workforcemanagement_businessunit_intraday_planninggroups(business_unit_id, date)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "date",
          "type": "date"
        }
      ],
      "return": "WfmIntradayPlanningGroupListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits": {
      "functionName": "get_workforcemanagement_businessunit_managementunits",
      "signature": "get_workforcemanagement_businessunit_managementunits(business_unit_id, feature, division_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "feature",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "str"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "functionName": "get_workforcemanagement_businessunit_planninggroup",
      "signature": "get_workforcemanagement_businessunit_planninggroup(business_unit_id, planning_group_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "planning_group_id",
          "type": "str"
        }
      ],
      "return": "PlanningGroup"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups": {
      "functionName": "get_workforcemanagement_businessunit_planninggroups",
      "signature": "get_workforcemanagement_businessunit_planninggroups(business_unit_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        }
      ],
      "return": "PlanningGroupList"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "functionName": "get_workforcemanagement_businessunit_scheduling_run",
      "signature": "get_workforcemanagement_businessunit_scheduling_run(business_unit_id, run_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "run_id",
          "type": "str"
        }
      ],
      "return": "BuScheduleRun"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result": {
      "functionName": "get_workforcemanagement_businessunit_scheduling_run_result",
      "signature": "get_workforcemanagement_businessunit_scheduling_run_result(business_unit_id, run_id, management_unit_ids, expand)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "run_id",
          "type": "str"
        },
        {
          "name": "management_unit_ids",
          "type": "list[str]"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "BuRescheduleResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs": {
      "functionName": "get_workforcemanagement_businessunit_scheduling_runs",
      "signature": "get_workforcemanagement_businessunit_scheduling_runs(business_unit_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        }
      ],
      "return": "BuScheduleRunListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "functionName": "get_workforcemanagement_businessunit_servicegoaltemplate",
      "signature": "get_workforcemanagement_businessunit_servicegoaltemplate(business_unit_id, service_goal_template_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "service_goal_template_id",
          "type": "str"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates": {
      "functionName": "get_workforcemanagement_businessunit_servicegoaltemplates",
      "signature": "get_workforcemanagement_businessunit_servicegoaltemplates(business_unit_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        }
      ],
      "return": "ServiceGoalTemplateList"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "functionName": "get_workforcemanagement_businessunit_week_schedule",
      "signature": "get_workforcemanagement_businessunit_week_schedule(business_unit_id, week_id, schedule_id, expand)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "BuScheduleMetadata"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults": {
      "functionName": "get_workforcemanagement_businessunit_week_schedule_generationresults",
      "signature": "get_workforcemanagement_businessunit_week_schedule_generationresults(business_unit_id, week_id, schedule_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "schedule_id",
          "type": "str"
        }
      ],
      "return": "ScheduleGenerationResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast": {
      "functionName": "get_workforcemanagement_businessunit_week_schedule_headcountforecast",
      "signature": "get_workforcemanagement_businessunit_week_schedule_headcountforecast(business_unit_id, week_id, schedule_id, force_download)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "force_download",
          "type": "bool"
        }
      ],
      "return": "BuHeadcountForecastResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}": {
      "functionName": "get_workforcemanagement_businessunit_week_schedule_history_agent",
      "signature": "get_workforcemanagement_businessunit_week_schedule_history_agent(business_unit_id, week_id, schedule_id, agent_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "agent_id",
          "type": "str"
        }
      ],
      "return": "BuAgentScheduleHistoryResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules": {
      "functionName": "get_workforcemanagement_businessunit_week_schedules",
      "signature": "get_workforcemanagement_businessunit_week_schedules(business_unit_id, week_id, include_only_published, expand)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "str"
        },
        {
          "name": "include_only_published",
          "type": "bool"
        },
        {
          "name": "expand",
          "type": "str"
        }
      ],
      "return": "BuScheduleListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}": {
      "functionName": "get_workforcemanagement_businessunit_week_shorttermforecast",
      "signature": "get_workforcemanagement_businessunit_week_shorttermforecast(business_unit_id, week_date_id, forecast_id, expand)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "forecast_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "BuShortTermForecast"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data": {
      "functionName": "get_workforcemanagement_businessunit_week_shorttermforecast_data",
      "signature": "get_workforcemanagement_businessunit_week_shorttermforecast_data(business_unit_id, week_date_id, forecast_id, week_number, force_download_service)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "forecast_id",
          "type": "str"
        },
        {
          "name": "week_number",
          "type": "int"
        },
        {
          "name": "force_download_service",
          "type": "bool"
        }
      ],
      "return": "BuForecastResultResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults": {
      "functionName": "get_workforcemanagement_businessunit_week_shorttermforecast_generationresults",
      "signature": "get_workforcemanagement_businessunit_week_shorttermforecast_generationresults(business_unit_id, week_date_id, forecast_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "forecast_id",
          "type": "str"
        }
      ],
      "return": "BuForecastGenerationResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/longtermforecastdata": {
      "functionName": "get_workforcemanagement_businessunit_week_shorttermforecast_longtermforecastdata",
      "signature": "get_workforcemanagement_businessunit_week_shorttermforecast_longtermforecastdata(business_unit_id, week_date_id, forecast_id, force_download_service)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "forecast_id",
          "type": "str"
        },
        {
          "name": "force_download_service",
          "type": "bool"
        }
      ],
      "return": "LongTermForecastResultResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups": {
      "functionName": "get_workforcemanagement_businessunit_week_shorttermforecast_planninggroups",
      "signature": "get_workforcemanagement_businessunit_week_shorttermforecast_planninggroups(business_unit_id, week_date_id, forecast_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "forecast_id",
          "type": "str"
        }
      ],
      "return": "ForecastPlanningGroupsResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts": {
      "functionName": "get_workforcemanagement_businessunit_week_shorttermforecasts",
      "signature": "get_workforcemanagement_businessunit_week_shorttermforecasts(business_unit_id, week_date_id)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "str"
        }
      ],
      "return": "BuShortTermForecastListing"
    },
    "GET /api/v2/workforcemanagement/businessunits": {
      "functionName": "get_workforcemanagement_businessunits",
      "signature": "get_workforcemanagement_businessunits(feature, division_id)",
      "parameters": [
        {
          "name": "feature",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "str"
        }
      ],
      "return": "BusinessUnitListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/divisionviews": {
      "functionName": "get_workforcemanagement_businessunits_divisionviews",
      "signature": "get_workforcemanagement_businessunits_divisionviews(division_id)",
      "parameters": [
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "BusinessUnitListing"
    },
    "GET /api/v2/workforcemanagement/calendar/data/ics": {
      "functionName": "get_workforcemanagement_calendar_data_ics",
      "signature": "get_workforcemanagement_calendar_data_ics(calendar_id)",
      "parameters": [
        {
          "name": "calendar_id",
          "type": "str"
        }
      ],
      "return": "str"
    },
    "GET /api/v2/workforcemanagement/calendar/url/ics": {
      "functionName": "get_workforcemanagement_calendar_url_ics",
      "signature": "get_workforcemanagement_calendar_url_ics()",
      "return": "CalendarUrlResponse"
    },
    "GET /api/v2/workforcemanagement/historicaldata/deletejob": {
      "functionName": "get_workforcemanagement_historicaldata_deletejob",
      "signature": "get_workforcemanagement_historicaldata_deletejob()",
      "return": "HistoricalImportDeleteJobResponse"
    },
    "GET /api/v2/workforcemanagement/historicaldata/importstatus": {
      "functionName": "get_workforcemanagement_historicaldata_importstatus",
      "signature": "get_workforcemanagement_historicaldata_importstatus()",
      "return": "HistoricalImportStatusListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "functionName": "get_workforcemanagement_managementunit",
      "signature": "get_workforcemanagement_managementunit(management_unit_id, expand)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "ManagementUnit"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes": {
      "functionName": "get_workforcemanagement_managementunit_activitycodes",
      "signature": "get_workforcemanagement_managementunit_activitycodes(management_unit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        }
      ],
      "return": "ActivityCodeContainer"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence": {
      "functionName": "get_workforcemanagement_managementunit_adherence",
      "signature": "get_workforcemanagement_managementunit_adherence(management_unit_id, force_download_service)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "force_download_service",
          "type": "bool"
        }
      ],
      "return": "UserScheduleAdherenceListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}": {
      "functionName": "get_workforcemanagement_managementunit_agent",
      "signature": "get_workforcemanagement_managementunit_agent(management_unit_id, agent_id, exclude_capabilities)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "agent_id",
          "type": "str"
        },
        {
          "name": "exclude_capabilities",
          "type": "bool"
        }
      ],
      "return": "WfmAgent"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades": {
      "functionName": "get_workforcemanagement_managementunit_agent_shifttrades",
      "signature": "get_workforcemanagement_managementunit_agent_shifttrades(management_unit_id, agent_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "agent_id",
          "type": "str"
        }
      ],
      "return": "ShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched": {
      "functionName": "get_workforcemanagement_managementunit_shifttrades_matched",
      "signature": "get_workforcemanagement_managementunit_shifttrades_matched(management_unit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        }
      ],
      "return": "ShiftTradeMatchesSummaryResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users": {
      "functionName": "get_workforcemanagement_managementunit_shifttrades_users",
      "signature": "get_workforcemanagement_managementunit_shifttrades_users(management_unit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        }
      ],
      "return": "WfmUserEntityListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "functionName": "get_workforcemanagement_managementunit_timeofflimit",
      "signature": "get_workforcemanagement_managementunit_timeofflimit(management_unit_id, time_off_limit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "time_off_limit_id",
          "type": "str"
        }
      ],
      "return": "TimeOffLimit"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits": {
      "functionName": "get_workforcemanagement_managementunit_timeofflimits",
      "signature": "get_workforcemanagement_managementunit_timeofflimits(management_unit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        }
      ],
      "return": "TimeOffLimitListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "functionName": "get_workforcemanagement_managementunit_timeoffplan",
      "signature": "get_workforcemanagement_managementunit_timeoffplan(management_unit_id, time_off_plan_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "time_off_plan_id",
          "type": "str"
        }
      ],
      "return": "TimeOffPlan"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans": {
      "functionName": "get_workforcemanagement_managementunit_timeoffplans",
      "signature": "get_workforcemanagement_managementunit_timeoffplans(management_unit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        }
      ],
      "return": "TimeOffPlanListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}": {
      "functionName": "get_workforcemanagement_managementunit_user_timeoffrequest",
      "signature": "get_workforcemanagement_managementunit_user_timeoffrequest(management_unit_id, user_id, time_off_request_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "time_off_request_id",
          "type": "str"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeofflimits": {
      "functionName": "get_workforcemanagement_managementunit_user_timeoffrequest_timeofflimits",
      "signature": "get_workforcemanagement_managementunit_user_timeoffrequest_timeofflimits(management_unit_id, user_id, time_off_request_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "time_off_request_id",
          "type": "str"
        }
      ],
      "return": "QueryTimeOffLimitValuesResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests": {
      "functionName": "get_workforcemanagement_managementunit_user_timeoffrequests",
      "signature": "get_workforcemanagement_managementunit_user_timeoffrequests(management_unit_id, user_id, recently_reviewed)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "recently_reviewed",
          "type": "bool"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users": {
      "functionName": "get_workforcemanagement_managementunit_users",
      "signature": "get_workforcemanagement_managementunit_users(management_unit_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        }
      ],
      "return": "WfmUserEntityListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "functionName": "get_workforcemanagement_managementunit_week_schedule",
      "signature": "get_workforcemanagement_managementunit_week_schedule(management_unit_id, week_id, schedule_id, expand, force_download_service)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "str"
        },
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "force_download_service",
          "type": "bool"
        }
      ],
      "return": "WeekScheduleResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules": {
      "functionName": "get_workforcemanagement_managementunit_week_schedules",
      "signature": "get_workforcemanagement_managementunit_week_schedules(management_unit_id, week_id, include_only_published, earliest_week_date, latest_week_date)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "str"
        },
        {
          "name": "include_only_published",
          "type": "bool"
        },
        {
          "name": "earliest_week_date",
          "type": "str"
        },
        {
          "name": "latest_week_date",
          "type": "str"
        }
      ],
      "return": "WeekScheduleListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades": {
      "functionName": "get_workforcemanagement_managementunit_week_shifttrades",
      "signature": "get_workforcemanagement_managementunit_week_shifttrades(management_unit_id, week_date_id, evaluate_matches)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "evaluate_matches",
          "type": "bool"
        }
      ],
      "return": "WeekShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "functionName": "get_workforcemanagement_managementunit_workplan",
      "signature": "get_workforcemanagement_managementunit_workplan(management_unit_id, work_plan_id, include_only)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_id",
          "type": "str"
        },
        {
          "name": "include_only",
          "type": "list[str]"
        }
      ],
      "return": "WorkPlan"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "functionName": "get_workforcemanagement_managementunit_workplanrotation",
      "signature": "get_workforcemanagement_managementunit_workplanrotation(management_unit_id, work_plan_rotation_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_rotation_id",
          "type": "str"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations": {
      "functionName": "get_workforcemanagement_managementunit_workplanrotations",
      "signature": "get_workforcemanagement_managementunit_workplanrotations(management_unit_id, expand)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "WorkPlanRotationListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans": {
      "functionName": "get_workforcemanagement_managementunit_workplans",
      "signature": "get_workforcemanagement_managementunit_workplans(management_unit_id, expand)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "WorkPlanListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits": {
      "functionName": "get_workforcemanagement_managementunits",
      "signature": "get_workforcemanagement_managementunits(page_size, page_number, expand, feature, division_id)",
      "parameters": [
        {
          "name": "page_size",
          "type": "int"
        },
        {
          "name": "page_number",
          "type": "int"
        },
        {
          "name": "expand",
          "type": "str"
        },
        {
          "name": "feature",
          "type": "str"
        },
        {
          "name": "division_id",
          "type": "str"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/divisionviews": {
      "functionName": "get_workforcemanagement_managementunits_divisionviews",
      "signature": "get_workforcemanagement_managementunits_divisionviews(division_id)",
      "parameters": [
        {
          "name": "division_id",
          "type": "list[str]"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/notifications": {
      "functionName": "get_workforcemanagement_notifications",
      "signature": "get_workforcemanagement_notifications()",
      "return": "NotificationsResponse"
    },
    "GET /api/v2/workforcemanagement/schedulingjobs/{jobId}": {
      "functionName": "get_workforcemanagement_schedulingjob",
      "signature": "get_workforcemanagement_schedulingjob(job_id)",
      "parameters": [
        {
          "name": "job_id",
          "type": "str"
        }
      ],
      "return": "SchedulingStatusResponse"
    },
    "GET /api/v2/workforcemanagement/shifttrades": {
      "functionName": "get_workforcemanagement_shifttrades",
      "signature": "get_workforcemanagement_shifttrades()",
      "return": "ShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}": {
      "functionName": "get_workforcemanagement_timeoffrequest",
      "signature": "get_workforcemanagement_timeoffrequest(time_off_request_id)",
      "parameters": [
        {
          "name": "time_off_request_id",
          "type": "str"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}/waitlistpositions": {
      "functionName": "get_workforcemanagement_timeoffrequest_waitlistpositions",
      "signature": "get_workforcemanagement_timeoffrequest_waitlistpositions(time_off_request_id)",
      "parameters": [
        {
          "name": "time_off_request_id",
          "type": "str"
        }
      ],
      "return": "WaitlistPositionListing"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests": {
      "functionName": "get_workforcemanagement_timeoffrequests",
      "signature": "get_workforcemanagement_timeoffrequests(recently_reviewed)",
      "parameters": [
        {
          "name": "recently_reviewed",
          "type": "bool"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "functionName": "patch_workforcemanagement_businessunit",
      "signature": "patch_workforcemanagement_businessunit(business_unit_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateBusinessUnitRequest"
        }
      ],
      "return": "BusinessUnit"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "functionName": "patch_workforcemanagement_businessunit_activitycode",
      "signature": "patch_workforcemanagement_businessunit_activitycode(business_unit_id, activity_code_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "activity_code_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateActivityCodeRequest"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "functionName": "patch_workforcemanagement_businessunit_planninggroup",
      "signature": "patch_workforcemanagement_businessunit_planninggroup(business_unit_id, planning_group_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "planning_group_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdatePlanningGroupRequest"
        }
      ],
      "return": "PlanningGroup"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "functionName": "patch_workforcemanagement_businessunit_scheduling_run",
      "signature": "patch_workforcemanagement_businessunit_scheduling_run(business_unit_id, run_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "run_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "PatchBuScheduleRunRequest"
        }
      ]
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "functionName": "patch_workforcemanagement_businessunit_servicegoaltemplate",
      "signature": "patch_workforcemanagement_businessunit_servicegoaltemplate(business_unit_id, service_goal_template_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "service_goal_template_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateServiceGoalTemplate"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "functionName": "patch_workforcemanagement_managementunit",
      "signature": "patch_workforcemanagement_managementunit(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateManagementUnitRequest"
        }
      ],
      "return": "ManagementUnit"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "functionName": "patch_workforcemanagement_managementunit_timeofflimit",
      "signature": "patch_workforcemanagement_managementunit_timeofflimit(management_unit_id, time_off_limit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "time_off_limit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateTimeOffLimitRequest"
        }
      ],
      "return": "TimeOffLimit"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "functionName": "patch_workforcemanagement_managementunit_timeoffplan",
      "signature": "patch_workforcemanagement_managementunit_timeoffplan(management_unit_id, time_off_plan_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "time_off_plan_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateTimeOffPlanRequest"
        }
      ],
      "return": "TimeOffPlan"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}": {
      "functionName": "patch_workforcemanagement_managementunit_user_timeoffrequest",
      "signature": "patch_workforcemanagement_managementunit_user_timeoffrequest(management_unit_id, user_id, time_off_request_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "user_id",
          "type": "str"
        },
        {
          "name": "time_off_request_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AdminTimeOffRequestPatch"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}": {
      "functionName": "patch_workforcemanagement_managementunit_week_shifttrade",
      "signature": "patch_workforcemanagement_managementunit_week_shifttrade(management_unit_id, week_date_id, body, trade_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "body",
          "type": "PatchShiftTradeRequest"
        },
        {
          "name": "trade_id",
          "type": "str"
        }
      ],
      "return": "ShiftTradeResponse"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "functionName": "patch_workforcemanagement_managementunit_workplan",
      "signature": "patch_workforcemanagement_managementunit_workplan(management_unit_id, work_plan_id, body, validation_mode)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WorkPlan"
        },
        {
          "name": "validation_mode",
          "type": "str"
        }
      ],
      "return": "WorkPlan"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "functionName": "patch_workforcemanagement_managementunit_workplanrotation",
      "signature": "patch_workforcemanagement_managementunit_workplanrotation(management_unit_id, work_plan_rotation_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_rotation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UpdateWorkPlanRotationRequest"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "PATCH /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}": {
      "functionName": "patch_workforcemanagement_timeoffrequest",
      "signature": "patch_workforcemanagement_timeoffrequest(time_off_request_id, body)",
      "parameters": [
        {
          "name": "time_off_request_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AgentTimeOffRequestPatch"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "POST /api/v2/workforcemanagement/adherence/historical": {
      "functionName": "post_workforcemanagement_adherence_historical",
      "signature": "post_workforcemanagement_adherence_historical(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WfmHistoricalAdherenceQueryForUsers"
        }
      ],
      "return": "WfmHistoricalAdherenceResponse"
    },
    "POST /api/v2/workforcemanagement/agentschedules/mine": {
      "functionName": "post_workforcemanagement_agentschedules_mine",
      "signature": "post_workforcemanagement_agentschedules_mine(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BuGetCurrentAgentScheduleRequest"
        }
      ],
      "return": "BuCurrentAgentScheduleSearchResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes": {
      "functionName": "post_workforcemanagement_businessunit_activitycodes",
      "signature": "post_workforcemanagement_businessunit_activitycodes(business_unit_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateActivityCodeRequest"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search": {
      "functionName": "post_workforcemanagement_businessunit_agentschedules_search",
      "signature": "post_workforcemanagement_businessunit_agentschedules_search(business_unit_id, body, force_async, force_download_service)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "BuSearchAgentSchedulesRequest"
        },
        {
          "name": "force_async",
          "type": "bool"
        },
        {
          "name": "force_download_service",
          "type": "bool"
        }
      ],
      "return": "BuAsyncAgentSchedulesSearchResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday": {
      "functionName": "post_workforcemanagement_businessunit_intraday",
      "signature": "post_workforcemanagement_businessunit_intraday(business_unit_id, force_async, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "force_async",
          "type": "bool"
        },
        {
          "name": "body",
          "type": "IntradayPlanningGroupRequest"
        }
      ],
      "return": "AsyncIntradayResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups": {
      "functionName": "post_workforcemanagement_businessunit_planninggroups",
      "signature": "post_workforcemanagement_businessunit_planninggroups(business_unit_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreatePlanningGroupRequest"
        }
      ],
      "return": "PlanningGroup"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates": {
      "functionName": "post_workforcemanagement_businessunit_servicegoaltemplates",
      "signature": "post_workforcemanagement_businessunit_servicegoaltemplates(business_unit_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateServiceGoalTemplate"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query": {
      "functionName": "post_workforcemanagement_businessunit_week_schedule_agentschedules_query",
      "signature": "post_workforcemanagement_businessunit_week_schedule_agentschedules_query(business_unit_id, week_id, schedule_id, body, force_async, force_download_service)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "BuQueryAgentSchedulesRequest"
        },
        {
          "name": "force_async",
          "type": "bool"
        },
        {
          "name": "force_download_service",
          "type": "bool"
        }
      ],
      "return": "BuAsyncAgentSchedulesQueryResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy": {
      "functionName": "post_workforcemanagement_businessunit_week_schedule_copy",
      "signature": "post_workforcemanagement_businessunit_week_schedule_copy(business_unit_id, week_id, schedule_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "BuCopyScheduleRequest"
        }
      ],
      "return": "BuAsyncScheduleResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule": {
      "functionName": "post_workforcemanagement_businessunit_week_schedule_reschedule",
      "signature": "post_workforcemanagement_businessunit_week_schedule_reschedule(business_unit_id, week_id, schedule_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "schedule_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "BuRescheduleRequest"
        }
      ],
      "return": "BuAsyncScheduleRunResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules": {
      "functionName": "post_workforcemanagement_businessunit_week_schedules",
      "signature": "post_workforcemanagement_businessunit_week_schedules(business_unit_id, week_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "body",
          "type": "BuCreateBlankScheduleRequest"
        }
      ],
      "return": "BuScheduleMetadata"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate": {
      "functionName": "post_workforcemanagement_businessunit_week_schedules_generate",
      "signature": "post_workforcemanagement_businessunit_week_schedules_generate(business_unit_id, week_id, body)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_id",
          "type": "date"
        },
        {
          "name": "body",
          "type": "BuGenerateScheduleRequest"
        }
      ],
      "return": "BuAsyncScheduleRunResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy": {
      "functionName": "post_workforcemanagement_businessunit_week_shorttermforecast_copy",
      "signature": "post_workforcemanagement_businessunit_week_shorttermforecast_copy(business_unit_id, week_date_id, forecast_id, body, force_async)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "forecast_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CopyBuForecastRequest"
        },
        {
          "name": "force_async",
          "type": "bool"
        }
      ],
      "return": "AsyncForecastOperationResult"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate": {
      "functionName": "post_workforcemanagement_businessunit_week_shorttermforecasts_generate",
      "signature": "post_workforcemanagement_businessunit_week_shorttermforecasts_generate(business_unit_id, week_date_id, body, force_async)",
      "parameters": [
        {
          "name": "business_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "body",
          "type": "GenerateBuForecastRequest"
        },
        {
          "name": "force_async",
          "type": "bool"
        }
      ],
      "return": "AsyncForecastOperationResult"
    },
    "POST /api/v2/workforcemanagement/businessunits": {
      "functionName": "post_workforcemanagement_businessunits",
      "signature": "post_workforcemanagement_businessunits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateBusinessUnitRequest"
        }
      ],
      "return": "BusinessUnit"
    },
    "POST /api/v2/workforcemanagement/calendar/url/ics": {
      "functionName": "post_workforcemanagement_calendar_url_ics",
      "signature": "post_workforcemanagement_calendar_url_ics(language)",
      "parameters": [
        {
          "name": "language",
          "type": "str"
        }
      ],
      "return": "CalendarUrlResponse"
    },
    "POST /api/v2/workforcemanagement/historicaldata/deletejob": {
      "functionName": "post_workforcemanagement_historicaldata_deletejob",
      "signature": "post_workforcemanagement_historicaldata_deletejob()",
      "return": "HistoricalImportDeleteJobResponse"
    },
    "POST /api/v2/workforcemanagement/historicaldata/validate": {
      "functionName": "post_workforcemanagement_historicaldata_validate",
      "signature": "post_workforcemanagement_historicaldata_validate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ValidationServiceRequest"
        }
      ]
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search": {
      "functionName": "post_workforcemanagement_managementunit_agentschedules_search",
      "signature": "post_workforcemanagement_managementunit_agentschedules_search(management_unit_id, body, force_async, force_download_service)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "BuSearchAgentSchedulesRequest"
        },
        {
          "name": "force_async",
          "type": "bool"
        },
        {
          "name": "force_download_service",
          "type": "bool"
        }
      ],
      "return": "BuAsyncAgentSchedulesSearchResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery": {
      "functionName": "post_workforcemanagement_managementunit_historicaladherencequery",
      "signature": "post_workforcemanagement_managementunit_historicaladherencequery(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WfmHistoricalAdherenceQuery"
        }
      ],
      "return": "WfmHistoricalAdherenceResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/move": {
      "functionName": "post_workforcemanagement_managementunit_move",
      "signature": "post_workforcemanagement_managementunit_move(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "MoveManagementUnitRequest"
        }
      ],
      "return": "MoveManagementUnitResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search": {
      "functionName": "post_workforcemanagement_managementunit_schedules_search",
      "signature": "post_workforcemanagement_managementunit_schedules_search(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "UserListScheduleRequestBody"
        }
      ],
      "return": "UserScheduleContainer"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits": {
      "functionName": "post_workforcemanagement_managementunit_timeofflimits",
      "signature": "post_workforcemanagement_managementunit_timeofflimits(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateTimeOffLimitRequest"
        }
      ],
      "return": "TimeOffLimit"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/values/query": {
      "functionName": "post_workforcemanagement_managementunit_timeofflimits_values_query",
      "signature": "post_workforcemanagement_managementunit_timeofflimits_values_query(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "QueryTimeOffLimitValuesRequest"
        }
      ],
      "return": "QueryTimeOffLimitValuesResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans": {
      "functionName": "post_workforcemanagement_managementunit_timeoffplans",
      "signature": "post_workforcemanagement_managementunit_timeoffplans(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateTimeOffPlanRequest"
        }
      ],
      "return": "TimeOffPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests": {
      "functionName": "post_workforcemanagement_managementunit_timeoffrequests",
      "signature": "post_workforcemanagement_managementunit_timeoffrequests(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateAdminTimeOffRequest"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query": {
      "functionName": "post_workforcemanagement_managementunit_timeoffrequests_query",
      "signature": "post_workforcemanagement_managementunit_timeoffrequests_query(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "TimeOffRequestQueryBody"
        }
      ],
      "return": "TimeOffRequestListing"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/waitlistpositions/query": {
      "functionName": "post_workforcemanagement_managementunit_timeoffrequests_waitlistpositions_query",
      "signature": "post_workforcemanagement_managementunit_timeoffrequests_waitlistpositions_query(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "QueryWaitlistPositionsRequest"
        }
      ],
      "return": "WaitlistPositionListing"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match": {
      "functionName": "post_workforcemanagement_managementunit_week_shifttrade_match",
      "signature": "post_workforcemanagement_managementunit_week_shifttrade_match(management_unit_id, week_date_id, body, trade_id)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "body",
          "type": "MatchShiftTradeRequest"
        },
        {
          "name": "trade_id",
          "type": "str"
        }
      ],
      "return": "MatchShiftTradeResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades": {
      "functionName": "post_workforcemanagement_managementunit_week_shifttrades",
      "signature": "post_workforcemanagement_managementunit_week_shifttrades(management_unit_id, week_date_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "body",
          "type": "AddShiftTradeRequest"
        }
      ],
      "return": "ShiftTradeResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search": {
      "functionName": "post_workforcemanagement_managementunit_week_shifttrades_search",
      "signature": "post_workforcemanagement_managementunit_week_shifttrades_search(management_unit_id, week_date_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "body",
          "type": "SearchShiftTradesRequest"
        }
      ],
      "return": "SearchShiftTradesResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk": {
      "functionName": "post_workforcemanagement_managementunit_week_shifttrades_state_bulk",
      "signature": "post_workforcemanagement_managementunit_week_shifttrades_state_bulk(management_unit_id, week_date_id, body, force_async)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "week_date_id",
          "type": "date"
        },
        {
          "name": "body",
          "type": "BulkShiftTradeStateUpdateRequest"
        },
        {
          "name": "force_async",
          "type": "bool"
        }
      ],
      "return": "BulkUpdateShiftTradeStateResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy": {
      "functionName": "post_workforcemanagement_managementunit_workplan_copy",
      "signature": "post_workforcemanagement_managementunit_workplan_copy(management_unit_id, work_plan_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CopyWorkPlan"
        }
      ],
      "return": "WorkPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate": {
      "functionName": "post_workforcemanagement_managementunit_workplan_validate",
      "signature": "post_workforcemanagement_managementunit_workplan_validate(management_unit_id, work_plan_id, body, expand)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "WorkPlanValidationRequest"
        },
        {
          "name": "expand",
          "type": "list[str]"
        }
      ],
      "return": "ValidateWorkPlanResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy": {
      "functionName": "post_workforcemanagement_managementunit_workplanrotation_copy",
      "signature": "post_workforcemanagement_managementunit_workplanrotation_copy(management_unit_id, work_plan_rotation_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "work_plan_rotation_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CopyWorkPlanRotationRequest"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations": {
      "functionName": "post_workforcemanagement_managementunit_workplanrotations",
      "signature": "post_workforcemanagement_managementunit_workplanrotations(management_unit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "AddWorkPlanRotationRequest"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans": {
      "functionName": "post_workforcemanagement_managementunit_workplans",
      "signature": "post_workforcemanagement_managementunit_workplans(management_unit_id, body, validation_mode)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "CreateWorkPlan"
        },
        {
          "name": "validation_mode",
          "type": "str"
        }
      ],
      "return": "WorkPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits": {
      "functionName": "post_workforcemanagement_managementunits",
      "signature": "post_workforcemanagement_managementunits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateManagementUnitApiRequest"
        }
      ],
      "return": "ManagementUnit"
    },
    "POST /api/v2/workforcemanagement/notifications/update": {
      "functionName": "post_workforcemanagement_notifications_update",
      "signature": "post_workforcemanagement_notifications_update(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UpdateNotificationsRequest"
        }
      ],
      "return": "UpdateNotificationsResponse"
    },
    "POST /api/v2/workforcemanagement/schedules": {
      "functionName": "post_workforcemanagement_schedules",
      "signature": "post_workforcemanagement_schedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CurrentUserScheduleRequestBody"
        }
      ],
      "return": "UserScheduleContainer"
    },
    "POST /api/v2/workforcemanagement/timeofflimits/available/query": {
      "functionName": "post_workforcemanagement_timeofflimits_available_query",
      "signature": "post_workforcemanagement_timeofflimits_available_query(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AvailableTimeOffRequest"
        }
      ],
      "return": "AvailableTimeOffResponse"
    },
    "POST /api/v2/workforcemanagement/timeoffrequests": {
      "functionName": "post_workforcemanagement_timeoffrequests",
      "signature": "post_workforcemanagement_timeoffrequests(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateAgentTimeOffRequest"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "PUT /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}/values": {
      "functionName": "put_workforcemanagement_managementunit_timeofflimit_values",
      "signature": "put_workforcemanagement_managementunit_timeofflimit_values(management_unit_id, time_off_limit_id, body)",
      "parameters": [
        {
          "name": "management_unit_id",
          "type": "str"
        },
        {
          "name": "time_off_limit_id",
          "type": "str"
        },
        {
          "name": "body",
          "type": "SetTimeOffLimitValuesRequest"
        }
      ],
      "return": "TimeOffLimit"
    }
  }
}